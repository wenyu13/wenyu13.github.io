{
    "version": "https://jsonfeed.org/version/1",
    "title": "🔥 老将不死 💗 薪火相传 🔥",
    "subtitle": "",
    "icon": "https://151064.xyz/assets/favicon.ico",
    "description": "夏日蝉鸣，梧桐树下",
    "home_page_url": "https://151064.xyz",
    "items": [
        {
            "id": "https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html",
            "url": "https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html",
            "title": "Python",
            "date_published": "2025-04-24T15:46:37.000Z",
            "content_html": "<h1 id=\"第一章-python基础编程\"><a class=\"anchor\" href=\"#第一章-python基础编程\">#</a> 第一章 Python 基础编程</h1>\n<h2 id=\"1-1-python开发环境搭建\"><a class=\"anchor\" href=\"#1-1-python开发环境搭建\">#</a> 1-1 python 开发环境搭建</h2>\n<h4 id=\"了解python学习大纲\"><a class=\"anchor\" href=\"#了解python学习大纲\">#</a> 了解 Python (学习大纲)</h4>\n<p>Pyhton: 互联网应用开发</p>\n<p>基本语法：</p>\n<p>（1）输入输出：</p>\n<ol>\n<li>输入：用户输入处理</li>\n<li>输出：数据格式话输出</li>\n</ol>\n<p>（2）变量：定义与使用</p>\n<p>（3）注释：多行与单行</p>\n<p>（4）Bug 处理：异常处理</p>\n<p>（5）格式化输出：用 format 函数</p>\n<h4 id=\"python概述\"><a class=\"anchor\" href=\"#python概述\">#</a> Python 概述</h4>\n<p>应用场景：</p>\n<ol>\n<li>自动化运维和测试</li>\n<li>数据清洗和分析</li>\n<li>人工智能和大数据处理</li>\n</ol>\n<p>Python:33 个关键词，7 种基本数据类型</p>\n<h4 id=\"计算机资源\"><a class=\"anchor\" href=\"#计算机资源\">#</a> 计算机资源</h4>\n<p>分类：</p>\n<ol>\n<li>软件：看得见摸不着</li>\n<li>硬件：看得见且摸得着</li>\n</ol>\n<p>软硬件交互：桥梁是交互系统</p>\n<table>\n<thead>\n<tr>\n<th>计算机资源</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPython</td>\n<td>使用 C 语言开发</td>\n</tr>\n<tr>\n<td>IPython</td>\n<td>基于 CPython，增加交互功能</td>\n</tr>\n<tr>\n<td>Jython</td>\n<td>用 Java 开发，将 Python 代码翻译成 Java 字节码</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"python开发利器\"><a class=\"anchor\" href=\"#python开发利器\">#</a> Python 开发利器</h4>\n<p>Python 的开发利器：PyCharm</p>\n<p>作用：</p>\n<ol>\n<li>Project 管理</li>\n<li>智能提示</li>\n<li>语法高亮</li>\n<li>代码跳转</li>\n<li>调试代码</li>\n<li>解释代码（解释器）</li>\n</ol>\n<h4 id=\"pycharm创建入门\"><a class=\"anchor\" href=\"#pycharm创建入门\">#</a> PyCharm 创建入门</h4>\n<p>创建项目【选择新建项目（a new project）】</p>\n<ol>\n<li>设置路径至 D,E,F 盘 (避免 C 盘重装风险)</li>\n<li>命名项目</li>\n<li>选择环境，避免使用虚拟环境</li>\n</ol>\n<p>创建 Python 文件:</p>\n<ol>\n<li>右击点击项目文件夹</li>\n<li>选择 &quot;新建 Python 文件&quot;(python file)</li>\n<li>命名 (尽量不用中文)</li>\n</ol>\n<p>编写入门程序：使用单引号或双引号包围文本 (字符串)</p>\n<p>运行代码的方式:</p>\n<ol>\n<li>鼠标右键点击代码文件</li>\n<li>选择运行图标</li>\n<li>快捷键 “Ctrl+Shift+F10”</li>\n</ol>\n<h4 id=\"pycharm常见问题之解析器配置\"><a class=\"anchor\" href=\"#pycharm常见问题之解析器配置\">#</a> PyCharm 常见问题之解析器配置</h4>\n<p>遇到 Python 文件运行问题时，首先检查解析器配置</p>\n<p>通过 Python 的 &quot;setting&quot; 进行解析器的更换与配置</p>\n<ol>\n<li>更换解析器流程：找到配置界面：find-setting</li>\n<li>选择 “a new project”（或类似命名的项目）</li>\n<li>进入 settings 查找配置</li>\n</ol>\n<p>配置解析器：</p>\n<ol>\n<li>选择 “interpreter”</li>\n<li>引入所需 Python 版本</li>\n</ol>\n<p>确认或更改路径:</p>\n<ol>\n<li>点小齿轮图标</li>\n<li>选择 &quot;添加&quot;</li>\n<li>选择 &quot;已安装&quot; 的 &quot;Python.exe&quot;</li>\n</ol>\n<h4 id=\"python开发环境搭建\"><a class=\"anchor\" href=\"#python开发环境搭建\">#</a> Python 开发环境搭建</h4>\n<h4 id=\"pycharm软件本身设置\"><a class=\"anchor\" href=\"#pycharm软件本身设置\">#</a> PyCharm 软件本身设置</h4>\n<ol>\n<li>\n<p>软件主题（即软件外观）</p>\n<p>点击 file，再点击 settings</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/430kzRF9/1743519058605.png\" alt=\"1743519058605.png\" /></p>\n<p>选择第一个 Behavior, 再选择 Appearance</p>\n</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SRsQfb6F/1743519220679.png\" alt=\"1743519220679.png\" /></p>\n<p>找到主题，选择界面</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Z5dNFdmc/1743519433836.png\" alt=\"1743519433836.png\" /></p>\n<p>2. 设置字体与字号</p>\n<p>在 settings 中找到一个叫 editor 的选择，在选项中选择 font</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/zDPv3GhF/1743519761773.png\" alt=\"1743519761773.png\" /></p>\n<p>size 代表字体的一个大小</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/ZqHmvwWy/1743519833063.png\" alt=\"1743519833063.png\" /></p>\n<p>3. 关闭项目</p>\n<p>点一下 fail 找到 close project，代表把这个项目关闭掉</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/dQbfvg6t/1743519946790.png\" alt=\"1743519946790.png\" /></p>\n<h2 id=\"1-2-python注释与变量\"><a class=\"anchor\" href=\"#1-2-python注释与变量\">#</a> 1-2 Python 注释与变量</h2>\n<h4 id=\"pycharm快捷键与编辑习惯\"><a class=\"anchor\" href=\"#pycharm快捷键与编辑习惯\">#</a> PyCharm 快捷键与编辑习惯</h4>\n<h4 id=\"python注释\"><a class=\"anchor\" href=\"#python注释\">#</a> Python 注释</h4>\n<p>注释的原因：为了程序的可读性</p>\n<p>在 Python 中有两种注释方式：单行注释和多行注释</p>\n<table>\n<thead>\n<tr>\n<th>注释方式</th>\n<th>区别</th>\n<th>基本语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>单行注释</td>\n<td>只能注释一行内容</td>\n<td>#注释内容</td>\n</tr>\n<tr>\n<td>多行注释</td>\n<td>可以注释多行内容，常用于代码块注释情况</td>\n<td>“”“           ”“”</td>\n</tr>\n</tbody>\n</table>\n<p>小技巧：</p>\n<p>可以使用 Ctrl+/ 来对代码或程序进行快速注释</p>\n<h4 id=\"pycharm常用快捷键\"><a class=\"anchor\" href=\"#pycharm常用快捷键\">#</a> PyCharm 常用快捷键</h4>\n<table>\n<thead>\n<tr>\n<th>常用快捷键</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>代码提示</td>\n<td>代码提示：输入关键字的前 2~3 个字符（PyCharm 本身自带了一个代码提供的功能），会自动进行代码提示</td>\n</tr>\n<tr>\n<td>代码保存</td>\n<td>Ctrl+s</td>\n</tr>\n<tr>\n<td>撤销与恢复</td>\n<td>撤销：Ctrl+Z     恢复：Ctrl+Y</td>\n</tr>\n<tr>\n<td>快速注释</td>\n<td>Ctrl+/</td>\n</tr>\n<tr>\n<td>代码自动格式化</td>\n<td>Ctrl+Alt+L</td>\n</tr>\n<tr>\n<td>快速复制当前行到下一行</td>\n<td>Ctrl+D</td>\n</tr>\n</tbody>\n</table>\n<p>在编写 Python 代码时，一定要注意代码缩进问题，在 Python 语言中，缩进代表上下级关系</p>\n<h4 id=\"python变量\"><a class=\"anchor\" href=\"#python变量\">#</a> Python 变量</h4>\n<p>量：量是程序运行中的最小单元</p>\n<p>变量：</p>\n<ol>\n<li>变量是存储数据的容器</li>\n<li>变量是程序运行中可以变化的量</li>\n<li>变量存储的数据是临时的（永久存储数据：放入数据库中）</li>\n</ol>\n<p>变量的作用：简单来说，就是临时存储</p>\n<h4 id=\"变量的定义\"><a class=\"anchor\" href=\"#变量的定义\">#</a> 变量的定义</h4>\n<p>变量名 = 变量的值（计算机从右往左走）</p>\n<p>&lt;!-- 注意：= 两边都要留个空格！变量名可以自定义，但是要满足‘标识符’的命名规则 --&gt;</p>\n<h4 id=\"标识符的命名规则\"><a class=\"anchor\" href=\"#标识符的命名规则\">#</a> ‘标识符’的命名规则</h4>\n<ol>\n<li>由数字、字母、下划线组成（例：user_name)</li>\n<li>不能数字开头（例：hello5)</li>\n<li>严格区分大小写（a 和 A 是两个完全不同的变量名）</li>\n<li>不能使用内置关键字作为变量名称</li>\n</ol>\n<h4 id=\"内置关键字\"><a class=\"anchor\" href=\"#内置关键字\">#</a> 内置关键字</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/0r1RcHMt/1743685933288.png\" alt=\"1743685933288.png\" /></p>\n<h4 id=\"命名习惯\"><a class=\"anchor\" href=\"#命名习惯\">#</a> 命名习惯</h4>\n<ol>\n<li>要做到见名知义</li>\n<li>大驼峰：每个单词首字母都大写</li>\n<li>小驼峰：第二个（含）以后的单词首字母要大写</li>\n<li>下划线</li>\n</ol>\n<h4 id=\"变量的定义-2\"><a class=\"anchor\" href=\"#变量的定义-2\">#</a> 变量的定义</h4>\n<p>先定义后使用</p>\n<h2 id=\"1-3-python数据类型\"><a class=\"anchor\" href=\"#1-3-python数据类型\">#</a> 1-3 Python 数据类型</h2>\n<h4 id=\"python中的7种数据类型\"><a class=\"anchor\" href=\"#python中的7种数据类型\">#</a> Python 中的 7 种数据类型</h4>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数值</td>\n<td>int (整形)      float (浮点形，带小数点)</td>\n<td>定义时直接写数字即可，不需要添加任何符号</td>\n</tr>\n<tr>\n<td>布尔性</td>\n<td>True (真)      False (假)</td>\n<td>只有两个值，且必须首字母大写</td>\n</tr>\n<tr>\n<td>str</td>\n<td>字符串</td>\n<td>通过一对引号引起来的内容</td>\n</tr>\n<tr>\n<td>list</td>\n<td>列表</td>\n<td>数据可以发生改变</td>\n</tr>\n<tr>\n<td>tuple</td>\n<td>元素</td>\n<td>数据一但定义，其值就不能发生改变了</td>\n</tr>\n<tr>\n<td>set</td>\n<td>集合</td>\n<td>自动去重</td>\n</tr>\n<tr>\n<td>dick</td>\n<td>字典</td>\n<td>查询神器</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"认识bug\"><a class=\"anchor\" href=\"#认识bug\">#</a> 认识 Bug</h4>\n<p>Bug, 即程序中的错误</p>\n<h4 id=\"解决bug三步走编译型错误即语法错误\"><a class=\"anchor\" href=\"#解决bug三步走编译型错误即语法错误\">#</a> 解决 bug 三步走 (编译型错误，即语法错误)</h4>\n<p>&lt;!-- 容易查找 --&gt;</p>\n<ol>\n<li>查看错误页面</li>\n<li>看错误的行号</li>\n<li>根据具体的错误，具体分析</li>\n</ol>\n<h4 id=\"pycharm代码调试运行时错误\"><a class=\"anchor\" href=\"#pycharm代码调试运行时错误\">#</a> PyCharm 代码调试 (运行时错误)</h4>\n<p>Debug 工具是 PyCharm IDE 中集成的专门用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程，以方便我们快速找出程序的 Bug</p>\n<p>Debug 工具使用二步走:①打断点②Debug 调试</p>\n<p>注意：Debug 还可以用于了解程序的运行流程</p>\n<h4 id=\"下断点\"><a class=\"anchor\" href=\"#下断点\">#</a> 下断点</h4>\n<p>断点应该放在哪个位置：答: 代码可能出错的代码段的第一行</p>\n<h2 id=\"1-4-python格式化输出\"><a class=\"anchor\" href=\"#1-4-python格式化输出\">#</a> 1-4 Python 格式化输出</h2>\n<h4 id=\"python中print输出函数详解\"><a class=\"anchor\" href=\"#python中print输出函数详解\">#</a> Python 中 print 输出函数详解</h4>\n<h4 id=\"格式化输出\"><a class=\"anchor\" href=\"#格式化输出\">#</a> 格式化输出</h4>\n<p>输出：就是程序输出给用户</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/jqnrykVK/1743772303495.png\" alt=\"1743772303495.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SxkFFSnN/1743772309087.png\" alt=\"1743772309087.png\" /></p>\n<p>print () 函数：主要功能用于实现对变量以及字符串类型数据的直接输出</p>\n<p>end 参数，代表当前面的变量或文本信息输出完毕后，追加的内容，默认为 \\n，代表换行符</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/kMTttGdL/1743772994621.png\" alt=\"1743772994621.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/CLtBm25N/1743773009029.png\" alt=\"1743773009029.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/K8ScKh4d/1743773173194.png\" alt=\"1743773173194.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/RZ7SKpHq/1743773184771.png\" alt=\"1743773184771.png\" /></p>\n<h4 id=\"转义字符\"><a class=\"anchor\" href=\"#转义字符\">#</a> \\ 转义字符</h4>\n<table>\n<thead>\n<tr>\n<th>\\ 转义字符</th>\n<th>表示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\t</td>\n<td>一个 Tab 键的缩进</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行符，实现自动换行（针对终端）</td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/KcC35VR5/1743773346355-1.png\" alt=\"1743773346355-1.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/5NvYK3zW/1743773352777.png\" alt=\"1743773352777.png\" /></p>\n<h4 id=\"百分号形式的格式化输出\"><a class=\"anchor\" href=\"#百分号形式的格式化输出\">#</a> 百分号形式的格式化输出</h4>\n<p>% 格式常见形式如下</p>\n<table>\n<thead>\n<tr>\n<th>格式符号</th>\n<th>转换</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%s</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>有符号的十进制整数</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>无符号十进制整数</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>八进制整数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>十六进制整数（小写 ox)</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>十六进制整数（大写 OX)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"python中input函数详细讲解\"><a class=\"anchor\" href=\"#python中input函数详细讲解\">#</a> Python 中 input 函数详细讲解</h4>\n<h4 id=\"input输入方法\"><a class=\"anchor\" href=\"#input输入方法\">#</a> input () 输入方法</h4>\n<p>input (' 提示信息 ')</p>\n<p>input () 函数，其只要写入一个参数，代表系统的提示信息</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/g23Hyctp/1744292593489.png\" alt=\"1744292593489.png\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/jq91Z5cn/1744293166855.png\" alt=\"1744293166855.png\" /></p>\n<h4 id=\"输入的特点\"><a class=\"anchor\" href=\"#输入的特点\">#</a> 输入的特点：</h4>\n<ol>\n<li>当程序执行到 'input', 等待用户输入，输入完成之后才能继续向下执行。</li>\n<li>在 Python 中，'linput' 接收用户输入后，一般存储到变量， 方便使用。</li>\n<li>在 Python 中，'input' 会把接收到的任意用户输入的数据都当做字符串处理。</li>\n</ol>\n<h4 id=\"input方法注意现象\"><a class=\"anchor\" href=\"#input方法注意现象\">#</a> input 方法注意现象</h4>\n<p>&lt;!-- 注意：所有由 input () 方法获取的数据都是 “字符串” 类型 --&gt;</p>\n<h2 id=\"1-5-python运算符\"><a class=\"anchor\" href=\"#1-5-python运算符\">#</a> 1-5 Python 运算符</h2>\n<h4 id=\"使用临时变量实现两个变量值的交换\"><a class=\"anchor\" href=\"#使用临时变量实现两个变量值的交换\">#</a> 使用临时变量实现两个变量值的交换</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Bby88zrb/1744295368074.png\" alt=\"1744295368074.png\" /></p>\n<h4 id=\"学习目标\"><a class=\"anchor\" href=\"#学习目标\">#</a> 学习目标</h4>\n<ol>\n<li>掌握常见数据类型转化函数及 其应用</li>\n<li>掌握常见运算符的使用</li>\n<li>了 解条件语句的作用</li>\n<li>掌握 if 结构、 if..else 结构的使用</li>\n<li>掌握 if 嵌套结构</li>\n<li>掌握三目运算符的使用</li>\n</ol>\n<h4 id=\"python数据类型的转换\"><a class=\"anchor\" href=\"#python数据类型的转换\">#</a> Python 数据类型的转换</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/7Y4bj6xr/1744465841637.png\" alt=\"1744465841637.png\" /></p>\n<h4 id=\"四种转换方法\"><a class=\"anchor\" href=\"#四种转换方法\">#</a> 四种转换方法</h4>\n<h4 id=\"数据类型转换函数\"><a class=\"anchor\" href=\"#数据类型转换函数\">#</a> 数据类型转换函数</h4>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>int(x[,base])</td>\n<td>将 x 转换为一个整数</td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td>将 x 转换为一个浮点数</td>\n</tr>\n<tr>\n<td>complex(real[,imag])</td>\n<td>创建一个复数， real 为实部， imag 为 虚部]</td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td>将对象 x 转换为字符串</td>\n</tr>\n<tr>\n<td>repr(x)</td>\n<td>将对象 x 转换为表达式字符串</td>\n</tr>\n<tr>\n<td>eval(x)</td>\n<td>用来计算在字符串中的有效 Python 表达式，并返回一个对象</td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td>将序列 s 转换为一个元组</td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td>将序列 s 转换为一个列表</td>\n</tr>\n<tr>\n<td>chr(x)</td>\n<td>将一个整数转换为一一个 Unicode 字符</td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个字符转换为它的 ASCII 整数值</td>\n</tr>\n<tr>\n<td>hex(x)</td>\n<td>将一个整数转换为一个十六进制字符串</td>\n</tr>\n<tr>\n<td>oct(x)</td>\n<td>将一个整数转换为一一个八进制字符串</td>\n</tr>\n<tr>\n<td>bin(x)</td>\n<td>将一个整数转换为一个二进制字符串</td>\n</tr>\n</tbody>\n</table>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/jdRk8GFd/20250412221021.jpg\" alt=\"20250412221021.jpg\" /></p>\n<h4 id=\"运算符的使用\"><a class=\"anchor\" href=\"#运算符的使用\">#</a> 运算符的使用</h4>\n<h4 id=\"运算符分类\"><a class=\"anchor\" href=\"#运算符分类\">#</a> 运算符分类</h4>\n<ol>\n<li>算数运算符</li>\n<li>赋值运算符（=）</li>\n<li>复合赋值运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>加</td>\n<td>1 + 1 输出的结果是 2</td>\n</tr>\n<tr>\n<td>-</td>\n<td>减</td>\n<td>1 - 1 输出的结果是 0</td>\n</tr>\n<tr>\n<td>*</td>\n<td>乘</td>\n<td>2 * 2 输出的结果是 4</td>\n</tr>\n<tr>\n<td>/</td>\n<td>除</td>\n<td>10 / 2 输出的结果是 5</td>\n</tr>\n<tr>\n<td>//</td>\n<td>整除</td>\n<td>9 // 2 输出的结果是 4</td>\n</tr>\n<tr>\n<td>%</td>\n<td>取余（取模）</td>\n<td>9 % 4 输出的结果是 1</td>\n</tr>\n<tr>\n<td>**</td>\n<td>幂</td>\n<td>2 ** 4 输出的结果是 16</td>\n</tr>\n<tr>\n<td>（）</td>\n<td>小括号，用来提高运算优先级</td>\n<td>（1 + 2） * 3 输出的结果是 9</td>\n</tr>\n</tbody>\n</table>\n<p>注意：</p>\n<p>混合运算符优先级顺序：（）高于 **<em> 高于</em> * /// % 高于 + -</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/4NmJWfxs/20250412224709.jpg\" alt=\"20250412224709.jpg\" /></p>\n<h4 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/qRN9rRhG/20250412225318.jpg\" alt=\"20250412225318.jpg\" /></p>\n<h4 id=\"复合赋值运算符\"><a class=\"anchor\" href=\"#复合赋值运算符\">#</a> 复合赋值运算符</h4>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+=</td>\n<td>加法赋值运算符</td>\n<td>c += a 等价于 c = c + a</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减法赋值运算符</td>\n<td>c -= a 等价于 c = c - a</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘法赋值运算符</td>\n<td>c *= a 等价于 c = c * a</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除法赋值运算符</td>\n<td>c /= a 等价于 c = c /a</td>\n</tr>\n<tr>\n<td>//=</td>\n<td>整除赋值运算符</td>\n<td>c //= a 等价于 c = c //a</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>取余赋值运算符</td>\n<td>c %= a 等价于 c = c % a</td>\n</tr>\n<tr>\n<td>**=</td>\n<td>幂赋值运算符</td>\n<td>c *= a 等价于 c = c ** a</td>\n</tr>\n</tbody>\n</table>\n<p>注意：算数运算符的优先级 &gt; 复合赋值运算符的优先级</p>\n<h4 id=\"比较运算符\"><a class=\"anchor\" href=\"#比较运算符\">#</a> 比较运算符</h4>\n<p>应用场景：两个变量大小的比较，其最终返回结果是一个 bool 类型的值，True 或 False</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>==</td>\n<td>判断相等。如果两个操作数的结果相等，则条件结果为真 (True)，否则条件结果为假 (False)</td>\n<td>如 a=3,b=3 则 (a==b) 为 True</td>\n</tr>\n<tr>\n<td>!=</td>\n<td>不等于。如果两个操作数的结果不相等，则条件结果为真 (True)，否则条件结果为假 (False)</td>\n<td>如 a=1,b=3, 则 (a!=b) 为 True</td>\n</tr>\n<tr>\n<td>&gt;</td>\n<td>运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假</td>\n<td>如 a=7,b=3, 则 (a&gt;b) 为 True</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假</td>\n<td>如 a=7,b=3, 则 (a&lt;b) 为 True</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假</td>\n<td>如 a=7,b=3, 则 (a&lt;b) 为 False                                                  如 a=3,b=3 则 (a&gt;=b) 为 True</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假</td>\n<td>如 a=3,b=3 则 (a&lt;=b) 为 True</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h4>\n<p>逻辑运算符：逻辑与、或、非，其最终返回的结果也是一个布尔类型的值，True 或 Flase。另外在实际工作中，逻辑运算符也主要和 if 分支结构相结合。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th></th>\n<th>描述</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>and</td>\n<td>x and y</td>\n<td>如果 x 为 Flase,x and y 返回 Flase，否则它返回 y 的值</td>\n<td>True and Flase, 返回 Flase</td>\n</tr>\n<tr>\n<td>or</td>\n<td>x or y</td>\n<td>如果 x 为 True,x or y 返回 True，否则它返回 y 的值</td>\n<td>True or Flase, 返回 True</td>\n</tr>\n<tr>\n<td>not</td>\n<td>not x</td>\n<td>如果 x 为 True,not x 返回 Flase; 如果 x 为 Flase,not x 返回 True</td>\n<td>not True 返回 Flase；not Flase 返回 True；</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;img src=&quot;<a href=\"https://i.postimg.cc/3NLC1GvL/20250413201901.jpg\">https://i.postimg.cc/3NLC1GvL/20250413201901.jpg</a>&quot; alt=&quot;20250413201901.jpg&quot;  /&gt;</p>\n<h4 id=\"短路运算\"><a class=\"anchor\" href=\"#短路运算\">#</a> 短路运算</h4>\n<p>短路运算的原则：</p>\n<ol>\n<li>表达式 1 and 表达式 2, 如果表达式 1 条件为真，则最终的运算结果由右边的表达式 2 来决定。如果表达式 1 条件为假，则最终结果为假。其右边的表达式 2 不需要在进行运算。</li>\n<li>表达式 1 or 表达式 2, 如果表达式 1 为真，则最终的运算结果由表达式 1 来决定，为真。如果表达式 1 为假，则最终结果由表达式 2 来决定。 如果表达式 2 为真，则最终结果为真，如果表达式 2 为假，则最终结果为假。</li>\n</ol>\n<p>注意：</p>\n<ol>\n<li>Python 把 0、空字符串和 None 看成 False, 其它数值和非空字符串都看成 True</li>\n<li>在 Python 语言中，空格也算一个字符（非空）</li>\n<li>如果逻辑运算符的两边，非纯表达式，则返回结果并不是 bool 布尔类型的值，而是返回决定整个表达式结果的那个值</li>\n</ol>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/0yJ58qcj/20250413205007.jpg\" alt=\"20250413205007.jpg\" /></p>\n<h4 id=\"运算符的优先级\"><a class=\"anchor\" href=\"#运算符的优先级\">#</a> 运算符的优先级</h4>\n<table>\n<thead>\n<tr>\n<th>运算符说明</th>\n<th>Python 运算符</th>\n<th>结合性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>小括号</td>\n<td>()</td>\n<td>无</td>\n</tr>\n<tr>\n<td>索引运算符</td>\n<td>x [i] 或 x [i1:i2 [:i3]]</td>\n<td>左</td>\n</tr>\n<tr>\n<td>属性访问</td>\n<td>x.attribute</td>\n<td>左</td>\n</tr>\n<tr>\n<td>乘方</td>\n<td>**</td>\n<td>右</td>\n</tr>\n<tr>\n<td>按位取反</td>\n<td>~</td>\n<td>右</td>\n</tr>\n<tr>\n<td>符号运算符</td>\n<td>+ （正号）、-（负号）</td>\n<td>右</td>\n</tr>\n<tr>\n<td>乘除</td>\n<td>*、/、//、%</td>\n<td>左</td>\n</tr>\n<tr>\n<td>加减</td>\n<td>+、-</td>\n<td>左</td>\n</tr>\n<tr>\n<td>位移</td>\n<td>&gt;&gt;、&lt;&lt;</td>\n<td>左</td>\n</tr>\n<tr>\n<td>按位与</td>\n<td>&amp;</td>\n<td>右</td>\n</tr>\n<tr>\n<td>按位异或</td>\n<td>^</td>\n<td>左</td>\n</tr>\n<tr>\n<td>按位或</td>\n<td>|</td>\n<td>左</td>\n</tr>\n<tr>\n<td>比较运算符</td>\n<td>==、!=、&gt;、&gt;=、&lt;、&lt;=</td>\n<td>左</td>\n</tr>\n<tr>\n<td>is 运算符</td>\n<td>is、is not</td>\n<td>左</td>\n</tr>\n<tr>\n<td>in 运算符</td>\n<td>in、not in</td>\n<td>左</td>\n</tr>\n<tr>\n<td>逻辑非</td>\n<td>not</td>\n<td>右</td>\n</tr>\n<tr>\n<td>逻辑与</td>\n<td>and</td>\n<td>左</td>\n</tr>\n<tr>\n<td>逻辑或</td>\n<td>or</td>\n<td>左</td>\n</tr>\n<tr>\n<td>逗号运算符</td>\n<td>exp1,exp2</td>\n<td>左</td>\n</tr>\n</tbody>\n</table>\n<p>注意：逻辑运算符优先级顺序为从高到低</p>\n<h2 id=\"1-6-python分支语句\"><a class=\"anchor\" href=\"#1-6-python分支语句\">#</a> 1-6 Python 分支语句</h2>\n<h4 id=\"if语句详解\"><a class=\"anchor\" href=\"#if语句详解\">#</a> if 语句详解</h4>\n<p>基本语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> 条件判断：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    则执行某段代码<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Y0RwmNb0/20250415232558.jpg\" alt=\"20250415232558.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/bJ6TDs18/20250415233244.jpg\" alt=\"20250415233244.jpg\" /></p>\n<p>注意：只要与 if 语句它们有缩进关系的，系统都认为下面的代码就是 if 语句的一部分</p>\n<h4 id=\"ifelse相当于必须要二选一语句详解\"><a class=\"anchor\" href=\"#ifelse相当于必须要二选一语句详解\">#</a> if...else (相当于必须要二选一) 语句详解</h4>\n<p>基本语法：</p>\n<pre><code>if 条件判断:\n   当条件判断为True时，则执行这个语句段\nelse:\n    当条件判断为Flase时，则执行这个语句段\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/MZhFMb3G/20250416205303.jpg\" alt=\"20250416205303.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/sxSK9qHg/20250416205413.jpg\" alt=\"20250416205413.jpg\" /></p>\n<h4 id=\"ifelifelse多重分支语句\"><a class=\"anchor\" href=\"#ifelifelse多重分支语句\">#</a> if...elif...else 多重分支语句</h4>\n<p>if...elif...else 多重判断语句</p>\n<pre><code>if 条件1:\n   条件1成立执行的代码1\n   条件1成立执行的代码2\n   ......\nelif 条件2:\n   条件2成立执行的代码1\n   条件2成立执行的代码2\n   ......\n......\nelse:\n   以上条件都不成立执行的代码\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/qRVDz2GK/20250416222507.jpg\" alt=\"20250416222507.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/wMBXvBnJ/20250416222620.jpg\" alt=\"20250416222620.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Hsy27rV4/20250416222722.jpg\" alt=\"20250416222722.jpg\" /></p>\n<h4 id=\"ifelifelse多重分支语句相关案例\"><a class=\"anchor\" href=\"#ifelifelse多重分支语句相关案例\">#</a> if...elif...else 多重分支语句相关案例</h4>\n<p>bmi 值：身体质量指数</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/25gvmDDj/20250416225135.jpg\" alt=\"20250416225135.jpg\" /></p>\n<h4 id=\"if嵌套结构\"><a class=\"anchor\" href=\"#if嵌套结构\">#</a> if 嵌套结构</h4>\n<p>基本语法：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> 外层条件判断<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token comment\">#如果条件为 True，则执行以下语句段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">if</span> 内层条件判断<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">#如果内层条件为 True，则执行以下语句段</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token comment\">#如果条件为 Flase，则执行以下语句段</span></pre></td></tr></table></figure><p>编写时要尊重一个原则：先编写外层判断，所有语句编写完成后，再编写内层条件判断结构</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/D0RCjrLf/20250418214556.jpg\" alt=\"20250418214556.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/MTnZ1wDk/20250418214820.jpg\" alt=\"20250418214820.jpg\" /></p>\n<h4 id=\"出拳案例\"><a class=\"anchor\" href=\"#出拳案例\">#</a> 出拳案例</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/fy63gKCb/20250418232340.jpg\" alt=\"20250418232340.jpg\" /></p>\n<p>&lt;img src=&quot;<a href=\"https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg\">https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg</a>&quot; alt=&quot;20250418232546.jpg&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/KjdNrtgP/20250418232722.jpg\" alt=\"20250418232722.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/26gcTssL/20250418232837.jpg\" alt=\"20250418232837.jpg\" /></p>\n<p>此时，该代码不是很完整，他不能随机生成电脑的出拳</p>\n<h4 id=\"python中的随机数\"><a class=\"anchor\" href=\"#python中的随机数\">#</a> Python 中的随机数</h4>\n<p>引用函数</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/zD7ZqvYx/20250418234842.jpg\" alt=\"20250418234842.jpg\" /></p>\n<p>仍以出拳为例</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/7LhbndMk/20250418234543.jpg\" alt=\"20250418234543.jpg\" /></p>\n<h4 id=\"三目运算符\"><a class=\"anchor\" href=\"#三目运算符\">#</a> 三目运算符</h4>\n<p>三目运算符也叫三元运算符</p>\n<p>主要作用：就是用于简化 if...else... 语句</p>\n<p>基本语法：</p>\n<pre><code class=\"language-Python\">if 条件判断:\n   #语句段1\nelse:\n   #语句段2\n</code></pre>\n<p>转换为三目运算符:</p>\n<pre><code>语句段1 if 条件判断 else 语句段2\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/TPY1dwkG/20250419001702.jpg\" alt=\"20250419001702.jpg\" /></p>\n<p>可利用三目运算符将以上代码简化</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/0NMg01jD/20250419002138.jpg\" alt=\"20250419002138.jpg\" /></p>\n<h4 id=\"python分支语句练习题\"><a class=\"anchor\" href=\"#python分支语句练习题\">#</a> Python 分支语句练习题</h4>\n<h4 id=\"三角形案例\"><a class=\"anchor\" href=\"#三角形案例\">#</a> 三角形案例</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/gjxh3pL1/20250419193559.jpg\" alt=\"20250419193559.jpg\" /></p>\n<h4 id=\"小组赛案例\"><a class=\"anchor\" href=\"#小组赛案例\">#</a> 小组赛案例</h4>\n<p><a href=\"https://postimg.cc/CRLQM5rR\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/YC1K3m1z/20250419202742.jpg\" alt=\"20250419202742.jpg\" /></a></p>\n<h2 id=\"1-7-while循环\"><a class=\"anchor\" href=\"#1-7-while循环\">#</a> 1-7 while 循环</h2>\n<p>循环中的两大关键词：comtinue 和 break</p>\n<h4 id=\"循环基本结构与循环三步走\"><a class=\"anchor\" href=\"#循环基本结构与循环三步走\">#</a> 循环基本结构与循环三步走</h4>\n<p>循环的作用：让代码高校的重复执行</p>\n<p>循环的分类：在 Python 中，循环结构分为 while 和 for 两种</p>\n<p>while 循环基本语法</p>\n<pre><code>while 条件:\n   条件成立重复执行的代码1\n   条件成立重复执行的代码2\n   ......\n</code></pre>\n<p>while 循环三步走：</p>\n<ol>\n<li>\n<p>定义初始计数器   i = 0</p>\n</li>\n<li>\n<p>编写循环条件 while i &lt;100:  =&gt; 目的：到底这个循环在什么时候结束</p>\n</li>\n<li>\n<p>在循环体内部对计数器进行更新操作（一般是 + 1）</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/zGKMYbX2/20250419230127.jpg\" alt=\"20250419230127.jpg\" /></p>\n</li>\n</ol>\n<h4 id=\"while循环案例\"><a class=\"anchor\" href=\"#while循环案例\">#</a> while 循环案例</h4>\n<h4 id=\"案例1\"><a class=\"anchor\" href=\"#案例1\">#</a> 案例 1</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/1Rr1mrNh/20250420212428.jpg\" alt=\"20250420212428.jpg\" /></p>\n<h4 id=\"案例2\"><a class=\"anchor\" href=\"#案例2\">#</a> 案例 2</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/g0WK28ZQ/20250420213746.jpg\" alt=\"20250420213746.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/4yD9FRvq/20250420214234.jpg\" alt=\"20250420214234.jpg\" /></p>\n<h4 id=\"案例3\"><a class=\"anchor\" href=\"#案例3\">#</a> 案例 3</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/HxJ9Lg2v/20250420215130.jpg\" alt=\"20250420215130.jpg\" /></p>\n<h4 id=\"循环中的两大关键词\"><a class=\"anchor\" href=\"#循环中的两大关键词\">#</a> 循环中的两大关键词</h4>\n<p>break: 终止整个循环，强制结束</p>\n<p>continue: 停止当前程序，继续下一个程序</p>\n<h4 id=\"break\"><a class=\"anchor\" href=\"#break\">#</a> break</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/hGRBsDJT/20250420220818.jpg\" alt=\"20250420220818.jpg\" /></p>\n<h4 id=\"continue\"><a class=\"anchor\" href=\"#continue\">#</a> continue</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/8cXFfJzh/20250420221943.jpg\" alt=\"20250420221943.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/QCztx2fm/20250420222245.jpg\" alt=\"20250420222245.jpg\" /></p>\n<h4 id=\"while中的死循环\"><a class=\"anchor\" href=\"#while中的死循环\">#</a> while 中的死循环</h4>\n<p>概念：在编程中一个靠自身控制无法终止的程序称为 “死循环”</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/qBN6Wwbw/20250420222926.jpg\" alt=\"20250420222926.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/vmjbnrr8/20250420223703.jpg\" alt=\"20250420223703.jpg\" /></p>\n<h4 id=\"while循环案例猜数字\"><a class=\"anchor\" href=\"#while循环案例猜数字\">#</a> while 循环案例：猜数字</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/k5pq814G/20250421221215.jpg\" alt=\"20250421221215.jpg\" /></p>\n<h4 id=\"循环嵌套基本语法与执行流程\"><a class=\"anchor\" href=\"#循环嵌套基本语法与执行流程\">#</a> 循环嵌套基本语法与执行流程</h4>\n<p>while 循环嵌套：就是一个 while 里面嵌套一个 while 的写法，每个 while 和之前的基本语法是相同的</p>\n<p>while 循环嵌套方法：</p>\n<pre><code>第一步：定义外层循环计数器\ni = 0或1\n第二步：编写外层循环条件\nwhile i &lt; 3:\n    第四步：定义内层循环计数器\n    j = 0或1\n    第五步：编写内层循环条件\n    while j &lt; 3:\n        #核心代码\n        第六步：在内层循环体中更新计数器的值\n        j += 1\n    第三步：在外层循环体中更新计数器的值\n    i += 1\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/j5YKZWHY/20250421223007.jpg\" alt=\"20250421223007.jpg\" /></p>\n<p>执行流程：外层循环 1 次，内层循环 n 次</p>\n<p>循环嵌套的总次数 = 外层循环次数 * 内层循环次数</p>\n<h2 id=\"1-8-for循环及案例\"><a class=\"anchor\" href=\"#1-8-for循环及案例\">#</a> 1-8 for 循环及案例</h2>\n<h4 id=\"for循环基本语法及其应用场景\"><a class=\"anchor\" href=\"#for循环基本语法及其应用场景\">#</a> for 循环基本语法及其应用场景</h4>\n<pre><code>for 临时变量 in 序列：\n  重复执行的代码1\n  重复执行的代码2\n  ......\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/X71gF9Wq/20250421224947.jpg\" alt=\"20250421224947.jpg\" /></p>\n<h4 id=\"for与range函数相关案例\"><a class=\"anchor\" href=\"#for与range函数相关案例\">#</a> for 与 range 函数相关案例</h4>\n<p>range () 函数可以理解为一个序列结构</p>\n<p><strong>基本语法：</strong></p>\n<pre><code>range(stop)\nrange(start,stop,[step])\n</code></pre>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>理解</th>\n<th>案例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>start</td>\n<td>计数从 start 开始。默认是从 0 开始</td>\n<td>range (5) 等价于 range (0,5)</td>\n</tr>\n<tr>\n<td>stop</td>\n<td>计数到 stop 结束，但不包括 stop</td>\n<td>range (0,5) 是 [0,1,2,3,4] 没有 5</td>\n</tr>\n<tr>\n<td>step</td>\n<td>步长，默认为 1</td>\n<td>range (0,5) 等价于 range (0,5,1)</td>\n</tr>\n</tbody>\n</table>\n<p>range (5) =&gt; 生成一个序列类型的数据 =&gt; [0,1,2,3,4]</p>\n<p>range (0,5) =&gt; 0 代表开头，5 代表结尾（但不包含 5）</p>\n<p><strong>range 其实很简单，只顾头来尾不管</strong></p>\n<p>range (0,5,1) 0-5 之间的数字，每次 + 1 =&gt; 0 1 2 3 4</p>\n<p>range (0,5,2) 0-5 之间的数字，每次 + 2 =&gt;0 2 4</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Wzt42fsj/20250422213421.jpg\" alt=\"20250422213421.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Pq3xBjkK/20250422213718.jpg\" alt=\"20250422213718.jpg\" /></p>\n<h4 id=\"用户登录案例演示\"><a class=\"anchor\" href=\"#用户登录案例演示\">#</a> 用户登录案例演示</h4>\n<p><strong>break:</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/RFJHdFnw/20250422214805.jpg\" alt=\"20250422214805.jpg\" /></p>\n<p><strong>continue:</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Kv6sDkkD/20250422215243.jpg\" alt=\"20250422215243.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/WzCSS38Z/20250422222651.jpg\" alt=\"20250422222651.jpg\" /></p>\n<h2 id=\"1-9-循环else\"><a class=\"anchor\" href=\"#1-9-循环else\">#</a> 1-9 循环 else</h2>\n<h4 id=\"while循环中的else语句结构\"><a class=\"anchor\" href=\"#while循环中的else语句结构\">#</a> while 循环中的 else 语句结构</h4>\n<p>循环可以和 else 配合使用，else 下方缩进的代码指的是当循环正常结束之后执行的代码</p>\n<p>正常结束：没有遇到 break</p>\n<p>不正常结束：break</p>\n<p><strong>while 循环 else 结构基本语法</strong></p>\n<pre><code>while 条件：\n  条件成立重复执行的代码\nelse:\n  循环正常结束之后执行的代码\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/sgYdQdfm/20250422224325.jpg\" alt=\"20250422224325.jpg\" /></p>\n<p><strong>while...else 遇上 break</strong> (终止)</p>\n<p><a href=\"https://postimg.cc/hJFZvtYT\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/hGvkCJby/20250422224719.jpg\" alt=\"20250422224719.jpg\" /></a></p>\n<p><strong>while...else 遇上 continue</strong> (继续)</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SKHvDgKR/20250422225002.jpg\" alt=\"20250422225002.jpg\" /></p>\n<h4 id=\"for循环中else的结构\"><a class=\"anchor\" href=\"#for循环中else的结构\">#</a> for 循环中 else 的结构</h4>\n<p><strong>基本语法</strong></p>\n<pre><code>for临时变量in序列：\n  重复执行的代码\n  ...\nelse:\n  循环正常结束之后要执行的代码\n</code></pre>\n<p>所谓 else 指的是循环正常结束之后要执行的代码，即如果是 break 终止循环的情况，else 下方缩进的代码将不执行</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/5txR5JZ9/20250425220744.jpg\" alt=\"20250425220744.jpg\" /></p>\n<p><strong>退出循环的两种方式</strong></p>\n<ol>\n<li>\n<p>遇见 break</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/2jwFvvCW/20250425221204.jpg\" alt=\"20250425221204.jpg\" /></p>\n</li>\n<li>\n<p>遇见 continue</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/ncmFgKMj/20250425221548.jpg\" alt=\"20250425221548.jpg\" /></p>\n</li>\n</ol>\n<h4 id=\"综合案例报数字游戏\"><a class=\"anchor\" href=\"#综合案例报数字游戏\">#</a> 综合案例：报数字游戏</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Y97D2HxB/20250425223152.jpg\" alt=\"20250425223152.jpg\" /></p>\n<h2 id=\"1-10-字符串定义切片\"><a class=\"anchor\" href=\"#1-10-字符串定义切片\">#</a> 1-10 字符串定义切片</h2>\n<h4 id=\"字符串定义与输入输出\"><a class=\"anchor\" href=\"#字符串定义与输入输出\">#</a> 字符串定义与输入输出</h4>\n<p><strong>定义：</strong></p>\n<ol>\n<li>一对引号字符串</li>\n<li>三引号字符串（支持换行）</li>\n</ol>\n<p>字符串是 Python 中最常用的数据类型。我们一般所有引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。</p>\n<p><strong>注意：控制台显示结果为 '&lt;class str&gt;', 即数据类型为 str（字符串）</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/PxkrQ2mQ/20250425224841.jpg\" alt=\"20250425224841.jpg\" /></p>\n<p><strong>输入</strong></p>\n<p>在 Python 代码中，我们可以使用 input () 方法来接收用户的输入信息。</p>\n<p><strong>记住：在 Python 中，input () 方法返回的结果是一个字符串类型的数据。</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span>' 请输入您的姓名<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的年龄: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入您的住址: '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> address<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>input () 可以阻断当前正在执行的代码，让系统处于等待状态，直到用户输入完成</li>\n<li>input () 方法接收到的所有数据，返回的数据类型多少字符串</li>\n</ol>\n<p><strong>输出</strong></p>\n<p><strong>普通输出</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>变量名称<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>变量名称<span class=\"token number\">1</span>，变量名称<span class=\"token number\">2</span>，变量名称<span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>格式化输出</strong></p>\n<ol>\n<li>\n<p>百分号 (Python2 和 Python3)</p>\n<pre><code>name = input('请输入您的姓名:'）\nage = int(input('请输入您的年龄: ')\naddress = input(' 请输入您的住址:' )\n\nprint('我的名字是当s，今年%d岁了，家里住在%s...% (name, age, address))\n</code></pre>\n</li>\n<li>\n<p>format 方法 (Python3)</p>\n<pre><code>name = input(' 请输入您的姓名: ')\nage = input(' 请输入您的年龄: ')\naddress = input(' 请输入您的住址: ')\n\nprint('我的名字是&#123;&#125;，今年()岁了，家里住在&#123;&#125;...'.format(name. age, address)\n</code></pre>\n</li>\n<li>\n<p>f 形式 (Python3)</p>\n</li>\n</ol>\n<pre><code>name = input('请输入您的姓名: ')\nage = input(' 请输入您的年龄: ')\neddress input( '请输入您的住址:')\n\nprint(f'我的名字是 &#123;name&#125;，今年&#123;age&#125;岁了， 家里住在&#123;address&#125;...')\n</code></pre>\n<h4 id=\"字符串索引下标与循环遍历\"><a class=\"anchor\" href=\"#字符串索引下标与循环遍历\">#</a> 字符串索引下标与循环遍历</h4>\n<p>在计算机中，Python 中的字符串属于序列结构。所以底层存储占用一段连续的存储空间。</p>\n<p>索引的最大值 = len (字符串) - 1</p>\n<p>例如：7 个字符，则索引下标的最大值为 7 - 1 = 6</p>\n<p><strong>注意：索引下标从 0 开始</strong></p>\n<p>索引下标：就是编号。</p>\n<p>举个例子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token string\">'abcdef'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#a</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#d</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/BQzN5vhC/20250426225357.jpg\" alt=\"20250426225357.jpg\" /></p>\n<p><strong>遍历</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/MG9D9bxg/20250426230306.jpg\" alt=\"20250426230306.jpg\" /></p>\n<h4 id=\"字符串切片\"><a class=\"anchor\" href=\"#字符串切片\">#</a> 字符串切片</h4>\n<p><strong>什么是切片？</strong></p>\n<p>答：切片是指对操作的对象截取其中一部分的操作，字符串、列表、元组都支持切片操作。</p>\n<p><strong>基本语法</strong></p>\n<pre><code>序列[开始位置下标：结束位置下标:步长]\n</code></pre>\n<p><strong>注意：</strong></p>\n<ol>\n<li>不包含结束位置下标对应的位置，正负整数均可</li>\n<li>步长是选取间隔，正负整数均可，默认步长为 1</li>\n</ol>\n<p><strong>口决：</strong></p>\n<p>切片其实很简单，只顾头来尾不顾，</p>\n<p>步长为正，正向移动</p>\n<p>步长为负，则逆向移</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/XvWjsdxK/20250426233008.jpg\" alt=\"20250426233008.jpg\" /></p>\n<h2 id=\"1-11-字符串查找替换合并\"><a class=\"anchor\" href=\"#1-11-字符串查找替换合并\">#</a> 1-11 字符串查找，替换，合并</h2>\n<h4 id=\"字符串的查找方法\"><a class=\"anchor\" href=\"#字符串的查找方法\">#</a> 字符串的查找方法</h4>\n<p>字符串的查找方法结就是查找子串在字符串的位置或出现的次数</p>\n<p><strong>基本语法：</strong></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>字符串<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>要操作的字符或子串<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>编号</th>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>find()</td>\n<td>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回 - 1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>index()</td>\n<td>检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常</td>\n</tr>\n</tbody>\n</table>\n<p><strong>包含</strong></p>\n<p><a href=\"https://postimg.cc/9DPx5qG4\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/x1hBmv8P/20250427184121.jpg\" alt=\"20250427184121.jpg\" /></a></p>\n<p><strong>不包含</strong></p>\n<p><a href=\"https://postimg.cc/sBN7tV0Q\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/W328qzGn/20250427184402.jpg\" alt=\"20250427184402.jpg\" /></a></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/QMkPYrhM/20250428001834.jpg\" alt=\"20250428001834.jpg\" /></p>\n<h4 id=\"字符串查找案例\"><a class=\"anchor\" href=\"#字符串查找案例\">#</a> 字符串查找案例</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/B6xZJBRv/20250428003106.jpg\" alt=\"20250428003106.jpg\" /></p>\n<h4 id=\"字符串修改方法\"><a class=\"anchor\" href=\"#字符串修改方法\">#</a> 字符串修改方法</h4>\n<p>所谓字符串修改，指的就是通过函数的形式修改字符串中的数据</p>\n<p><strong>字符串修改</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">replace()</td>\n<td style=\"text-align:center\">返回替换后的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">split()</td>\n<td style=\"text-align:center\">返回切割后的列表序列</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">join()</td>\n<td style=\"text-align:center\">用一个字符或子串合并一个字符串，即是将多个字符串合并成一个新的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">upper () 和 lower ()</td>\n<td style=\"text-align:center\">返回全部大写或小写的字符串</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<h4 id=\"replace方法\"><a class=\"anchor\" href=\"#replace方法\">#</a> replace () 方法</h4>\n<p><strong>基本语法</strong></p>\n<pre><code>字符串.replace(要替换的内容，替换后的内容，替换的次数-可以省略)\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/KjZF2JbN/20250428193250.jpg\" alt=\"20250428193250.jpg\" /></p>\n<p>目前在工作中，replace 主要用于实现关键字替换或过滤功能</p>\n<p><strong>全部替换</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/TP7jqTqx/20250428230325.jpg\" alt=\"20250428230325.jpg\" /></p>\n<p><strong>部分替换</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/k5bMwcW5/20250428230612.jpg\" alt=\"20250428230612.jpg\" /></p>\n</li>\n<li>\n<h4 id=\"split\"><a class=\"anchor\" href=\"#split\">#</a> split()</h4>\n<p>作用：对字符串进行切割操作，返回一个 list () 列表的数据</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/8zPjd9pB/20250428234718.jpg\" alt=\"20250428234718.jpg\" /></p>\n</li>\n<li>\n<h4 id=\"join\"><a class=\"anchor\" href=\"#join\">#</a> join()</h4>\n<p>作用：和 split () 方法正好相反其主要功能是把序列拼接为字符串</p>\n<pre><code>字符串.join(数据序列)\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/rwSQWdpt/20250428235853.jpg\" alt=\"20250428235853.jpg\" /></p>\n<h4 id=\"upper和lower\"><a class=\"anchor\" href=\"#upper和lower\">#</a> upper () 和 lower ()</h4>\n</li>\n</ol>\n<p>upper ()：把字符串全部转换成大写</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SQBPMbG3/20250429000402.jpg\" alt=\"20250429000402.jpg\" /></p>\n<p>lower ()：把字符串全部转换成小写</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/kg3dqtZV/20250429001612.jpg\" alt=\"20250429001612.jpg\" /></p>\n<h4 id=\"字符串的判断语句\"><a class=\"anchor\" href=\"#字符串的判断语句\">#</a> 字符串的判断语句</h4>\n<p>字符串判断：所谓判断既是判断真假，返回的结果是布尔型数据类型（True 或 Flase）</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">startswith()</td>\n<td style=\"text-align:center\">检查字符串是否以指定子串开头，是则返回 True, 否则返回 Flase, 如果设置开始和结束位置下标，则在指定范围内检查</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">endswith()</td>\n<td style=\"text-align:center\">检查字符串是否以指定子串结尾，是则返回 True, 否则返回 Flase, 如果设置开始和结束位置下标，则在指定范围内检查</td>\n</tr>\n</tbody>\n</table>\n<p><strong>基本语法</strong></p>\n<pre><code>mystr1 = 'Python program'\nprint(mystr1.startswith('Python'))\n\nprint('-' * 10)\n\nmystr2 = 'aver.png'\nprint(mystr2.endswith('.png'))\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/1z6jfD4R/20250429223727.jpg\" alt=\"20250429223727.jpg\" /></p>\n<h2 id=\"1-12-列表定义及使用\"><a class=\"anchor\" href=\"#1-12-列表定义及使用\">#</a> 1-12 列表定义及使用</h2>\n<h4 id=\"列表的定义与元素访问\"><a class=\"anchor\" href=\"#列表的定义与元素访问\">#</a> 列表的定义与元素访问</h4>\n<p><strong>基本语法</strong></p>\n<pre><code>列表名称 = [数据1，数据2，数据3，数据4...]\n</code></pre>\n<p>注意：列表可以一次存储多个数据且可以是不同的数据类型</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SQL5X41p/20250429233747.jpg\" alt=\"20250429233747.jpg\" /></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/NfLd6C1d/20250429235739.jpg\" alt=\"20250429235739.jpg\" /></p>\n<h4 id=\"列表的查询操作\"><a class=\"anchor\" href=\"#列表的查询操作\">#</a> 列表的查询操作</h4>\n<p>** 常用操作：** 列表的作用是一次性存储多个数据，可以对数据进行的操作有”<strong> 增、删、改、查</strong> “</p>\n<p>列表的底层存储形式和字符串都是一样的，其也是通过索引下标来对权威进行引用的</p>\n<p><strong>查操作的相关方法：</strong></p>\n<table>\n<thead>\n<tr>\n<th>编号</th>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>index()</td>\n<td>指定数据所在位置的下标</td>\n</tr>\n<tr>\n<td>2</td>\n<td>count()</td>\n<td>添加指定数据在当前列表中出现的次数</td>\n</tr>\n<tr>\n<td>3</td>\n<td>in</td>\n<td>判断指定数据在某个列表序列，如果在返回 True, 否则返回 Flase</td>\n</tr>\n<tr>\n<td>4</td>\n<td>not in</td>\n<td>判断指定数据不在某个列表序列，如果不在返回 True, 否则返回 Flase</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"index方法\"><a class=\"anchor\" href=\"#index方法\">#</a> <strong>index () 方法：</strong></h4>\n<pre><code>列表序列.index(数据，开始位置下标，结束位置下标)\n</code></pre>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/pVqf2GG7/20250504202220.jpg\" alt=\"20250504202220.jpg\" /></p>\n<h4 id=\"count方法\"><a class=\"anchor\" href=\"#count方法\">#</a> count () 方法：</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/6Qb8kg5L/20250504202820.jpg\" alt=\"20250504202820.jpg\" /></p>\n<h4 id=\"in和not-in-方法\"><a class=\"anchor\" href=\"#in和not-in-方法\">#</a> in 和 not in 方法：</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/cH1cmVkR/20250504203526.jpg\" alt=\"20250504203526.jpg\" /></p>\n<h4 id=\"列表的增加方法\"><a class=\"anchor\" href=\"#列表的增加方法\">#</a> 列表的增加方法</h4>\n<p><strong>增加</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">append()</td>\n<td style=\"text-align:center\">增加指定数据到列表中</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">extend()</td>\n<td style=\"text-align:center\">列表结尾增加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">insert()</td>\n<td style=\"text-align:center\">指定位置新增数据</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"append\"><a class=\"anchor\" href=\"#append\">#</a> <strong>append()：</strong></h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/GtfnP0rt/20250504204528.jpg\" alt=\"20250504204528.jpg\" /></p>\n<p>注意：列表增加数据的时候，直接在原列表里面增加了指定数据，即修改了原列表，故列表为可变类型数据</p>\n<h4 id=\"extend\"><a class=\"anchor\" href=\"#extend\">#</a> extend()：</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/yxLcvPrk/20250504205320.jpg\" alt=\"20250504205320.jpg\" /></p>\n<p>总结：extend 方法比较适合于两个列表进行合并的操作</p>\n<h4 id=\"insert\"><a class=\"anchor\" href=\"#insert\">#</a> insert()：</h4>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/K8B4YfrB/20250504205903.jpg\" alt=\"20250504205903.jpg\" /></p>\n<h4 id=\"列表的删除操作\"><a class=\"anchor\" href=\"#列表的删除操作\">#</a> 列表的删除操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">del 列表 [索引]</td>\n<td style=\"text-align:center\">删除列表的某个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">pop()</td>\n<td style=\"text-align:center\">删除指定下标的数据（默认为最后一个），并返回该数据</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">remove()</td>\n<td style=\"text-align:center\">移除列表中某个数据的第一个匹配项</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">clear()</td>\n<td style=\"text-align:center\">清空列表，删除列表中的所有元素，返回空列表</td>\n</tr>\n</tbody>\n</table>\n<p><strong>1.del 列表 [索引]：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/rsz4RxcB/20250507224554.jpg\" alt=\"20250507224554.jpg\" /></p>\n<p><strong>2.pop()：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/4yTdscyv/20250507225707.jpg\" alt=\"20250507225707.jpg\" /></p>\n<p><strong>3.remove()：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/1XzdgC8y/20250507230255.jpg\" alt=\"20250507230255.jpg\" /></p>\n<p><strong>4.clear()：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/G2tPGZxg/20250507230625.jpg\" alt=\"20250507230625.jpg\" /></p>\n<h4 id=\"列表的修改操作\"><a class=\"anchor\" href=\"#列表的修改操作\">#</a> 列表的修改操作</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">列表 [索引]= 修改之后的值</td>\n<td style=\"text-align:center\">修改列表中的某个元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">revese()</td>\n<td style=\"text-align:center\">将数据序列进行倒序排序</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">sort()</td>\n<td style=\"text-align:center\">将列表序列进行排序</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p><strong>列表 [索引]= 修改之后的值：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/yYxdB7Yb/20250507231522.jpg\" alt=\"20250507231522.jpg\" /></p>\n</li>\n<li>\n<p><strong>revese()：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/jjtYxh4S/20250507232059.jpg\" alt=\"20250507232059.jpg\" /></p>\n<p>也可用切片的方法：</p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/ZY2kBmxg/20250507232303.jpg\" alt=\"20250507232303.jpg\" /></p>\n</li>\n<li>\n<p><strong>sort()：</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/hjmYVzr5/20250507232812.jpg\" alt=\"20250507232812.jpg\" /></p>\n</li>\n</ol>\n<h4 id=\"使用循环遍历列表\"><a class=\"anchor\" href=\"#使用循环遍历列表\">#</a> 使用循环遍历列表</h4>\n<p><strong>使用 while 对列表进行遍历输出</strong></p>\n<p><img loading=\"lazy\" data-src=\"https://i.postimg.cc/W40g1BnK/20250512174004.jpg\" alt=\"20250512174004.jpg\" /></p>\n<p><strong>使用 for 对列表进行遍历输出</strong></p>\n<p><a href=\"https://postimg.cc/hQ9mFQs9\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/d3fjy8TS/20250512174702.jpg\" alt=\"20250512174702.jpg\" /></a></p>\n<h4 id=\"列表嵌套\"><a class=\"anchor\" href=\"#列表嵌套\">#</a> 列表嵌套</h4>\n<p>所谓列表嵌套指的就是一个列表包含了其他的子列表</p>\n<p><a href=\"https://postimg.cc/Sjg0b1Xt\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/PrjdZBdh/20250512180559.jpg\" alt=\"20250512180559.jpg\" /></a></p>\n<h2 id=\"1-13-元祖定义及使用\"><a class=\"anchor\" href=\"#1-13-元祖定义及使用\">#</a> 1-13 元祖定义及使用</h2>\n<h4 id=\"元组的定义与访问\"><a class=\"anchor\" href=\"#元组的定义与访问\">#</a> 元组的定义与访问</h4>\n<p>元组和列表一样，也可以存储多个数据</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">列表</td>\n<td style=\"text-align:center\">可以一次性存储多个数据，但是列表中的数据允许更改</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">元组</td>\n<td style=\"text-align:center\">元组可以存储多个数据且元组内的数据是不能修改的</td>\n</tr>\n</tbody>\n</table>\n<p>元组类型应该为：<strong>tuple</strong></p>\n<p><strong>定义元组</strong></p>\n<p>** 元组特点：** 定义元组使用小括号，且使用逗号隔开各个数据，数据可以是不同的数据类型</p>\n<pre><code>#多个数据元组\nt1 = (10,20,30)\n\n#单个数据元组\nt2 = (10,)\n</code></pre>\n<p><strong>注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型</strong></p>\n<p><a href=\"https://postimg.cc/k2t0qCzX\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/g2MmykKR/20250512190322.jpg\" alt=\"20250512190322.jpg\" /></a></p>\n<p><strong>元组的相关操作</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">元组 [索引]</td>\n<td style=\"text-align:center\">根据索引下标查找元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">index()</td>\n<td style=\"text-align:center\">查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的 index 方法相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">count()</td>\n<td style=\"text-align:center\">统计某个数据在当前元组出现的次数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">len()</td>\n<td style=\"text-align:center\">统计元组中数据的个数</td>\n</tr>\n</tbody>\n</table>\n<ol>\n<li>\n<p><strong>元组 [索引]：</strong></p>\n<p><a href=\"https://postimg.cc/DW7RsMBq\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/5tz1cczk/20250512192715.jpg\" alt=\"20250512192715.jpg\" /></a></p>\n</li>\n<li>\n<p><strong>index()</strong></p>\n<p>存在：</p>\n<p><a href=\"https://postimg.cc/wRYXySkz\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/5y6nGJYX/20250512193308.jpg\" alt=\"20250512193308.jpg\" /></a></p>\n<p>不存在：</p>\n<p><a href=\"https://postimg.cc/3yymLKS7\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/k5ssgGWV/20250512193414.jpg\" alt=\"20250512193414.jpg\" /></a></p>\n</li>\n<li>\n<p><strong>count()</strong></p>\n<p><a href=\"https://postimg.cc/mhdMGzvR\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/hPn0TVMJ/20250512193721.jpg\" alt=\"20250512193721.jpg\" /></a></p>\n</li>\n<li>\n<p><strong>len()</strong></p>\n<p><a href=\"https://postimg.cc/XrKY4trF\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/7ZdGMkDB/20250512194019.jpg\" alt=\"20250512194019.jpg\" /></a></p>\n</li>\n</ol>\n<p><strong>元组内的数据如果直接修改则立即报错，但是如果元组里面有列表，修改列表里面的数据则是支持的，故这个特点非常重要</strong></p>\n<p>修改报错：</p>\n<p><a href=\"https://postimg.cc/PpwxG0Hg\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/NMNrXwzj/20250512192045.jpg\" alt=\"20250512192045.jpg\" /></a></p>\n<h2 id=\"1-14-字典定义及使用\"><a class=\"anchor\" href=\"#1-14-字典定义及使用\">#</a> 1-14 字典定义及使用</h2>\n<h4 id=\"字典的定义及访问过程\"><a class=\"anchor\" href=\"#字典的定义及访问过程\">#</a> 字典的定义及访问过程</h4>\n<p><strong>字典类型：dict</strong></p>\n<p>** 思考：** 数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据变化前后能使用同一的标准查找数据呢？</p>\n<p><strong>答：<strong>字典，字典里面的数据是以</strong>键值对</strong>形式出现，字典顺序和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应键的名字查找数据即可。</p>\n<p>字典特点：</p>\n<ol>\n<li>符号为<strong>大括号（花括号）</strong></li>\n<li>数据为<strong>键值对</strong>形式出现</li>\n<li>每个键值对用<strong>逗号</strong>隔开</li>\n</ol>\n<p><strong>key:value 键值对</strong>    key 可以是字符类型也可以是数值类型</p>\n<p>在 Python 代码中，字典中的 key 必须使用引号引起来</p>\n<pre><code># 有数据字典\ndict1 = &#123;'name':'Tom', 'age':20, 'gender':'male'&#125;\n\n# 空字典\ndict2 = &#123;&#125;\n\ndict3 = dict()\n</code></pre>\n<p>注意：一般称冒号前面的为键（key）, 简称 k; 冒号后面的为值（value）, 简称 v</p>\n<p><a href=\"https://postimg.cc/QHW9cbs1\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/DyxrkjMj/20250514233120.jpg\" alt=\"20250514233120.jpg\" /></a></p>\n<p><strong>字典的 “增” 操作</strong></p>\n<p><strong>基本语法：</strong></p>\n<pre><code>字典序列[key] = value\n</code></pre>\n<p>** 注意：** 如果 key 存在则修改这个 key 对应的值：如果 key 不存在则新增此键值对</p>\n<p><strong>字典为可变类型</strong></p>\n<p><a href=\"https://postimg.cc/sBT7bXVq\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/wvp2yynq/20250519234409.jpg\" alt=\"20250519234409.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/jWk02HxX\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/C1wFv79W/20250520000846.jpg\" alt=\"20250520000846.jpg\" /></a></p>\n<h4 id=\"字典的新增操作\"><a class=\"anchor\" href=\"#字典的新增操作\">#</a> 字典的新增操作</h4>\n<p><strong>基本语法：</strong></p>\n<pre><code>字典名称[key] = value\n注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对\n</code></pre>\n<p><strong>注意：列表、字典为可变类型</strong></p>\n<p><a href=\"https://postimg.cc/qtd9kkby\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/mrcRyk7X/20250521231114.jpg\" alt=\"20250521231114.jpg\" /></a></p>\n<h4 id=\"字典的删除操作\"><a class=\"anchor\" href=\"#字典的删除操作\">#</a> 字典的删除操作</h4>\n<p><strong>删除操作：</strong></p>\n<ol>\n<li>del 字典名称 [key]: 删除指定元素</li>\n<li>clear () 方法：清空字典中的所有 key</li>\n</ol>\n<p><a href=\"https://postimg.cc/c6cJ3xcg\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/nVy96Mjk/20250521232021.jpg\" alt=\"20250521232021.jpg\" /></a></p>\n<h4 id=\"字典的修改操作\"><a class=\"anchor\" href=\"#字典的修改操作\">#</a> 字典的修改操作</h4>\n<p><strong>基本语法：</strong></p>\n<pre><code>字典名称[key] = value\n注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对\n</code></pre>\n<p><a href=\"https://postimg.cc/F70RrBb9\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/xT4bRrcb/20250522223218.jpg\" alt=\"20250522223218.jpg\" /></a></p>\n<h4 id=\"字典的查询方式\"><a class=\"anchor\" href=\"#字典的查询方式\">#</a> 字典的查询方式</h4>\n<p><strong>字典的查操作：</strong></p>\n<ol>\n<li>\n<p>查询方法：使用具体的某个 key 查询数据，如果未找到，则直接报错</p>\n<pre><code>字典数列[key]\n</code></pre>\n</li>\n<li>\n<p>字典的相关查询方法</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">编号</th>\n<th style=\"text-align:center\">函数</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">get (key, 默认值)</td>\n<td style=\"text-align:center\">根据字典的 key 获取对应的 value 值，如果当查找的 key 不存在则返回第二个参数（默认值），如果省略第二个参数，则返回 None</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">keys()</td>\n<td style=\"text-align:center\">以列表返回一个字典所有的键</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">values()</td>\n<td style=\"text-align:center\">以列表返回字典中的所有值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">items()</td>\n<td style=\"text-align:center\">以列表返回可遍历的（键，值）元组数组</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://postimg.cc/SJLg6mLH\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/pX43tTmV/20250522225229.jpg\" alt=\"20250522225229.jpg\" /></a></p>\n</li>\n</ol>\n<p><a href=\"https://postimg.cc/XZXM1rQr\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/nLGHz7mG/20250522225321.jpg\" alt=\"20250522225321.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/yJq95gzL\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/7LhV50tr/20250522231007.jpg\" alt=\"20250522231007.jpg\" /></a></p>\n<h2 id=\"1-15-案例-学生管理系统\"><a class=\"anchor\" href=\"#1-15-案例-学生管理系统\">#</a> 1-15 案例 - 学生管理系统</h2>\n<h4 id=\"学生管理系统菜单功能开发\"><a class=\"anchor\" href=\"#学生管理系统菜单功能开发\">#</a> 学生管理系统菜单功能开发</h4>\n<p>** 需求：** 开一个通讯录的管理系统，主要用于实现存储班级中学生的信息（姓名、年龄、电话）</p>\n<p>** 知识点：** 列表、字典、死循环</p>\n<p>** 延伸：** 在 Python 中，我们可以使用字典来保存一个人的基本信息。但是如果想保存多个人的信息，我们必须把列表和字典结合起来</p>\n<p>问：为什么需要死循环？</p>\n<p>答：当我们选中某个菜单时，功能一旦执行完毕，则整个程序就执行结束了。为了保存程序可以一直运行下去，可以模拟死循环的效果，让程序一直运行下去</p>\n<p><a href=\"https://postimg.cc/svnQSwfd\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/dVF8bxz1/20250523132536.jpg\" alt=\"20250523132536.jpg\" /></a></p>\n<h4 id=\"学生管理系统多分支判断\"><a class=\"anchor\" href=\"#学生管理系统多分支判断\">#</a> 学生管理系统多分支判断</h4>\n<p><a href=\"https://postimg.cc/H8jxt8tW\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/5ySCbwYz/20250523222412.jpg\" alt=\"20250523222412.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/bZw69z7C\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/MpyhxHdS/20250523222424.jpg\" alt=\"20250523222424.jpg\" /></a></p>\n<h4 id=\"学生管理系统学生添加与查询功能实现\"><a class=\"anchor\" href=\"#学生管理系统学生添加与查询功能实现\">#</a> 学生管理系统学生添加与查询功能实现</h4>\n<p><a href=\"https://postimg.cc/qNdpkzG7\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/9QD0Y9Ry/20250527211018.jpg\" alt=\"20250527211018.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/tnhmDCnr\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/fyFnzVzh/20250527211232.jpg\" alt=\"20250527211232.jpg\" /></a></p>\n<h4 id=\"学生管理系统删除功能\"><a class=\"anchor\" href=\"#学生管理系统删除功能\">#</a> 学生管理系统删除功能</h4>\n<p><a href=\"https://postimg.cc/gxt0DYWq\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Zq4yJRsg/20250527213921.jpg\" alt=\"20250527213921.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/hJrfNNNp\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/HxGX8gzD/20250527214013.jpg\" alt=\"20250527214013.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/GHQJxjvD\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/7ZvsDs6K/20250527235341.jpg\" alt=\"20250527235341.jpg\" /></a></p>\n<p><a href=\"https://postimg.cc/2V29SYcg\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/YCw58q12/20250527235500.jpg\" alt=\"20250527235500.jpg\" /></a></p>\n<h2 id=\"1-16-集合定义及使用\"><a class=\"anchor\" href=\"#1-16-集合定义及使用\">#</a> 1-16 集合定义及使用</h2>\n<h4 id=\"集合的定义\"><a class=\"anchor\" href=\"#集合的定义\">#</a> 集合的定义</h4>\n<p><strong>集合是一个天生去重的数据序列</strong></p>\n<p>集合的定义：</p>\n<p>集合（set）是一个无序的不重复元素序列</p>\n<p>** 注意：** 集合里面的元素是不重复的并且集合内的元素还是无序的</p>\n<p>即，集合可以想元组一样，设置不可改变的类型。也可以默认想字典，列表一样，可以迭代改变。同时<strong>集合里的元素可以是列表，元组，字典</strong></p>\n<p><strong>基本语法：</strong></p>\n<p>创建集合使用‘{}’或‘set ()’，但如果要创建空集合只能使用‘set ()’，因为‘{}’用来创建空字典</p>\n<p><a href=\"https://postimg.cc/56WXxHG7\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/gkn8H8KW/20250528234056.jpg\" alt=\"20250528234056.jpg\" /></a></p>\n<h4 id=\"集合中的新增操作\"><a class=\"anchor\" href=\"#集合中的新增操作\">#</a> 集合中的新增操作</h4>\n<p><strong>集合的增操作：</strong></p>\n<ol>\n<li>\n<p>add () 方法：向集合中增加一个元素（单一）</p>\n<p><a href=\"https://postimg.cc/F7GG3Qj4\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/bwfMXyrs/20250528234842.jpg\" alt=\"20250528234842.jpg\" /></a></p>\n</li>\n<li>\n<p>update () 方法：向集合在增加序列类型的数据（字符串、列表、元组、字典）</p>\n<p><a href=\"https://postimg.cc/Fd8wtkrN\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/prLvFK3h/20250528235518.jpg\" alt=\"20250528235518.jpg\" /></a></p>\n</li>\n</ol>\n<h4 id=\"集合中的删除方法\"><a class=\"anchor\" href=\"#集合中的删除方法\">#</a> 集合中的删除方法</h4>\n<ol>\n<li>\n<p>remove () 方法：删除集合中的指定数据，如果数据不存在则报错</p>\n<p><strong>存在：</strong></p>\n<p><a href=\"https://postimg.cc/Ny1sF9fS\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SKPJZc0S/20250610182217.jpg\" alt=\"20250610182217.jpg\" /></a></p>\n<p><strong>不存在：</strong></p>\n<p><a href=\"https://postimg.cc/9rK1FzkG\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/t4Cckxtm/20250610182403.jpg\" alt=\"20250610182403.jpg\" /></a></p>\n</li>\n<li>\n<p>discard () 方法：删除集合中的指定数据，如果数据不存在也不会报错</p>\n<p><strong>存在：</strong></p>\n<p><a href=\"https://postimg.cc/zy19xdkb\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/cLK042gm/20250610182758.jpg\" alt=\"20250610182758.jpg\" /></a></p>\n<p><strong>不存在：</strong></p>\n<p><a href=\"https://postimg.cc/ZBgQpjRq\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/fyTh4rQY/20250610182856.jpg\" alt=\"20250610182856.jpg\" /></a></p>\n</li>\n<li>\n<p>pop () 方法：随机删除集合中的某个数据，并返回这个数据</p>\n<p>执行原理：系统自动对集合中的数据进行排序（排序方法是混乱的，无规律的），排序后，pop () 方法自动删除第一个元素</p>\n<p><a href=\"https://postimg.cc/KKsbpPz6\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/SsmKsVpx/20250610183301.jpg\" alt=\"20250610183301.jpg\" /></a></p>\n</li>\n</ol>\n<h4 id=\"集合中的查询方法\"><a class=\"anchor\" href=\"#集合中的查询方法\">#</a> 集合中的查询方法</h4>\n<ol>\n<li>\n<p>in：判断某个元素是否在集合中，如果在，则返回 True，否则返回 Flase</p>\n<p><a href=\"https://postimg.cc/ZvL4c1yc\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/Y050p7rJ/20250610184653.jpg\" alt=\"20250610184653.jpg\" /></a></p>\n</li>\n<li>\n<p>not in : 判断某个元素不在集合中，如果不在，则返回 True，否则返回 Flase</p>\n</li>\n<li>\n<p>集合的遍历操作</p>\n<p><a href=\"https://postimg.cc/Bjz1Wwmp\"><img loading=\"lazy\" data-src=\"https://i.postimg.cc/ZqbPdG3G/20250610185108.jpg\" alt=\"20250610185108.jpg\" /></a></p>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://151064.xyz/%E6%B5%8B%E8%AF%95.html",
            "url": "https://151064.xyz/%E6%B5%8B%E8%AF%95.html",
            "title": "测试",
            "date_published": "2025-04-13T05:00:05.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"55d2051a416bb86df9fa408b2d4f38bd1dc872796dffadf492dfa20548c9bdd9\">05759d172b0e2e5e4729f5f8c86587260886a291cfe7a32c007939594de7e2a3859ad6224112d5d66e2f0536a1e40fd6f47e757bee0619f55a70b8007f4bfb12</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "测试"
            ]
        },
        {
            "id": "https://151064.xyz/hello-world.html",
            "url": "https://151064.xyz/hello-world.html",
            "title": "Hello World",
            "date_published": "2025-04-05T13:52:49.900Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"cb1d86323eb5b0de32d5291c956bbfe5b2808d03d69acf901c5640f5e17e7db7\">05759d172b0e2e5e4729f5f8c8658726e13b0b45b93bf3338840eb7e43263f5abce7b0c4bf962e48293ba65763ae4bbbf92e6cea95e75e99cc26e3df5f88c65ec49ef70eb2e87c95730ef54b46e6977f6998128f90c8426e2e1a263699bacf9dcd999dac765857b536e64e779c6063c724e2a14f8b00ae238954825ee0cb6fc54f065b1b485fd0de6fd25b2cc919eacc0111a7162b3b18a4f8590db07d5bef4445ef72ec327b73a364ebdedfcbcc9af90bd1e639e921fb0a0bc826008d0ecc1a82185c5ada28c8e3070b478140d8fa40acdbff1d5b4f15657d94e75ef86166404eaa2ca97bac5e622ef25fd5debe191ebb1d8a5261f203e4c838ce463d5e3479c03c5740ac3ad11c19a660013185d968c81e445776b913e2535e4ebd787ecfeabd2975b7a157f72f41cecd1ed0355d06e146e9d1b0071746cb6f5b828b148b28d11cf4313fd03d70a50f4d32db9379006ac289558ad46b2c5070af05182f378a99ef536277907e44cd25ff12913f23c4d8904d982cb6c539490001295650d0797feecab6b1f02c18a755aae91b863e45eec822c6721d4aa23237addfa0f55341a57ce36c7718388b5756f13981c0709d70d0fc1a3d20f6b133885fd8c01a4341bd60534ae8aeec66e23e82ea21054a2e0fed71228812ad07280e9ea429b0316ca863d3901cf6312848336bfcfd0b5107e6f75f3fb573d6b17724810d006845f47d553410c4f9b626024afb7d5b88d1b74c0f72f747a0321ba044c875c39d124536a0965d65dd805560441ac67163cb97a1b8b82980165e8e9e4c72ca4ddbce879a194cce71e22b9c23b03af2d19fed31f31f0560f3e3a939dcde3fb24f69568b5c16f7e7f32fdf65873f893600c3389063339059eea6e935cf85b965801403dd04ec4872262ccd9d27a5574262a05a750edb6e91f0235dd496af200f644b6fca6dd51edecda257a9cc3b5f8cfc6ab058e310489b228f5d51a6a4e88dc7aac4fb5965938f6ab9177edf70c8e143aaf18bb468cd51dbf5eb2ebeb135c5377f11cfac79d3b45ed6cf1b6c4db53d8bd988ab43d2a53bc5618e121d7f8f2c6e4aa600bc3df1808a47ed80cc64d25d97c8d07e3d05015d096e771614909ecf262e3f604437686d513a5ad634de04b11ce12b4318667159b7f37576c82bb53af1fa7ca978bdbc44511675b929eb9be615cc89fc9242520f109ef35d69dde6b447c4a12ad798c03c109b5f8d7221b90fcc9b852285e42770b3784464aefbddd6caabd52848c273efa8f12d74dd4f6d7e0461a01de52984d9f51f0500978508c44208aaba111dfe554e209e90653e0a90110ebc99b410dc20ca14bd4174d3602f223f4e51462f9fb5a41e0a73275d7d0038936468d7fa3206045ee596fc72e984d707b7d6122990846b5dd1f627963dc5300ab5049aaaf57486f96a15af806fe5aeda8c8173f1703b39ea429c16eb474b5b0e02311a2496c6252420046727891f89dceb054063e122dbf104de6eb4f98abe5bd52ed32e8b471be871b5c1274c2c4fbb070e90ddbcdf924ef04133008c20011f0bc64b22c92a4086bfa97761e5bd36378b4e54514ee14321d072bb53e1233b9b221db861b728a948919294e42eeb18f9c8f3e4d8b55d6537b85abaf1d1c1f092e57ba1e151f523d2f13f6eb6c1269e6c160fe8645adf7b63a00bacd3aaa77fd0b523b541d524d89b11c5a73c3be34cc016690b5f1fae0a4ea0fb4672d9e9173d469dd13f37679caf50bde2c29c6b3b79f783038bcbd72a352f818d72c30f8c15208ad40fe5a7fc6801bba9265c560cc408e1b5a4cce4b1173559c17651b501db0273cbad537c5e110a559afe1c84890604e4b3fb8eceb36c33f4c8d37b14dff43f37b8f29b6cffac606e914a964ce582f11c628314d109152fa71239ad18411e84b1b6b8988017d751191fdf0cbc941dae1e37e1cc00d84c0eb3eb890b3b4576dd8c86ebb2bac64d3848bb57ee9e91062107a855f090ef5d50e0056173503324f47fee788df32069320ef602dbfacddb006680fe3b46adb998ef96b34210eba694ca924954373c67b79365d59725307f1e853e1c1b69cc6b2318b53b8fa532366011966f838a1345771826fe9e36c556197fe1088f7da6ad2c71f3d617d7f0a2ee8d8eabb9f5c12469e7c1dee30c698b82560ed86a23756b1e8453e26a02e1b39414e11188d5c966ed7f518ed051058106b608c32df7b3e4e640706440c9f99660e370fe0244f74fe903559fa01d19287e7adae64c56d254407dfbe6df10aad76b76327364ce4562fd01d290a84cbd36b6afa8385f4ba9f71152767fcd6f9efdfea2438c79fd9b7031a781ff65c6ba2449e673e1c4ce1a1343ca3ef5a0723cfc751aab0bc5c0dc034e16beca2b043bcaa3db18c944a94d134ad6fcd735650e4e93b36feebb60afdd2c217ee288edf8cb03ff79b45e0c70e1ada820ded470424b574d6fec2978aa89fc4dfdd23ae76811553ccef96ba33efc5a82ecabed23771b6852d614d5f50d1c923849bd8290d5f0652a83ac26adfde4b3ccc75f628556f3dda6dbe9f199682286a0a194091b85e9d9439ed307d7dcde811d8534f0b99e3e95295c5a4c71f7ccc7baeb66a45f13039c6f2a8464910b4e84dfaf685db2fbd55a2ce8fcc495242f040ad245c45de45ea5afb937405ce02536d9a4a254f16d7e35a8587a4cfc12700c17a28c510bfd867ceb4b4f79321037f93855ee664b966a58f5852880388c227b985a347ff42fa0af49c02051c332c1de5d11d4e3f6b0d43db7</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": []
        }
    ]
}