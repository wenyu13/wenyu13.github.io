<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>🔥 老将不死 💗 薪火相传 🔥</title>
        <subtitle></subtitle>
        <icon>https://151064.xyz/assets/favicon.ico</icon>
        <link>https://151064.xyz</link>
        <author>
          <name>温屿</name>
        </author>
        <description>夏日蝉鸣，梧桐树下</description>
        <language>zh-CN</language>
        <pubDate>Thu, 24 Apr 2025 23:46:37 +0800</pubDate>
        <lastBuildDate>Thu, 24 Apr 2025 23:46:37 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html</guid>
            <title>Python</title>
            <link>https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html</link>
            <pubDate>Thu, 24 Apr 2025 23:46:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;第一章-python基础编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-python基础编程&#34;&gt;#&lt;/a&gt; 第一章 Python 基础编程&lt;/h1&gt;
&lt;h2 id=&#34;1-1-python开发环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-1-python开发环境搭建&#34;&gt;#&lt;/a&gt; 1-1 python 开发环境搭建&lt;/h2&gt;
&lt;h4 id=&#34;了解python学习大纲&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解python学习大纲&#34;&gt;#&lt;/a&gt; 了解 Python (学习大纲)&lt;/h4&gt;
&lt;p&gt;Pyhton: 互联网应用开发&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;（1）输入输出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入：用户输入处理&lt;/li&gt;
&lt;li&gt;输出：数据格式话输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（2）变量：定义与使用&lt;/p&gt;
&lt;p&gt;（3）注释：多行与单行&lt;/p&gt;
&lt;p&gt;（4）Bug 处理：异常处理&lt;/p&gt;
&lt;p&gt;（5）格式化输出：用 format 函数&lt;/p&gt;
&lt;h4 id=&#34;python概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python概述&#34;&gt;#&lt;/a&gt; Python 概述&lt;/h4&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动化运维和测试&lt;/li&gt;
&lt;li&gt;数据清洗和分析&lt;/li&gt;
&lt;li&gt;人工智能和大数据处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python:33 个关键词，7 种基本数据类型&lt;/p&gt;
&lt;h4 id=&#34;计算机资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机资源&#34;&gt;#&lt;/a&gt; 计算机资源&lt;/h4&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件：看得见摸不着&lt;/li&gt;
&lt;li&gt;硬件：看得见且摸得着&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;软硬件交互：桥梁是交互系统&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;计算机资源&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPython&lt;/td&gt;
&lt;td&gt;使用 C 语言开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPython&lt;/td&gt;
&lt;td&gt;基于 CPython，增加交互功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jython&lt;/td&gt;
&lt;td&gt;用 Java 开发，将 Python 代码翻译成 Java 字节码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;python开发利器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python开发利器&#34;&gt;#&lt;/a&gt; Python 开发利器&lt;/h4&gt;
&lt;p&gt;Python 的开发利器：PyCharm&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project 管理&lt;/li&gt;
&lt;li&gt;智能提示&lt;/li&gt;
&lt;li&gt;语法高亮&lt;/li&gt;
&lt;li&gt;代码跳转&lt;/li&gt;
&lt;li&gt;调试代码&lt;/li&gt;
&lt;li&gt;解释代码（解释器）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm创建入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm创建入门&#34;&gt;#&lt;/a&gt; PyCharm 创建入门&lt;/h4&gt;
&lt;p&gt;创建项目【选择新建项目（a new project）】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置路径至 D,E,F 盘 (避免 C 盘重装风险)&lt;/li&gt;
&lt;li&gt;命名项目&lt;/li&gt;
&lt;li&gt;选择环境，避免使用虚拟环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创建 Python 文件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击点击项目文件夹&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;新建 Python 文件&amp;quot;(python file)&lt;/li&gt;
&lt;li&gt;命名 (尽量不用中文)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编写入门程序：使用单引号或双引号包围文本 (字符串)&lt;/p&gt;
&lt;p&gt;运行代码的方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标右键点击代码文件&lt;/li&gt;
&lt;li&gt;选择运行图标&lt;/li&gt;
&lt;li&gt;快捷键 “Ctrl+Shift+F10”&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm常见问题之解析器配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm常见问题之解析器配置&#34;&gt;#&lt;/a&gt; PyCharm 常见问题之解析器配置&lt;/h4&gt;
&lt;p&gt;遇到 Python 文件运行问题时，首先检查解析器配置&lt;/p&gt;
&lt;p&gt;通过 Python 的 &amp;quot;setting&amp;quot; 进行解析器的更换与配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更换解析器流程：找到配置界面：find-setting&lt;/li&gt;
&lt;li&gt;选择 “a new project”（或类似命名的项目）&lt;/li&gt;
&lt;li&gt;进入 settings 查找配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置解析器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择 “interpreter”&lt;/li&gt;
&lt;li&gt;引入所需 Python 版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确认或更改路径:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点小齿轮图标&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;添加&amp;quot;&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;已安装&amp;quot; 的 &amp;quot;Python.exe&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;python开发环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python开发环境搭建&#34;&gt;#&lt;/a&gt; Python 开发环境搭建&lt;/h4&gt;
&lt;h4 id=&#34;pycharm软件本身设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm软件本身设置&#34;&gt;#&lt;/a&gt; PyCharm 软件本身设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;软件主题（即软件外观）&lt;/p&gt;
&lt;p&gt;点击 file，再点击 settings&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/430kzRF9/1743519058605.png&#34; alt=&#34;1743519058605.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择第一个 Behavior, 再选择 Appearance&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SRsQfb6F/1743519220679.png&#34; alt=&#34;1743519220679.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;找到主题，选择界面&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Z5dNFdmc/1743519433836.png&#34; alt=&#34;1743519433836.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 设置字体与字号&lt;/p&gt;
&lt;p&gt;在 settings 中找到一个叫 editor 的选择，在选项中选择 font&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zDPv3GhF/1743519761773.png&#34; alt=&#34;1743519761773.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;size 代表字体的一个大小&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZqHmvwWy/1743519833063.png&#34; alt=&#34;1743519833063.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 关闭项目&lt;/p&gt;
&lt;p&gt;点一下 fail 找到 close project，代表把这个项目关闭掉&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/dQbfvg6t/1743519946790.png&#34; alt=&#34;1743519946790.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-2-python注释与变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-2-python注释与变量&#34;&gt;#&lt;/a&gt; 1-2 Python 注释与变量&lt;/h2&gt;
&lt;h4 id=&#34;pycharm快捷键与编辑习惯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm快捷键与编辑习惯&#34;&gt;#&lt;/a&gt; PyCharm 快捷键与编辑习惯&lt;/h4&gt;
&lt;h4 id=&#34;python注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python注释&#34;&gt;#&lt;/a&gt; Python 注释&lt;/h4&gt;
&lt;p&gt;注释的原因：为了程序的可读性&lt;/p&gt;
&lt;p&gt;在 Python 中有两种注释方式：单行注释和多行注释&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;注释方式&lt;/th&gt;
&lt;th&gt;区别&lt;/th&gt;
&lt;th&gt;基本语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单行注释&lt;/td&gt;
&lt;td&gt;只能注释一行内容&lt;/td&gt;
&lt;td&gt;#注释内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多行注释&lt;/td&gt;
&lt;td&gt;可以注释多行内容，常用于代码块注释情况&lt;/td&gt;
&lt;td&gt;“”“           ”“”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;小技巧：&lt;/p&gt;
&lt;p&gt;可以使用 Ctrl+/ 来对代码或程序进行快速注释&lt;/p&gt;
&lt;h4 id=&#34;pycharm常用快捷键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm常用快捷键&#34;&gt;#&lt;/a&gt; PyCharm 常用快捷键&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常用快捷键&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代码提示&lt;/td&gt;
&lt;td&gt;代码提示：输入关键字的前 2~3 个字符（PyCharm 本身自带了一个代码提供的功能），会自动进行代码提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码保存&lt;/td&gt;
&lt;td&gt;Ctrl+s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;撤销与恢复&lt;/td&gt;
&lt;td&gt;撤销：Ctrl+Z     恢复：Ctrl+Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速注释&lt;/td&gt;
&lt;td&gt;Ctrl+/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码自动格式化&lt;/td&gt;
&lt;td&gt;Ctrl+Alt+L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速复制当前行到下一行&lt;/td&gt;
&lt;td&gt;Ctrl+D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在编写 Python 代码时，一定要注意代码缩进问题，在 Python 语言中，缩进代表上下级关系&lt;/p&gt;
&lt;h4 id=&#34;python变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python变量&#34;&gt;#&lt;/a&gt; Python 变量&lt;/h4&gt;
&lt;p&gt;量：量是程序运行中的最小单元&lt;/p&gt;
&lt;p&gt;变量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量是存储数据的容器&lt;/li&gt;
&lt;li&gt;变量是程序运行中可以变化的量&lt;/li&gt;
&lt;li&gt;变量存储的数据是临时的（永久存储数据：放入数据库中）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;变量的作用：简单来说，就是临时存储&lt;/p&gt;
&lt;h4 id=&#34;变量的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的定义&#34;&gt;#&lt;/a&gt; 变量的定义&lt;/h4&gt;
&lt;p&gt;变量名 = 变量的值（计算机从右往左走）&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- 注意：= 两边都要留个空格！变量名可以自定义，但是要满足‘标识符’的命名规则 --&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;标识符的命名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标识符的命名规则&#34;&gt;#&lt;/a&gt; ‘标识符’的命名规则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;由数字、字母、下划线组成（例：user_name)&lt;/li&gt;
&lt;li&gt;不能数字开头（例：hello5)&lt;/li&gt;
&lt;li&gt;严格区分大小写（a 和 A 是两个完全不同的变量名）&lt;/li&gt;
&lt;li&gt;不能使用内置关键字作为变量名称&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;内置关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置关键字&#34;&gt;#&lt;/a&gt; 内置关键字&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0r1RcHMt/1743685933288.png&#34; alt=&#34;1743685933288.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;命名习惯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名习惯&#34;&gt;#&lt;/a&gt; 命名习惯&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;要做到见名知义&lt;/li&gt;
&lt;li&gt;大驼峰：每个单词首字母都大写&lt;/li&gt;
&lt;li&gt;小驼峰：第二个（含）以后的单词首字母要大写&lt;/li&gt;
&lt;li&gt;下划线&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;变量的定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的定义-2&#34;&gt;#&lt;/a&gt; 变量的定义&lt;/h4&gt;
&lt;p&gt;先定义后使用&lt;/p&gt;
&lt;h2 id=&#34;1-3-python数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-3-python数据类型&#34;&gt;#&lt;/a&gt; 1-3 Python 数据类型&lt;/h2&gt;
&lt;h4 id=&#34;python中的7种数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的7种数据类型&#34;&gt;#&lt;/a&gt; Python 中的 7 种数据类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;int (整形)      float (浮点形，带小数点)&lt;/td&gt;
&lt;td&gt;定义时直接写数字即可，不需要添加任何符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔性&lt;/td&gt;
&lt;td&gt;True (真)      False (假)&lt;/td&gt;
&lt;td&gt;只有两个值，且必须首字母大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;通过一对引号引起来的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;列表&lt;/td&gt;
&lt;td&gt;数据可以发生改变&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;数据一但定义，其值就不能发生改变了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;集合&lt;/td&gt;
&lt;td&gt;自动去重&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dick&lt;/td&gt;
&lt;td&gt;字典&lt;/td&gt;
&lt;td&gt;查询神器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;认识bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识bug&#34;&gt;#&lt;/a&gt; 认识 Bug&lt;/h4&gt;
&lt;p&gt;Bug, 即程序中的错误&lt;/p&gt;
&lt;h4 id=&#34;解决bug三步走编译型错误即语法错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决bug三步走编译型错误即语法错误&#34;&gt;#&lt;/a&gt; 解决 bug 三步走 (编译型错误，即语法错误)&lt;/h4&gt;
&lt;p&gt;&amp;lt;!-- 容易查找 --&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看错误页面&lt;/li&gt;
&lt;li&gt;看错误的行号&lt;/li&gt;
&lt;li&gt;根据具体的错误，具体分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm代码调试运行时错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm代码调试运行时错误&#34;&gt;#&lt;/a&gt; PyCharm 代码调试 (运行时错误)&lt;/h4&gt;
&lt;p&gt;Debug 工具是 PyCharm IDE 中集成的专门用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程，以方便我们快速找出程序的 Bug&lt;/p&gt;
&lt;p&gt;Debug 工具使用二步走:①打断点②Debug 调试&lt;/p&gt;
&lt;p&gt;注意：Debug 还可以用于了解程序的运行流程&lt;/p&gt;
&lt;h4 id=&#34;下断点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下断点&#34;&gt;#&lt;/a&gt; 下断点&lt;/h4&gt;
&lt;p&gt;断点应该放在哪个位置：答: 代码可能出错的代码段的第一行&lt;/p&gt;
&lt;h2 id=&#34;1-4-python格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-4-python格式化输出&#34;&gt;#&lt;/a&gt; 1-4 Python 格式化输出&lt;/h2&gt;
&lt;h4 id=&#34;python中print输出函数详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中print输出函数详解&#34;&gt;#&lt;/a&gt; Python 中 print 输出函数详解&lt;/h4&gt;
&lt;h4 id=&#34;格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化输出&#34;&gt;#&lt;/a&gt; 格式化输出&lt;/h4&gt;
&lt;p&gt;输出：就是程序输出给用户&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jqnrykVK/1743772303495.png&#34; alt=&#34;1743772303495.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SxkFFSnN/1743772309087.png&#34; alt=&#34;1743772309087.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;print () 函数：主要功能用于实现对变量以及字符串类型数据的直接输出&lt;/p&gt;
&lt;p&gt;end 参数，代表当前面的变量或文本信息输出完毕后，追加的内容，默认为 \n，代表换行符&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/kMTttGdL/1743772994621.png&#34; alt=&#34;1743772994621.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/CLtBm25N/1743773009029.png&#34; alt=&#34;1743773009029.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/K8ScKh4d/1743773173194.png&#34; alt=&#34;1743773173194.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RZ7SKpHq/1743773184771.png&#34; alt=&#34;1743773184771.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;转义字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转义字符&#34;&gt;#&lt;/a&gt; \ 转义字符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\ 转义字符&lt;/th&gt;
&lt;th&gt;表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;一个 Tab 键的缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符，实现自动换行（针对终端）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KcC35VR5/1743773346355-1.png&#34; alt=&#34;1743773346355-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5NvYK3zW/1743773352777.png&#34; alt=&#34;1743773352777.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;百分号形式的格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百分号形式的格式化输出&#34;&gt;#&lt;/a&gt; 百分号形式的格式化输出&lt;/h4&gt;
&lt;p&gt;% 格式常见形式如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;格式符号&lt;/th&gt;
&lt;th&gt;转换&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;有符号的十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%u&lt;/td&gt;
&lt;td&gt;无符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;八进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;十六进制整数（小写 ox)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;十六进制整数（大写 OX)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;python中input函数详细讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中input函数详细讲解&#34;&gt;#&lt;/a&gt; Python 中 input 函数详细讲解&lt;/h4&gt;
&lt;h4 id=&#34;input输入方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#input输入方法&#34;&gt;#&lt;/a&gt; input () 输入方法&lt;/h4&gt;
&lt;p&gt;input (&#39; 提示信息 &#39;)&lt;/p&gt;
&lt;p&gt;input () 函数，其只要写入一个参数，代表系统的提示信息&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g23Hyctp/1744292593489.png&#34; alt=&#34;1744292593489.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jq91Z5cn/1744293166855.png&#34; alt=&#34;1744293166855.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;输入的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入的特点&#34;&gt;#&lt;/a&gt; 输入的特点：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;当程序执行到 &#39;input&#39;, 等待用户输入，输入完成之后才能继续向下执行。&lt;/li&gt;
&lt;li&gt;在 Python 中，&#39;linput&#39; 接收用户输入后，一般存储到变量， 方便使用。&lt;/li&gt;
&lt;li&gt;在 Python 中，&#39;input&#39; 会把接收到的任意用户输入的数据都当做字符串处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;input方法注意现象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#input方法注意现象&#34;&gt;#&lt;/a&gt; input 方法注意现象&lt;/h4&gt;
&lt;p&gt;&amp;lt;!-- 注意：所有由 input () 方法获取的数据都是 “字符串” 类型 --&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;1-5-python运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-5-python运算符&#34;&gt;#&lt;/a&gt; 1-5 Python 运算符&lt;/h2&gt;
&lt;h4 id=&#34;使用临时变量实现两个变量值的交换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用临时变量实现两个变量值的交换&#34;&gt;#&lt;/a&gt; 使用临时变量实现两个变量值的交换&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Bby88zrb/1744295368074.png&#34; alt=&#34;1744295368074.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;学习目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习目标&#34;&gt;#&lt;/a&gt; 学习目标&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;掌握常见数据类型转化函数及 其应用&lt;/li&gt;
&lt;li&gt;掌握常见运算符的使用&lt;/li&gt;
&lt;li&gt;了 解条件语句的作用&lt;/li&gt;
&lt;li&gt;掌握 if 结构、 if..else 结构的使用&lt;/li&gt;
&lt;li&gt;掌握 if 嵌套结构&lt;/li&gt;
&lt;li&gt;掌握三目运算符的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;python数据类型的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python数据类型的转换&#34;&gt;#&lt;/a&gt; Python 数据类型的转换&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7Y4bj6xr/1744465841637.png&#34; alt=&#34;1744465841637.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;四种转换方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四种转换方法&#34;&gt;#&lt;/a&gt; 四种转换方法&lt;/h4&gt;
&lt;h4 id=&#34;数据类型转换函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型转换函数&#34;&gt;#&lt;/a&gt; 数据类型转换函数&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int(x[,base])&lt;/td&gt;
&lt;td&gt;将 x 转换为一个整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float(x)&lt;/td&gt;
&lt;td&gt;将 x 转换为一个浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex(real[,imag])&lt;/td&gt;
&lt;td&gt;创建一个复数， real 为实部， imag 为 虚部]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str(x)&lt;/td&gt;
&lt;td&gt;将对象 x 转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repr(x)&lt;/td&gt;
&lt;td&gt;将对象 x 转换为表达式字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eval(x)&lt;/td&gt;
&lt;td&gt;用来计算在字符串中的有效 Python 表达式，并返回一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(s)&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(s)&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chr(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一一个 Unicode 字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ord(x)&lt;/td&gt;
&lt;td&gt;将一个字符转换为它的 ASCII 整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hex(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个十六进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oct(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一一个八进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jdRk8GFd/20250412221021.jpg&#34; alt=&#34;20250412221021.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算符的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的使用&#34;&gt;#&lt;/a&gt; 运算符的使用&lt;/h4&gt;
&lt;h4 id=&#34;运算符分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符分类&#34;&gt;#&lt;/a&gt; 运算符分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;算数运算符&lt;/li&gt;
&lt;li&gt;赋值运算符（=）&lt;/li&gt;
&lt;li&gt;复合赋值运算符&lt;/li&gt;
&lt;li&gt;比较运算符&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加&lt;/td&gt;
&lt;td&gt;1 + 1 输出的结果是 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;减&lt;/td&gt;
&lt;td&gt;1 - 1 输出的结果是 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘&lt;/td&gt;
&lt;td&gt;2 * 2 输出的结果是 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除&lt;/td&gt;
&lt;td&gt;10 / 2 输出的结果是 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;整除&lt;/td&gt;
&lt;td&gt;9 // 2 输出的结果是 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取余（取模）&lt;/td&gt;
&lt;td&gt;9 % 4 输出的结果是 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;幂&lt;/td&gt;
&lt;td&gt;2 ** 4 输出的结果是 16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;（）&lt;/td&gt;
&lt;td&gt;小括号，用来提高运算优先级&lt;/td&gt;
&lt;td&gt;（1 + 2） * 3 输出的结果是 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;混合运算符优先级顺序：（）高于 **&lt;em&gt; 高于&lt;/em&gt; * /// % 高于 + -&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4NmJWfxs/20250412224709.jpg&#34; alt=&#34;20250412224709.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#赋值运算符&#34;&gt;#&lt;/a&gt; 赋值运算符&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qRN9rRhG/20250412225318.jpg&#34; alt=&#34;20250412225318.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;复合赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复合赋值运算符&#34;&gt;#&lt;/a&gt; 复合赋值运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;加法赋值运算符&lt;/td&gt;
&lt;td&gt;c += a 等价于 c = c + a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;减法赋值运算符&lt;/td&gt;
&lt;td&gt;c -= a 等价于 c = c - a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;乘法赋值运算符&lt;/td&gt;
&lt;td&gt;c *= a 等价于 c = c * a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;除法赋值运算符&lt;/td&gt;
&lt;td&gt;c /= a 等价于 c = c /a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td&gt;整除赋值运算符&lt;/td&gt;
&lt;td&gt;c //= a 等价于 c = c //a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;取余赋值运算符&lt;/td&gt;
&lt;td&gt;c %= a 等价于 c = c % a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**=&lt;/td&gt;
&lt;td&gt;幂赋值运算符&lt;/td&gt;
&lt;td&gt;c *= a 等价于 c = c ** a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：算数运算符的优先级 &amp;gt; 复合赋值运算符的优先级&lt;/p&gt;
&lt;h4 id=&#34;比较运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比较运算符&#34;&gt;#&lt;/a&gt; 比较运算符&lt;/h4&gt;
&lt;p&gt;应用场景：两个变量大小的比较，其最终返回结果是一个 bool 类型的值，True 或 False&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;判断相等。如果两个操作数的结果相等，则条件结果为真 (True)，否则条件结果为假 (False)&lt;/td&gt;
&lt;td&gt;如 a=3,b=3 则 (a==b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不等于。如果两个操作数的结果不相等，则条件结果为真 (True)，否则条件结果为假 (False)&lt;/td&gt;
&lt;td&gt;如 a=1,b=3, 则 (a!=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;gt;b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;lt;b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;lt;b) 为 False                                                  如 a=3,b=3 则 (a&amp;gt;=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=3,b=3 则 (a&amp;lt;=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;逻辑运算符：逻辑与、或、非，其最终返回的结果也是一个布尔类型的值，True 或 Flase。另外在实际工作中，逻辑运算符也主要和 if 分支结构相结合。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;x and y&lt;/td&gt;
&lt;td&gt;如果 x 为 Flase,x and y 返回 Flase，否则它返回 y 的值&lt;/td&gt;
&lt;td&gt;True and Flase, 返回 Flase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;x or y&lt;/td&gt;
&lt;td&gt;如果 x 为 True,x or y 返回 True，否则它返回 y 的值&lt;/td&gt;
&lt;td&gt;True or Flase, 返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;not x&lt;/td&gt;
&lt;td&gt;如果 x 为 True,not x 返回 Flase; 如果 x 为 Flase,not x 返回 True&lt;/td&gt;
&lt;td&gt;not True 返回 Flase；not Flase 返回 True；&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;a href=&#34;https://i.postimg.cc/3NLC1GvL/20250413201901.jpg&#34;&gt;https://i.postimg.cc/3NLC1GvL/20250413201901.jpg&lt;/a&gt;&amp;quot; alt=&amp;quot;20250413201901.jpg&amp;quot;  /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;短路运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#短路运算&#34;&gt;#&lt;/a&gt; 短路运算&lt;/h4&gt;
&lt;p&gt;短路运算的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表达式 1 and 表达式 2, 如果表达式 1 条件为真，则最终的运算结果由右边的表达式 2 来决定。如果表达式 1 条件为假，则最终结果为假。其右边的表达式 2 不需要在进行运算。&lt;/li&gt;
&lt;li&gt;表达式 1 or 表达式 2, 如果表达式 1 为真，则最终的运算结果由表达式 1 来决定，为真。如果表达式 1 为假，则最终结果由表达式 2 来决定。 如果表达式 2 为真，则最终结果为真，如果表达式 2 为假，则最终结果为假。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 把 0、空字符串和 None 看成 False, 其它数值和非空字符串都看成 True&lt;/li&gt;
&lt;li&gt;在 Python 语言中，空格也算一个字符（非空）&lt;/li&gt;
&lt;li&gt;如果逻辑运算符的两边，非纯表达式，则返回结果并不是 bool 布尔类型的值，而是返回决定整个表达式结果的那个值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0yJ58qcj/20250413205007.jpg&#34; alt=&#34;20250413205007.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算符的优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的优先级&#34;&gt;#&lt;/a&gt; 运算符的优先级&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符说明&lt;/th&gt;
&lt;th&gt;Python 运算符&lt;/th&gt;
&lt;th&gt;结合性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;小括号&lt;/td&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;索引运算符&lt;/td&gt;
&lt;td&gt;x [i] 或 x [i1:i2 [:i3]]&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性访问&lt;/td&gt;
&lt;td&gt;x.attribute&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乘方&lt;/td&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位取反&lt;/td&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;符号运算符&lt;/td&gt;
&lt;td&gt;+ （正号）、-（负号）&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乘除&lt;/td&gt;
&lt;td&gt;*、/、//、%&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;加减&lt;/td&gt;
&lt;td&gt;+、-&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;位移&lt;/td&gt;
&lt;td&gt;&amp;gt;&amp;gt;、&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;td&gt;==、!=、&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is 运算符&lt;/td&gt;
&lt;td&gt;is、is not&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in 运算符&lt;/td&gt;
&lt;td&gt;in、not in&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑非&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑与&lt;/td&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑或&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号运算符&lt;/td&gt;
&lt;td&gt;exp1,exp2&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：逻辑运算符优先级顺序为从高到低&lt;/p&gt;
&lt;h2 id=&#34;1-6-python分支语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-6-python分支语句&#34;&gt;#&lt;/a&gt; 1-6 Python 分支语句&lt;/h2&gt;
&lt;h4 id=&#34;if语句详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if语句详解&#34;&gt;#&lt;/a&gt; if 语句详解&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 条件判断：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    则执行某段代码&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y0RwmNb0/20250415232558.jpg&#34; alt=&#34;20250415232558.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/bJ6TDs18/20250415233244.jpg&#34; alt=&#34;20250415233244.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意：只要与 if 语句它们有缩进关系的，系统都认为下面的代码就是 if 语句的一部分&lt;/p&gt;
&lt;h4 id=&#34;ifelse相当于必须要二选一语句详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelse相当于必须要二选一语句详解&#34;&gt;#&lt;/a&gt; if...else (相当于必须要二选一) 语句详解&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 条件判断:
   当条件判断为True时，则执行这个语句段
else:
    当条件判断为Flase时，则执行这个语句段
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MZhFMb3G/20250416205303.jpg&#34; alt=&#34;20250416205303.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sxSK9qHg/20250416205413.jpg&#34; alt=&#34;20250416205413.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ifelifelse多重分支语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelifelse多重分支语句&#34;&gt;#&lt;/a&gt; if...elif...else 多重分支语句&lt;/h4&gt;
&lt;p&gt;if...elif...else 多重判断语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 条件1:
   条件1成立执行的代码1
   条件1成立执行的代码2
   ......
elif 条件2:
   条件2成立执行的代码1
   条件2成立执行的代码2
   ......
......
else:
   以上条件都不成立执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qRVDz2GK/20250416222507.jpg&#34; alt=&#34;20250416222507.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wMBXvBnJ/20250416222620.jpg&#34; alt=&#34;20250416222620.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Hsy27rV4/20250416222722.jpg&#34; alt=&#34;20250416222722.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ifelifelse多重分支语句相关案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelifelse多重分支语句相关案例&#34;&gt;#&lt;/a&gt; if...elif...else 多重分支语句相关案例&lt;/h4&gt;
&lt;p&gt;bmi 值：身体质量指数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/25gvmDDj/20250416225135.jpg&#34; alt=&#34;20250416225135.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;if嵌套结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if嵌套结构&#34;&gt;#&lt;/a&gt; if 嵌套结构&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 外层条件判断&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;#如果条件为 True，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 内层条件判断&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;#如果内层条件为 True，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;#如果条件为 Flase，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编写时要尊重一个原则：先编写外层判断，所有语句编写完成后，再编写内层条件判断结构&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/D0RCjrLf/20250418214556.jpg&#34; alt=&#34;20250418214556.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MTnZ1wDk/20250418214820.jpg&#34; alt=&#34;20250418214820.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;出拳案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#出拳案例&#34;&gt;#&lt;/a&gt; 出拳案例&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fy63gKCb/20250418232340.jpg&#34; alt=&#34;20250418232340.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;a href=&#34;https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg&#34;&gt;https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg&lt;/a&gt;&amp;quot; alt=&amp;quot;20250418232546.jpg&amp;quot; style=&amp;quot;zoom:150%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KjdNrtgP/20250418232722.jpg&#34; alt=&#34;20250418232722.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/26gcTssL/20250418232837.jpg&#34; alt=&#34;20250418232837.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时，该代码不是很完整，他不能随机生成电脑的出拳&lt;/p&gt;
&lt;h4 id=&#34;python中的随机数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的随机数&#34;&gt;#&lt;/a&gt; Python 中的随机数&lt;/h4&gt;
&lt;p&gt;引用函数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zD7ZqvYx/20250418234842.jpg&#34; alt=&#34;20250418234842.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;仍以出拳为例&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7LhbndMk/20250418234543.jpg&#34; alt=&#34;20250418234543.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;三目运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三目运算符&#34;&gt;#&lt;/a&gt; 三目运算符&lt;/h4&gt;
&lt;p&gt;三目运算符也叫三元运算符&lt;/p&gt;
&lt;p&gt;主要作用：就是用于简化 if...else... 语句&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;if 条件判断:
   #语句段1
else:
   #语句段2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转换为三目运算符:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语句段1 if 条件判断 else 语句段2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/TPY1dwkG/20250419001702.jpg&#34; alt=&#34;20250419001702.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可利用三目运算符将以上代码简化&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0NMg01jD/20250419002138.jpg&#34; alt=&#34;20250419002138.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;python分支语句练习题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python分支语句练习题&#34;&gt;#&lt;/a&gt; Python 分支语句练习题&lt;/h4&gt;
&lt;h4 id=&#34;三角形案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三角形案例&#34;&gt;#&lt;/a&gt; 三角形案例&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gjxh3pL1/20250419193559.jpg&#34; alt=&#34;20250419193559.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;小组赛案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小组赛案例&#34;&gt;#&lt;/a&gt; 小组赛案例&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CRLQM5rR&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YC1K3m1z/20250419202742.jpg&#34; alt=&#34;20250419202742.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-7-while循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-7-while循环&#34;&gt;#&lt;/a&gt; 1-7 while 循环&lt;/h2&gt;
&lt;p&gt;循环中的两大关键词：comtinue 和 break&lt;/p&gt;
&lt;h4 id=&#34;循环基本结构与循环三步走&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环基本结构与循环三步走&#34;&gt;#&lt;/a&gt; 循环基本结构与循环三步走&lt;/h4&gt;
&lt;p&gt;循环的作用：让代码高校的重复执行&lt;/p&gt;
&lt;p&gt;循环的分类：在 Python 中，循环结构分为 while 和 for 两种&lt;/p&gt;
&lt;p&gt;while 循环基本语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while 条件:
   条件成立重复执行的代码1
   条件成立重复执行的代码2
   ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while 循环三步走：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义初始计数器   i = 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写循环条件 while i &amp;lt;100:  =&amp;gt; 目的：到底这个循环在什么时候结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在循环体内部对计数器进行更新操作（一般是 + 1）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zGKMYbX2/20250419230127.jpg&#34; alt=&#34;20250419230127.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;while循环案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环案例&#34;&gt;#&lt;/a&gt; while 循环案例&lt;/h4&gt;
&lt;h4 id=&#34;案例1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例1&#34;&gt;#&lt;/a&gt; 案例 1&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1Rr1mrNh/20250420212428.jpg&#34; alt=&#34;20250420212428.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;案例2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例2&#34;&gt;#&lt;/a&gt; 案例 2&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g0WK28ZQ/20250420213746.jpg&#34; alt=&#34;20250420213746.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yD9FRvq/20250420214234.jpg&#34; alt=&#34;20250420214234.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;案例3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例3&#34;&gt;#&lt;/a&gt; 案例 3&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HxJ9Lg2v/20250420215130.jpg&#34; alt=&#34;20250420215130.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环中的两大关键词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环中的两大关键词&#34;&gt;#&lt;/a&gt; 循环中的两大关键词&lt;/h4&gt;
&lt;p&gt;break: 终止整个循环，强制结束&lt;/p&gt;
&lt;p&gt;continue: 停止当前程序，继续下一个程序&lt;/p&gt;
&lt;h4 id=&#34;break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#break&#34;&gt;#&lt;/a&gt; break&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGRBsDJT/20250420220818.jpg&#34; alt=&#34;20250420220818.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;continue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#continue&#34;&gt;#&lt;/a&gt; continue&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/8cXFfJzh/20250420221943.jpg&#34; alt=&#34;20250420221943.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/QCztx2fm/20250420222245.jpg&#34; alt=&#34;20250420222245.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;while中的死循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while中的死循环&#34;&gt;#&lt;/a&gt; while 中的死循环&lt;/h4&gt;
&lt;p&gt;概念：在编程中一个靠自身控制无法终止的程序称为 “死循环”&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qBN6Wwbw/20250420222926.jpg&#34; alt=&#34;20250420222926.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vmjbnrr8/20250420223703.jpg&#34; alt=&#34;20250420223703.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;while循环案例猜数字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环案例猜数字&#34;&gt;#&lt;/a&gt; while 循环案例：猜数字&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k5pq814G/20250421221215.jpg&#34; alt=&#34;20250421221215.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环嵌套基本语法与执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环嵌套基本语法与执行流程&#34;&gt;#&lt;/a&gt; 循环嵌套基本语法与执行流程&lt;/h4&gt;
&lt;p&gt;while 循环嵌套：就是一个 while 里面嵌套一个 while 的写法，每个 while 和之前的基本语法是相同的&lt;/p&gt;
&lt;p&gt;while 循环嵌套方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一步：定义外层循环计数器
i = 0或1
第二步：编写外层循环条件
while i &amp;lt; 3:
    第四步：定义内层循环计数器
    j = 0或1
    第五步：编写内层循环条件
    while j &amp;lt; 3:
        #核心代码
        第六步：在内层循环体中更新计数器的值
        j += 1
    第三步：在外层循环体中更新计数器的值
    i += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/j5YKZWHY/20250421223007.jpg&#34; alt=&#34;20250421223007.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行流程：外层循环 1 次，内层循环 n 次&lt;/p&gt;
&lt;p&gt;循环嵌套的总次数 = 外层循环次数 * 内层循环次数&lt;/p&gt;
&lt;h2 id=&#34;1-8-for循环及案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-8-for循环及案例&#34;&gt;#&lt;/a&gt; 1-8 for 循环及案例&lt;/h2&gt;
&lt;h4 id=&#34;for循环基本语法及其应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for循环基本语法及其应用场景&#34;&gt;#&lt;/a&gt; for 循环基本语法及其应用场景&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;for 临时变量 in 序列：
  重复执行的代码1
  重复执行的代码2
  ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/X71gF9Wq/20250421224947.jpg&#34; alt=&#34;20250421224947.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;for与range函数相关案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for与range函数相关案例&#34;&gt;#&lt;/a&gt; for 与 range 函数相关案例&lt;/h4&gt;
&lt;p&gt;range () 函数可以理解为一个序列结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;range(stop)
range(start,stop,[step])
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;理解&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;计数从 start 开始。默认是从 0 开始&lt;/td&gt;
&lt;td&gt;range (5) 等价于 range (0,5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;计数到 stop 结束，但不包括 stop&lt;/td&gt;
&lt;td&gt;range (0,5) 是 [0,1,2,3,4] 没有 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;步长，默认为 1&lt;/td&gt;
&lt;td&gt;range (0,5) 等价于 range (0,5,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;range (5) =&amp;gt; 生成一个序列类型的数据 =&amp;gt; [0,1,2,3,4]&lt;/p&gt;
&lt;p&gt;range (0,5) =&amp;gt; 0 代表开头，5 代表结尾（但不包含 5）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;range 其实很简单，只顾头来尾不管&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;range (0,5,1) 0-5 之间的数字，每次 + 1 =&amp;gt; 0 1 2 3 4&lt;/p&gt;
&lt;p&gt;range (0,5,2) 0-5 之间的数字，每次 + 2 =&amp;gt;0 2 4&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Wzt42fsj/20250422213421.jpg&#34; alt=&#34;20250422213421.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Pq3xBjkK/20250422213718.jpg&#34; alt=&#34;20250422213718.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;用户登录案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户登录案例演示&#34;&gt;#&lt;/a&gt; 用户登录案例演示&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;break:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RFJHdFnw/20250422214805.jpg&#34; alt=&#34;20250422214805.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;continue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Kv6sDkkD/20250422215243.jpg&#34; alt=&#34;20250422215243.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/WzCSS38Z/20250422222651.jpg&#34; alt=&#34;20250422222651.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-9-循环else&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-9-循环else&#34;&gt;#&lt;/a&gt; 1-9 循环 else&lt;/h2&gt;
&lt;h4 id=&#34;while循环中的else语句结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环中的else语句结构&#34;&gt;#&lt;/a&gt; while 循环中的 else 语句结构&lt;/h4&gt;
&lt;p&gt;循环可以和 else 配合使用，else 下方缩进的代码指的是当循环正常结束之后执行的代码&lt;/p&gt;
&lt;p&gt;正常结束：没有遇到 break&lt;/p&gt;
&lt;p&gt;不正常结束：break&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while 循环 else 结构基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while 条件：
  条件成立重复执行的代码
else:
  循环正常结束之后执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sgYdQdfm/20250422224325.jpg&#34; alt=&#34;20250422224325.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while...else 遇上 break&lt;/strong&gt; (终止)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/hJFZvtYT&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGvkCJby/20250422224719.jpg&#34; alt=&#34;20250422224719.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while...else 遇上 continue&lt;/strong&gt; (继续)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SKHvDgKR/20250422225002.jpg&#34; alt=&#34;20250422225002.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;for循环中else的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for循环中else的结构&#34;&gt;#&lt;/a&gt; for 循环中 else 的结构&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for临时变量in序列：
  重复执行的代码
  ...
else:
  循环正常结束之后要执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所谓 else 指的是循环正常结束之后要执行的代码，即如果是 break 终止循环的情况，else 下方缩进的代码将不执行&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5txR5JZ9/20250425220744.jpg&#34; alt=&#34;20250425220744.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出循环的两种方式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;遇见 break&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/2jwFvvCW/20250425221204.jpg&#34; alt=&#34;20250425221204.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇见 continue&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ncmFgKMj/20250425221548.jpg&#34; alt=&#34;20250425221548.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;综合案例报数字游戏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综合案例报数字游戏&#34;&gt;#&lt;/a&gt; 综合案例：报数字游戏&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y97D2HxB/20250425223152.jpg&#34; alt=&#34;20250425223152.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-10-字符串定义切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-10-字符串定义切片&#34;&gt;#&lt;/a&gt; 1-10 字符串定义切片&lt;/h2&gt;
&lt;h4 id=&#34;字符串定义与输入输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串定义与输入输出&#34;&gt;#&lt;/a&gt; 字符串定义与输入输出&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一对引号字符串&lt;/li&gt;
&lt;li&gt;三引号字符串（支持换行）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串是 Python 中最常用的数据类型。我们一般所有引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：控制台显示结果为 &#39;&amp;lt;class str&amp;gt;&#39;, 即数据类型为 str（字符串）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/PxkrQ2mQ/20250425224841.jpg&#34; alt=&#34;20250425224841.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Python 代码中，我们可以使用 input () 方法来接收用户的输入信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住：在 Python 中，input () 方法返回的结果是一个字符串类型的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&#39; 请输入您的姓名&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;请输入您的年龄: &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;请输入您的住址: &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;input () 可以阻断当前正在执行的代码，让系统处于等待状态，直到用户输入完成&lt;/li&gt;
&lt;li&gt;input () 方法接收到的所有数据，返回的数据类型多少字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通输出&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;变量名称&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;变量名称&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;，变量名称&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;，变量名称&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;格式化输出&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;百分号 (Python2 和 Python3)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39;请输入您的姓名:&#39;）
age = int(input(&#39;请输入您的年龄: &#39;)
address = input(&#39; 请输入您的住址:&#39; )

print(&#39;我的名字是当s，今年%d岁了，家里住在%s...% (name, age, address))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;format 方法 (Python3)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39; 请输入您的姓名: &#39;)
age = input(&#39; 请输入您的年龄: &#39;)
address = input(&#39; 请输入您的住址: &#39;)

print(&#39;我的名字是&amp;#123;&amp;#125;，今年()岁了，家里住在&amp;#123;&amp;#125;...&#39;.format(name. age, address)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f 形式 (Python3)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39;请输入您的姓名: &#39;)
age = input(&#39; 请输入您的年龄: &#39;)
eddress input( &#39;请输入您的住址:&#39;)

print(f&#39;我的名字是 &amp;#123;name&amp;#125;，今年&amp;#123;age&amp;#125;岁了， 家里住在&amp;#123;address&amp;#125;...&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;字符串索引下标与循环遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串索引下标与循环遍历&#34;&gt;#&lt;/a&gt; 字符串索引下标与循环遍历&lt;/h4&gt;
&lt;p&gt;在计算机中，Python 中的字符串属于序列结构。所以底层存储占用一段连续的存储空间。&lt;/p&gt;
&lt;p&gt;索引的最大值 = len (字符串) - 1&lt;/p&gt;
&lt;p&gt;例如：7 个字符，则索引下标的最大值为 7 - 1 = 6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：索引下标从 0 开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引下标：就是编号。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;abcdef&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/BQzN5vhC/20250426225357.jpg&#34; alt=&#34;20250426225357.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遍历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MG9D9bxg/20250426230306.jpg&#34; alt=&#34;20250426230306.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串切片&#34;&gt;#&lt;/a&gt; 字符串切片&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;什么是切片？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：切片是指对操作的对象截取其中一部分的操作，字符串、列表、元组都支持切片操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;序列[开始位置下标：结束位置下标:步长]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不包含结束位置下标对应的位置，正负整数均可&lt;/li&gt;
&lt;li&gt;步长是选取间隔，正负整数均可，默认步长为 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;口决：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;切片其实很简单，只顾头来尾不顾，&lt;/p&gt;
&lt;p&gt;步长为正，正向移动&lt;/p&gt;
&lt;p&gt;步长为负，则逆向移&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/XvWjsdxK/20250426233008.jpg&#34; alt=&#34;20250426233008.jpg&#34; /&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://151064.xyz/%E6%B5%8B%E8%AF%95.html</guid>
            <title>测试</title>
            <link>https://151064.xyz/%E6%B5%8B%E8%AF%95.html</link>
            <category term="测试" scheme="https://151064.xyz/categories/%E6%B5%8B%E8%AF%95/" />
            <pubDate>Sun, 13 Apr 2025 13:00:05 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;Oh, this is an invalid password. Check and try again, please.&#34; data-whm=&#34;OOPS, these decrypted content may changed, but you can still have a look.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;55d2051a416bb86df9fa408b2d4f38bd1dc872796dffadf492dfa20548c9bdd9&#34;&gt;05759d172b0e2e5e4729f5f8c86587260886a291cfe7a32c007939594de7e2a3859ad6224112d5d66e2f0536a1e40fd6f47e757bee0619f55a70b8007f4bfb12&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://151064.xyz/hello-world.html</guid>
            <title>Hello World</title>
            <link>https://151064.xyz/hello-world.html</link>
            <pubDate>Sat, 05 Apr 2025 21:52:49 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;Oh, this is an invalid password. Check and try again, please.&#34; data-whm=&#34;OOPS, these decrypted content may changed, but you can still have a look.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;cb1d86323eb5b0de32d5291c956bbfe5b2808d03d69acf901c5640f5e17e7db7&#34;&gt;05759d172b0e2e5e4729f5f8c8658726e13b0b45b93bf3338840eb7e43263f5abce7b0c4bf962e48293ba65763ae4bbbf92e6cea95e75e99cc26e3df5f88c65ec49ef70eb2e87c95730ef54b46e6977f6998128f90c8426e2e1a263699bacf9dcd999dac765857b536e64e779c6063c724e2a14f8b00ae238954825ee0cb6fc54f065b1b485fd0de6fd25b2cc919eacc0111a7162b3b18a4f8590db07d5bef4445ef72ec327b73a364ebdedfcbcc9af90bd1e639e921fb0a0bc826008d0ecc1a82185c5ada28c8e3070b478140d8fa40acdbff1d5b4f15657d94e75ef86166404eaa2ca97bac5e622ef25fd5debe191ebb1d8a5261f203e4c838ce463d5e3479c03c5740ac3ad11c19a660013185d968c81e445776b913e2535e4ebd787ecfeabd2975b7a157f72f41cecd1ed0355d06e146e9d1b0071746cb6f5b828b148b28d11cf4313fd03d70a50f4d32db9379006ac289558ad46b2c5070af05182f378a99ef536277907e44cd25ff12913f23c4d8904d982cb6c539490001295650d0797feecab6b1f02c18a755aae91b863e45eec822c6721d4aa23237addfa0f55341a57ce36c7718388b5756f13981c0709d70d0fc1a3d20f6b133885fd8c01a4341bd60534ae8aeec66e23e82ea21054a2e0fed71228812ad07280e9ea429b0316ca863d3901cf6312848336bfcfd0b5107e6f75f3fb573d6b17724810d006845f47d553410c4f9b626024afb7d5b88d1b74c0f72f747a0321ba044c875c39d124536a0965d65dd805560441ac67163cb97a1b8b82980165e8e9e4c72ca4ddbce879a194cce71e22b9c23b03af2d19fed31f31f0560f3e3a939dcde3fb24f69568b5c16f7e7f32fdf65873f893600c3389063339059eea6e935cf85b965801403dd04ec4872262ccd9d27a5574262a05a750edb6e91f0235dd496af200f644b6fca6dd51edecda257a9cc3b5f8cfc6ab058e310489b228f5d51a6a4e88dc7aac4fb5965938f6ab9177edf70c8e143aaf18bb468cd51dbf5eb2ebeb135c5377f11cfac79d3b45ed6cf1b6c4db53d8bd988ab43d2a53bc5618e121d7f8f2c6e4aa600bc3df1808a47ed80cc64d25d97c8d07e3d05015d096e771614909ecf262e3f604437686d513a5ad634de04b11ce12b4318667159b7f37576c82bb53af1fa7ca978bdbc44511675b929eb9be615cc89fc9242520f109ef35d69dde6b447c4a12ad798c03c109b5f8d7221b90fcc9b852285e42770b3784464aefbddd6caabd52848c273efa8f12d74dd4f6d7e0461a01de52984d9f51f0500978508c44208aaba111dfe554e209e90653e0a90110ebc99b410dc20ca14bd4174d3602f223f4e51462f9fb5a41e0a73275d7d0038936468d7fa3206045ee596fc72e984d707b7d6122990846b5dd1f627963dc5300ab5049aaaf57486f96a15af806fe5aeda8c8173f1703b39ea429c16eb474b5b0e02311a2496c6252420046727891f89dceb054063e122dbf104de6eb4f98abe5bd52ed32e8b471be871b5c1274c2c4fbb070e90ddbcdf924ef04133008c20011f0bc64b22c92a4086bfa97761e5bd36378b4e54514ee14321d072bb53e1233b9b221db861b728a948919294e42eeb18f9c8f3e4d8b55d6537b85abaf1d1c1f092e57ba1e151f523d2f13f6eb6c1269e6c160fe8645adf7b63a00bacd3aaa77fd0b523b541d524d89b11c5a73c3be34cc016690b5f1fae0a4ea0fb4672d9e9173d469dd13f37679caf50bde2c29c6b3b79f783038bcbd72a352f818d72c30f8c15208ad40fe5a7fc6801bba9265c560cc408e1b5a4cce4b1173559c17651b501db0273cbad537c5e110a559afe1c84890604e4b3fb8eceb36c33f4c8d37b14dff43f37b8f29b6cffac606e914a964ce582f11c628314d109152fa71239ad18411e84b1b6b8988017d751191fdf0cbc941dae1e37e1cc00d84c0eb3eb890b3b4576dd8c86ebb2bac64d3848bb57ee9e91062107a855f090ef5d50e0056173503324f47fee788df32069320ef602dbfacddb006680fe3b46adb998ef96b34210eba694ca924954373c67b79365d59725307f1e853e1c1b69cc6b2318b53b8fa532366011966f838a1345771826fe9e36c556197fe1088f7da6ad2c71f3d617d7f0a2ee8d8eabb9f5c12469e7c1dee30c698b82560ed86a23756b1e8453e26a02e1b39414e11188d5c966ed7f518ed051058106b608c32df7b3e4e640706440c9f99660e370fe0244f74fe903559fa01d19287e7adae64c56d254407dfbe6df10aad76b76327364ce4562fd01d290a84cbd36b6afa8385f4ba9f71152767fcd6f9efdfea2438c79fd9b7031a781ff65c6ba2449e673e1c4ce1a1343ca3ef5a0723cfc751aab0bc5c0dc034e16beca2b043bcaa3db18c944a94d134ad6fcd735650e4e93b36feebb60afdd2c217ee288edf8cb03ff79b45e0c70e1ada820ded470424b574d6fec2978aa89fc4dfdd23ae76811553ccef96ba33efc5a82ecabed23771b6852d614d5f50d1c923849bd8290d5f0652a83ac26adfde4b3ccc75f628556f3dda6dbe9f199682286a0a194091b85e9d9439ed307d7dcde811d8534f0b99e3e95295c5a4c71f7ccc7baeb66a45f13039c6f2a8464910b4e84dfaf685db2fbd55a2ce8fcc495242f040ad245c45de45ea5afb937405ce02536d9a4a254f16d7e35a8587a4cfc12700c17a28c510bfd867ceb4b4f79321037f93855ee664b966a58f5852880388c227b985a347ff42fa0af49c02051c332c1de5d11d4e3f6b0d43db7&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
    </channel>
</rss>
