<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>🔥 老将不死 💗 薪火相传 🔥</title>
        <subtitle></subtitle>
        <icon>https://151064.xyz/assets/favicon.ico</icon>
        <link>https://151064.xyz</link>
        <author>
          <name>温屿</name>
        </author>
        <description>夏日蝉鸣，梧桐树下</description>
        <language>zh-CN</language>
        <pubDate>Wed, 16 Jul 2025 09:23:05 +0800</pubDate>
        <lastBuildDate>Wed, 16 Jul 2025 09:23:05 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://151064.xyz/STM32%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html</guid>
            <title>STM32入门教程</title>
            <link>https://151064.xyz/STM32%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html</link>
            <pubDate>Wed, 16 Jul 2025 09:23:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;stm32入门教程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stm32入门教程&#34;&gt;#&lt;/a&gt; STM32 入门教程&lt;/h1&gt;
&lt;h4 id=&#34;keil5-mdk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#keil5-mdk&#34;&gt;#&lt;/a&gt; keil5 MDK&lt;/h4&gt;
&lt;p&gt;是用来给 ARM 系统的单片机编程的&lt;/p&gt;
&lt;h4 id=&#34;stm32的介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stm32的介绍&#34;&gt;#&lt;/a&gt; STM32 的介绍&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;STM32（也是一个单片机）是 ST 公司基于 ARM Cortex-M 内核开发的 32 位微控制器&lt;/li&gt;
&lt;li&gt;STM32 常应用在嵌入式领域，如智能车、无人机、机器人、无限通信、物联网、工业控制、娱乐电子产品等&lt;/li&gt;
&lt;li&gt;STM32 功能强大、性能优异、片上资源丰富、功耗低、是一款经典的嵌入式微控制器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;STM32 家族&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t76fcXvZ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y2DHh013/20250703101959.jpg&#34; alt=&#34;20250703101959.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;片上资源 / 外设&lt;/strong&gt;（Peripheral）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;英文缩写&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;英文缩写&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;NVIC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;嵌套向量中断控制器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CAN&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CAN 通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SysTick&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;系统滴答定时器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;USB&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;USB 通信&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RCC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复位和时钟控制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;RTC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;实时时钟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GPIO&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通用 IO 口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CRC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CRC 校验&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;AFIO&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复用 IO 口&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PWR&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;电源控制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;EXTI&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;外部中断&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;BKP&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;备份寄存器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TIM&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;定时器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IWDG&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;独立看门狗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ADC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模数转换器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;WWDG&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;窗口看门狗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DMA&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;直接内存访问&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DAC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数模转换器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;USART&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;同步 / 异步串口通信&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SDIO&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SD 卡接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;I2C&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;I2C 通信&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;FSMC&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可变静态存储控制器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SPI&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SPI 通信&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;USN OTG&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;USN 主机接口&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;软件安装&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#软件安装&#34;&gt;#&lt;/a&gt; 软件安装&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;安装：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Keil5 MDK&lt;/li&gt;
&lt;li&gt;安装器件支持包&lt;/li&gt;
&lt;li&gt;软件注册&lt;/li&gt;
&lt;li&gt;安装 STLINK 驱动&lt;/li&gt;
&lt;li&gt;安装 USB 转串口驱动&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;新建工程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#新建工程&#34;&gt;#&lt;/a&gt; 新建工程&lt;/h1&gt;
&lt;p&gt;STM32 的开发方式（主要有）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;基于寄存器的方式&lt;/p&gt;
&lt;p&gt;就是用程序直接配置寄存器，是最底层、最直接、效率会更高一些&lt;/p&gt;
&lt;p&gt;但是由于 STM32 的结构复杂、寄存器太多，所以基于寄存器的方法目前是不推荐的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于标准库的方式（即库函数的方式）&lt;/p&gt;
&lt;p&gt;是使用 ST 官方提供的封装好的函数，通过调用这些函数来间接配置这些寄存器&lt;/p&gt;
&lt;p&gt;由于 ST 对寄存器封装的比较好，所以这种方式既能满足对寄存器的配置，对开发人员也比较友好，有利于提高开发效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基于 HAL 库的方式&lt;/p&gt;
&lt;p&gt;可以用图形话界面快速配置 STM32，比较适合快速上手 STM32&lt;/p&gt;
&lt;p&gt;但是这种方法隐藏了底层逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#过程&#34;&gt;#&lt;/a&gt; 过程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先建立一个存放工程的文件夹（比如在 D 盘、E 盘）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PP86P8wt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/dt5gN2QT/20250704112726.jpg&#34; alt=&#34;20250704112726.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以后的工程都存放在这个文件夹，方便管理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;点击进入软件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bs8G27Gs&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fTSY1ZDj/20250704114038.jpg&#34; alt=&#34;20250704114038.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再点击 Project, 并选择 New uVision Project...&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/rRTpx4wv&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/mkzFxNf2/20250704114255.jpg&#34; alt=&#34;20250704114255.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择我们刚才建立的文件夹&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/HjCQXQ2x&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gcxN9sLv/20250704143420.jpg&#34; alt=&#34;20250704143420.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给你的项目命名，再点保存&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/2VtyFYDw&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/JzrX87Y9/20250704143808.jpg&#34; alt=&#34;20250704143808.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择你所要项目的型号，再点 OK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/5j0fPrpk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/FFb1K5Sm/20250704144344.jpg&#34; alt=&#34;20250704144344.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹出的这个界面我们暂时还用不上，先点击右上角的❌&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/LhwFx8Jn&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9FFXF4Vt/20250704144630.jpg&#34; alt=&#34;20250704144630.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;现在项目就建好了，但是这里的工程文件是空空如也，还不能直接用，需要给它添加一些必要的文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/gn8Q4q9T&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/c4bWxXF0/20250704144945.jpg&#34; alt=&#34;20250704144945.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C:\Users\22731\Desktop\STM32\ 固件库 \STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm&lt;/p&gt;
&lt;p&gt;根据这些路径找到这个界面&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/VdPr31Tk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Dy8r4wPL/20250704145835.jpg&#34; alt=&#34;20250704145835.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些文件就是 STM32 的执行文件，把文件全部复印下来，然后回到工程模板文件夹里，可以看到这些就是我们刚才新建工程自动生成的文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/1npkYp2B&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/j59R2chp/20250704150817.jpg&#34; alt=&#34;20250704150817.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果直接粘贴到模板文件夹里，就会太乱，可以新建一个文件夹，然后将启动文件粘贴到这个新的文件夹里面&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/94G2v5qy&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/d0f0ZJsN/20250704151152.jpg&#34; alt=&#34;20250704151152.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;并将 STM32F10x 文件夹中的这三个文件也粘贴到模板文件夹中&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/XGnvLcYK&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cHn8sFqz/20250704151528.jpg&#34; alt=&#34;20250704151528.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Mcm6nMmn&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/s2tv05B4/20250704151730.jpg&#34; alt=&#34;20250704151730.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;因为 STM32 是内核和内核外围的设备组成的，而且这个内核的寄存器描述和外围设备的描述文件不是再一起的，所以我们还需要添加一个外围设备的描述文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/cgvbVPCd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/769rTkyJ/20250704152338.jpg&#34; alt=&#34;20250704152338.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这两个文件就是内核寄存器的描述，将这两个文件也粘贴到模板文件夹中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;必要文件复制完成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回到 Keil5 软件，把刚才复制的文件添加到工程里，将文件改名为 Start,&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/d7jCJ07B&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KYdDrkxd/20250704153503.jpg&#34; alt=&#34;20250704153503.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接着点右键，选择 Add Files to Group &#39;Start&#39;, 点击进入 Start&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Q9nHMKjp&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hvKxpVw3/20250704153641.jpg&#34; alt=&#34;20250704153641.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将文件类型改为 All files (* . *), 再选择一个启动文件添加（&lt;strong&gt;注：只能选一个启动文件&lt;/strong&gt;），这里我们选择以.md.s 结尾的文件，点击 Add, 然后将剩下所有的.h 和.c 文件添加进来，最后点击 Close&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Vr4H01h9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SRp05x7P/20250704154101.jpg&#34; alt=&#34;20250704154101.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样，Start 文件夹里面的文件就添加好了（这些带钥匙的文件是只读文件，是不允许我们修改的）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/G8rmhJ08&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/3R041nnB/20250704154656.jpg&#34; alt=&#34;20250704154656.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，我们还需要在工程选项里添加上这个文件夹的头文件路径，要不然软件是找不到.h 文件的&lt;/p&gt;
&lt;p&gt;点击魔术棒按钮，打开工程选项，在 C/C++ 里，点 Include Paths 右边的三个小点，&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Y4xzSR4T&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Jhf6PdR7/20250704161058.jpg&#34; alt=&#34;20250704161058.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击这个小方框，在点击这三个小点&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/14S4BSj0&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DfJs2yQN/20250704161814.jpg&#34; alt=&#34;20250704161814.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择 Start 文件夹，再点击 OK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SYRBdJFN&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1Xry9qv6/20250704162113.jpg&#34; alt=&#34;20250704162113.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接下来我们再新建一个 main 函数，看看这个工程是不是可行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;打开工程文件夹，再新建一个文件夹&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bGY3k4jq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/yNct4zQ3/20250704162633.jpg&#34; alt=&#34;20250704162633.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 User 上点击右键，再选择 Add New Item to Group &#39;User&#39;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/LqhjHSpg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9fYbYXgb/20250704162816.jpg&#34; alt=&#34;20250704162816.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择 C 文件，名字为 main，路径选择到 User, 再点击 Add&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/BtNHkpkV&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zXY7LPj8/20250704163041.jpg&#34; alt=&#34;20250704163041.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样我们就拥有 main.c 文件了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再 main.c 文件中，右键，选择 Inster &#39;#include file&#39;, 再选择 stm32f10x.h (插入头文件)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/1fYfSj9f&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/T3TmrzFq/20250704164648.jpg&#34; alt=&#34;20250704164648.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;STM32F1 系列中的型号分类及缩写&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;缩写&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;释义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Flash 容量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;型号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;LD_VL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小容量产品超值系列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16~32K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MD_VL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中容量产品超值系列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64~128K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HD_VL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大容量产品超值系列&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;256~512K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;LD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;小容量产品&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16~32K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F101/102/103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;中容量产品&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64~128K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F101/102/103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;HD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大容量产品&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;256~512K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F101/102/103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;XL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;加大容量产品&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;大于 512K&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F101/102/103&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CL&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;互联型产品&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;STM32F105/107&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;gpio通用输入输出口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio通用输入输出口&#34;&gt;#&lt;/a&gt; GPIO 通用输入输出口&lt;/h1&gt;
&lt;h3 id=&#34;gpio简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio简介&#34;&gt;#&lt;/a&gt; GPIO 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;GPIO（General Purpose Input Output）通用输入输出口&lt;/li&gt;
&lt;li&gt;可配置为 8 种输入输出模式&lt;/li&gt;
&lt;li&gt;引脚电平：0V~3.3V，部分引脚可容忍 5V&lt;/li&gt;
&lt;li&gt;输出模式下可控制端口输出高低电平，用以驱动 LED、控制蜂鸣器、模拟通信协议输出时序等&lt;/li&gt;
&lt;li&gt;输入模式下可读取端口的高低电平或电压，用于读取按键输入、外接模块电平信号输入、ADC 电压采集、模拟通信协议接收数据等&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在每个 GPIO 模块内，主要包含了寄存器和驱动器这些东西&lt;/p&gt;
&lt;p&gt;寄存器：就是一段特殊的存储器，内核可以通过 APB2 总线对寄存器进行读写&lt;/p&gt;
&lt;h3 id=&#34;gpio模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio模式&#34;&gt;#&lt;/a&gt; GPIO 模式&lt;/h3&gt;
&lt;p&gt;通过配置 GPIO 的端口配置寄存器，端口可以配置成以下 8 种模式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;模式名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;性质&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;特征&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;浮空输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读取引脚电平，若引脚悬空，则电平不确定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;上拉输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读取引脚电平，内部连接上拉电阻，悬空时默认高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;下拉输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可读取引脚电平，内部连接下拉电阻，悬空时默认低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模拟输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;模拟输入&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;GPIO 无效，引脚直接接入内部 ADC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;开漏输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可输出引脚电平，高电平为高阻态，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;推挽输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可输出引脚电平，高电平接 VDD，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复用开漏输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;由片上外设控制，高电平为高阻态，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复用推挽输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;数字输出&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;由片上外设控制，高电平接 VDD，低电平接 VSS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模拟输入可以说是 ADC 模数转化器的专属配置&lt;/li&gt;
&lt;li&gt;在这 8 种模式中，除了模拟输入这个模式会关闭数字的输入功能，在其他 7 种模式中，所有的输入都是有效的&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;stm32外部的设备和电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stm32外部的设备和电路&#34;&gt;#&lt;/a&gt; STM32 外部的设备和电路&lt;/h3&gt;
&lt;h4 id=&#34;led和蜂鸣器简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led和蜂鸣器简介&#34;&gt;#&lt;/a&gt; LED 和蜂鸣器简介&lt;/h4&gt;
&lt;p&gt;**LED：** 发光二极管，正向通电点亮，反向通电不亮&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;p&gt;如果是引脚没有被剪过的 LED，那其中长脚是正极，短脚是负极&lt;/p&gt;
&lt;p&gt;通过 LED 内部也可以看正负极，这里较小的一半是正极，较大的一半是负极&lt;/p&gt;
&lt;p&gt;** 有源蜂鸣器：** 内部自带振荡源，将正负极接上直流电压即可持续发声，频率固定&lt;/p&gt;
&lt;p&gt;** 无源蜂鸣器：** 内部不带振荡源，需要控制器提供振荡脉冲才可发声，调整提供振荡脉冲的频率，可发出不同频率的声音&lt;/p&gt;
&lt;h1 id=&#34;led闪烁led流水灯蜂鸣器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led闪烁led流水灯蜂鸣器&#34;&gt;#&lt;/a&gt; LED 闪烁 &amp;amp; LED 流水灯 &amp;amp; 蜂鸣器&lt;/h1&gt;
&lt;p&gt;首先需要搭建一个面包板，按照图示将相关的硬件安装好，再在 keil5 MDK 中创建一个项目 (具体操作看新建工程)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/67WLHwn7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/JhJ6zzhQ/3-1-LED.jpg&#34; alt=&#34;3-1-LED.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/mzxKB5Y4&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9Mz2t3zD/20250707095230.jpg&#34; alt=&#34;20250707095230.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将默认的组（Groups:Source Group 1）删掉，再点击 New (Insert) 新建三个组，分别为 Start,Library,User&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/qNHt688G&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/L8nj7D5G/20250707095815.jpg&#34; alt=&#34;20250707095815.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然后对这三个组添加对应的文件&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Start:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/4HtWw6n1&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Rhp2SGB2/20250707101401.jpg&#34; alt=&#34;20250707101401.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Library () 全选:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bdbg7RNx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fWqP0HGr/20250707101806.jpg&#34; alt=&#34;20250707101806.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/4KqvMYD2&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DZyCSsBh/20250707102046.jpg&#34; alt=&#34;20250707102046.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;全部添加好后，点击 OK 键&lt;/p&gt;
&lt;p&gt;接着点击魔术棒按钮，打开工程选项，选择 C/C++，在 Include Paths 中添加好路径，并在 Define 中填好 USE_STDPERIPH_DRIVER&lt;/p&gt;
&lt;p&gt;[&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7Z3XXXRD/20250707102949.jpg&#34; alt=&#34;20250707102949.jpg&#34; /&gt;](&lt;a href=&#34;https://postimg.cc/FYKjHbmn&#34;&gt;https://postimg.cc/FYKjHbmn&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;然后点击 Debug，调试器选择 ST-Link，再点 seettings&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t7W0BPKf&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SQtyNfDy/20250707104136.jpg&#34; alt=&#34;20250707104136.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击 Flash Download，勾选 Reset and Run, 然后确定，OK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CzrW1NkR&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Mpzx93Gm/20250707104536.jpg&#34; alt=&#34;20250707104536.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样工程选项就配置好了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;接着打开 main.c, 将里面原来的代码全部删掉&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/64cxYx8c&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/V5QssY1x/20250707105426.jpg&#34; alt=&#34;20250707105426.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/V58SG9S0&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZY9rqV4H/20250707105438.jpg&#34; alt=&#34;20250707105438.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;led闪烁&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led闪烁&#34;&gt;#&lt;/a&gt; LED 闪烁&lt;/h3&gt;
&lt;p&gt;操作 STM32 的 GPIO 总共需要 3 个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 RCC 开启 GPIO 的时钟&lt;/li&gt;
&lt;li&gt;使用 GPIO_Init 函数初始化 GPIO&lt;/li&gt;
&lt;li&gt;使用输入或者输出的函数控制 GPIO 口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 涉及到了两个外设：**RCC 和 GPIO&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;灯亮：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/tZGr2Frk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/G2HZ3QGW/20250707142036.jpg&#34; alt=&#34;20250707142036.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/vgJwb1HS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/PJxXbYGh/20250707143541.jpg&#34; alt=&#34;20250707143541.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;灯灭：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ZWtt1vD9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Dwmv4qrc/20250707142924.jpg&#34; alt=&#34;20250707142924.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/G4WfB01H&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/W4zcHjW6/20250707143741.jpg&#34; alt=&#34;20250707143741.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LED 闪烁：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了实现 LED 闪烁，我们需要在主循环里，写上 **‘’点亮 LED，延时一段时间，熄灭 LED，延时一段时间‘’** 的逻辑&lt;/p&gt;
&lt;p&gt;准备工作：&lt;/p&gt;
&lt;p&gt;点击三个盒子的图标，点击方框，添加新组，再将文件里的文件全部添加进来，最后点击 OK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/YjjQPbVS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/nVGTCWGq/1751871302428.png&#34; alt=&#34;1751871302428.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后点击魔术棒，选择 C/C++，将 System 的源路径添加进来，就 OK 了&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/hJLqcL5z&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g05cy4yD/20250707145905.jpg&#34; alt=&#34;20250707145905.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/8sRQvmpZ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RC8Mjgjx/20250707152647.jpg&#34; alt=&#34;20250707152647.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;研究推挽输出和开漏输出的驱动问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#研究推挽输出和开漏输出的驱动问题&#34;&gt;#&lt;/a&gt; 研究推挽输出和开漏输出的驱动问题&lt;/h3&gt;
&lt;p&gt;首先，将 LED 拔掉，然后把长脚插到 PA0 口，短脚插到负极，这样 LED 就是高电平点亮方式（也能正常闪烁，代码看上图）&lt;/p&gt;
&lt;p&gt;说明在推挽模式下，高低电平都是有驱动能力的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;改成开漏模式：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/181wk1nK&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;C:%5CUsers%5C22731%5CDesktop%5C20250707155648.jpg&#34; alt=&#34;20250707155648.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这时，我们就可以看到 LED 不亮了，现在 LED 还是高电平点亮的方式，LED 不亮，说明开漏输出的模式高电平是没有驱动能力的&lt;/p&gt;
&lt;p&gt;我们再把 LED 该为低电平的方式，可以看到 LED 又亮起来了，说明开漏输出的模式低电平是有驱动能力的&lt;/p&gt;
&lt;h3 id=&#34;led流水灯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#led流水灯&#34;&gt;#&lt;/a&gt; LED 流水灯&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WdDrqbRj&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/P5yMcP2L/3-2-LED.jpg&#34; alt=&#34;3-2-LED.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要拿出 8 个 LED 灯，正极都插在正极的供电口，负极依次插到 PA0 到 PA7 的端口&lt;/p&gt;
&lt;p&gt;在代码中引用引脚，有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I （或）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/p5hhhq7C&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/mkVQnnyv/20250707162743.jpg&#34; alt=&#34;20250707162743.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全部选择&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/pyJXkNQj&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/y6wg1skL/20250707162939.jpg&#34; alt=&#34;20250707162939.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了同时控制 16 个端口，我们可以使用 GPIO_Write 这个函数&lt;/p&gt;
&lt;p&gt;这样就是第一个灯点亮，其他灯都熄灭了&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/7C5nMMpC&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/25w9Y0Gx/20250707164258.jpg&#34; alt=&#34;20250707164258.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/sBSdHSWX&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wB4qvQTh/20250707165539.jpg&#34; alt=&#34;20250707165539.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行之后，可以看到 LED 依次点亮&lt;/p&gt;
&lt;h3 id=&#34;蜂鸣器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#蜂鸣器&#34;&gt;#&lt;/a&gt; 蜂鸣器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/v15ktyRx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zfQN5D07/3-3.jpg&#34; alt=&#34;3-3.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VCC 正极接到正极供电口，GND 负极接到负极供电口，I/O 控制极随便选择一个 IO 口接上及可（示列选择 PB12）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：A15、B3、B4 这三个口不能选，这三个口是 JTAG 的调试端口，如果要用作普通端口的话，还需要进行一些配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给 PB12 输出低电平，蜂鸣器就会响，输出高电平，蜂鸣器就不响&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/N5gsyNHx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/xTmc4hjB/20250707171449.jpg&#34; alt=&#34;20250707171449.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还可以换个响的方式&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/zLR8m6sq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Bvm6FGNP/20250707171710.jpg&#34; alt=&#34;20250707171710.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;gpio输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio输入&#34;&gt;#&lt;/a&gt; GPIO 输入&lt;/h1&gt;
&lt;h3 id=&#34;按键简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按键简介&#34;&gt;#&lt;/a&gt; 按键简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按键：常见的输入设备，按下导通，松手断开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按键抖动（在单片机中存在）：由于按键内部使用的是机械式弹簧片来进行通断的，所以在按下和松手的瞬间会伴随有一连串的抖动&lt;/p&gt;
&lt;p&gt;这个我们在程序中需要过滤一下（最简单的过滤方法就是加一段延时，把这个抖动时间耗过去）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;传感器模块简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#传感器模块简介&#34;&gt;#&lt;/a&gt; 传感器模块简介&lt;/h3&gt;
&lt;p&gt;传感器模块：传感器元件（光敏电阻 / 热敏电阻 / 红外接收管等）的电阻会随外界模拟量的变化而变化，通过与定值电阻分压即可得到模拟电压输出，再通过电压比较器进行二值化即可得到数字电压输出&lt;/p&gt;
&lt;p&gt;滤波电容：它是为了给中间的电压输出进行滤波的，用来滤除一些干扰，保证输出电压波形的平滑&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：一般我们在电路中遇到这种一段接在电路中，另一端接地的电容，都可以考虑一下这个是不是滤波电容的作用（如果是则可以在分析电路的时候把这个电容抹掉）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LM393：是一个电压比较器芯片，里面有两个独立的电压比较器电路，有时可以当作是一个运算放大器&lt;/p&gt;
&lt;h3 id=&#34;按键的四种接法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按键的四种接法&#34;&gt;#&lt;/a&gt; 按键的四种接法：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;下接（1）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/JDzcKsPF&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/3RgS8pp3/1.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下接（2）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/HJxVhb1b&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/LskLhVyQ/2.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上接（1）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/FYn91qwJ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGKhZRrM/3.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上接（2）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/zLbqh712&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/rpgsvZZT/4.png&#34; alt=&#34;4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般我们的按键都是用下接的方式&lt;/p&gt;
&lt;p&gt;下接按键按下时引脚是低电平，松手是高电平，上接则相反&lt;/p&gt;
&lt;p&gt;（1）这两种接法要求引脚必须是上拉或下拉输入的模式&lt;/p&gt;
&lt;p&gt;（2）这两种接法可以允许引脚是浮空输入的模式，因为已经外设了上拉电阻和下拉电阻&lt;/p&gt;
&lt;h3 id=&#34;c语言数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言数据类型&#34;&gt;#&lt;/a&gt; C 语言数据类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;关键字&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;位数&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;表示范围&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;stdint 关键字&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ST 关键字&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-128 ~ 127&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int8_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;s8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;unsigned char&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 ~ 255&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint8_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-32768 ~ 32767&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int16_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;s16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;unsigned short&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 ~ 65535&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint16_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2147483648 ~ 2147483647&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int32_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;s32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;unsigned int&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 ~ 4294967295&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint32_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;u32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2147483648 ~ 2147483647&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;unsigned long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 ~ 4294967295&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;long long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-(2^64)/2 ~ (2^64)/2-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;int64_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;unsigned long long&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 ~ (2^64)-1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;uint64_t&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3.4e38 ~ 3.4e38&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;double&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;64&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1.7e308 ~ 1.7e308&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;c语言宏定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言宏定义&#34;&gt;#&lt;/a&gt; C 语言宏定义&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;关键字：&lt;/strong&gt;#define&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 用途：** 用一个字符串代替一个数字，便于理解，防止出错；提取程序中经常出现的参数，便于快速修改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义宏定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;#define ABC 12345&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用宏定义：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;int a = ABC; // 等效于 int a = 12345;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;c语言typedef&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言typedef&#34;&gt;#&lt;/a&gt; C 语言 typedef&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 关键字：**typedef&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 用途：** 将一个比较长的变量类型名换个名字，便于使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义 typedef：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;typedef unsigned char uint8_t;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用 typedef：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;uint8_t a; // 等效于 unsigned char a;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;typedef 和宏定义的区别：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;宏定义的新名字在左边，typedef 的新名字在右边&lt;/li&gt;
&lt;li&gt;宏定义不需要分号，typedef 后面必须加分号&lt;/li&gt;
&lt;li&gt;宏定义任何名字都可以换，而 typedef 只能专门给变量类型换名字，所以宏定义的改名范围要更宽一些，只不过对变量类型重命名而言，所以 typedef 更加安全&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;c语言结构体&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言结构体&#34;&gt;#&lt;/a&gt; C 语言结构体&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 关键字：**struct&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 用途：** 数据打包，不同类型变量的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义结构体变量：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;struct{char x; int y; float z;} StructName;&lt;/p&gt;
&lt;p&gt;因为结构体变量类型较长，所以通常用 typedef 更改变量类型名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用结构体成员：&lt;/p&gt;
&lt;p&gt;StructName.x = &#39;A&#39;;&lt;/p&gt;
&lt;p&gt;StructName.y = 66;&lt;/p&gt;
&lt;p&gt;StructName.z = 1.23;&lt;/p&gt;
&lt;p&gt;或 pStructName-&amp;gt;x = &#39;A&#39;; //pStructName 为结构体的地址 pStructName-&amp;gt;y = 66;&lt;/p&gt;
&lt;p&gt;pStructName-&amp;gt;z = 1.23;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;c语言枚举&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言枚举&#34;&gt;#&lt;/a&gt; C 语言枚举&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 关键字：**enum&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 用途：** 定义一个取值受限制的整型变量，用于限制变量取值范围；宏定义的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义枚举变量：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;enum{FALSE = 0, TRUE = 1} EnumName;&lt;/p&gt;
&lt;p&gt;因为枚举变量类型较长，所以通常用 typedef 更改变量类型名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;引用枚举成员：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;EnumName = FALSE;&lt;/p&gt;
&lt;p&gt;EnumName = TRUE;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;按键控制led光敏传感器控制蜂鸣器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按键控制led光敏传感器控制蜂鸣器&#34;&gt;#&lt;/a&gt; 按键控制 LED &amp;amp; 光敏传感器控制蜂鸣器&lt;/h1&gt;
&lt;h3 id=&#34;按键控制led&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#按键控制led&#34;&gt;#&lt;/a&gt; 按键控制 LED&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/87Cm2nSX&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YC6DmJy7/3-4-LED.jpg&#34; alt=&#34;3-4-LED.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新建一个文件夹，命名为 Hardware (用来存放硬件驱动)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/JDC6CcKy&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/mDt0MmHS/20250708103815.jpg&#34; alt=&#34;20250708103815.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;点击三个箱子的按钮，打开工程管理，新建一个组，也叫 Hardware，点击 OK&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/sQzcNfD7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y9Gsjj5n/20250708104315.jpg&#34; alt=&#34;20250708104315.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在点开魔术棒按钮，打开工程选项，选择 C/C++，在源路径中将我们刚刚创建的 Hardware 添加进来，点击 OK, 这样 Hardware 就成功的添加了进来&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CBM88RxP&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/TwgJZmM6/20250708104747.jpg&#34; alt=&#34;20250708104747.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Hardware 点击右键，选择 Add New Item to Group &#39;Hardware&#39;, 选择.c 文件，Name 命名为 LED，路径选择 Hardware，点击 Add&lt;/p&gt;
&lt;p&gt;同理，创建一个.h 文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/cgVsSz2R&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/T1PhrMc4/20250708105331.jpg&#34; alt=&#34;20250708105331.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LED.c 和 LED.h 用来封装 LED 的驱动程序，LED.c 用来存放驱动程序的主体代码，LED.h 用来存放这个驱动程序用来对外提供的函数或变量的说明&lt;/p&gt;
&lt;p&gt;在 LED.c 和 LED.h 中写好这样一段&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/xq5XHfwh&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4NkVDnBf/20250708111805.jpg&#34; alt=&#34;20250708111805.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/cr6LnQMt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vHtgCh4h/20250708111818.jpg&#34; alt=&#34;20250708111818.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来我们开始封装一下 LED 的代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t19T78rp&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DzXbpTLJ/20250708114408.jpg&#34; alt=&#34;20250708114408.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/47SNLyXx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fywtbSFm/20250708114504.jpg&#34; alt=&#34;20250708114504.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/8FkpTM5C&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MGVvbYJ1/20250708115051.jpg&#34; alt=&#34;20250708115051.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，可以看到两个 LED 都亮起来了，说明我们端口配置和模块化编程是没有问题的&lt;/p&gt;
&lt;p&gt;因为 GPIO 配置好了之后默认就是低电平，所以我们还没操作 LED，LED 就亮起来了&lt;/p&gt;
&lt;p&gt;我们可以初始化，在其后面加上一段代码，这样初始化后，如果不操作 LED，LED 就是熄灭了的&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/GHj6dNsk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Jzw8cCrd/20250708115719.jpg&#34; alt=&#34;20250708115719.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们就需要完善一下 LED 驱动程序模块&lt;/p&gt;
&lt;p&gt;除了初始化，还需要点亮和熄灭 LED 的函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/dDhPFv2r&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/CMNFjxdP/20250708142742.jpg&#34; alt=&#34;20250708142742.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将这四个函数放在 LED.h 中说明一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/5jy1Qkcd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Wp64KQX3/20250708151412.jpg&#34; alt=&#34;20250708151412.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这样，LED 的驱动函数模块就封装好了，再写好代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bGVC7gmk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/63tkG1Rj/20250708152000.jpg&#34; alt=&#34;20250708152000.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这时我们可以看到 LED 交替闪烁&lt;/p&gt;
&lt;p&gt;接下来我们来写按键的代码（同样也要封装再驱动函数模块里，步骤同上，添加.c 和.h 文件）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/xJ47Wzvx&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sxjrGPvr/20250708161514.jpg&#34; alt=&#34;20250708161514.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Mf07ykp7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HnR61dGh/20250708161522.jpg&#34; alt=&#34;20250708161522.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/LYKvf3VM&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/TwhszkLh/20250708161532.jpg&#34; alt=&#34;20250708161532.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后，我们可以看到，按一下右边的按键 1，LED1 点亮，按一下左边的按键 2，LED2 熄灭&lt;/p&gt;
&lt;h3 id=&#34;实现按键按下led去反&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#实现按键按下led去反&#34;&gt;#&lt;/a&gt; 实现按键按下，LED 去反&lt;/h3&gt;
&lt;p&gt;在 LED.cZ 中给 LED1 和 LED2 分别加上翻转功能&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PvtF0Q9k&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4ytk781n/20250708165415.jpg&#34; alt=&#34;20250708165415.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最后将这两个函数的第一行放在头文件里申明一下&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/rKsfWsLg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZKF2Gvsk/20250708165758.jpg&#34; alt=&#34;20250708165758.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运用&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/JtpLMsqQ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/GhChPYT6/20250708170932.jpg&#34; alt=&#34;20250708170932.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;光敏传感器控制蜂鸣器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#光敏传感器控制蜂鸣器&#34;&gt;#&lt;/a&gt; 光敏传感器控制蜂鸣器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/kDTvsCJ4&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/pXHc2V3D/3-5.jpg&#34; alt=&#34;3-5.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;VCC、GND 同样是接电源，DO 数字输出端，接 PB13 号口&lt;/p&gt;
&lt;p&gt;和上一小节一样，添加命名为 Buzzer 的.c 和.h 文件 (在 Hardware 中)，封装好&lt;/p&gt;
&lt;p&gt;编写好函数，蜂鸣器不断鸣响，说明驱动函数没有问题&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/6y5GpbvG&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vH57Xp8X/20250708173850.jpg&#34; alt=&#34;20250708173850.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在封装好光敏传感器的模块（命名为 LightSensor，同样在 Hardware 中）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bZPYvsMV&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MpMndBYw/20250708175327.jpg&#34; alt=&#34;20250708175327.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/8FP1hxTh&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Pq1PkkcF/20250708175340.jpg&#34; alt=&#34;20250708175340.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WhGjxs3G&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/J4gnDnC2/20250708175354.jpg&#34; alt=&#34;20250708175354.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，遮住光敏电阻，蜂鸣器响，拿开，蜂鸣器不响&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;h4 id=&#34;gpio的使用方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gpio的使用方法&#34;&gt;#&lt;/a&gt; GPIO 的使用方法：&lt;/h4&gt;
&lt;p&gt;首先初始化时钟，然后定义结构体，赋值结构体&lt;/p&gt;
&lt;p&gt;GPIO_Mode 可以选择那 8 种输入输出模式&lt;/p&gt;
&lt;p&gt;GPIO_Pin 选择引脚，可以用按位或的方式同时选中多个引脚&lt;/p&gt;
&lt;p&gt;GPIO_Speed 选择输出速度&lt;/p&gt;
&lt;h4 id=&#34;模块编程的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#模块编程的方法&#34;&gt;#&lt;/a&gt; 模块编程的方法：&lt;/h4&gt;
&lt;p&gt;一般我们自己做一个产品的话，外围硬件比较多，所以需要我们把每个硬件的驱动函数单独提取出来，封装在.c 和.h 文件里，这样有利于简化主函数的逻辑，也有利于我们移植程序，还有利于我们进行分工合作&lt;/p&gt;
&lt;h1 id=&#34;oled调试工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oled调试工具&#34;&gt;#&lt;/a&gt; OLED 调试工具&lt;/h1&gt;
&lt;h3 id=&#34;oled简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oled简介&#34;&gt;#&lt;/a&gt; OLED 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;**OLED（Organic Light Emitting Diode）：** 有机发光二极管&lt;/li&gt;
&lt;li&gt;**OLED 显示屏：** 性能优异的新型显示屏，具有功耗低、相应速度快、宽视角、轻薄柔韧等特点&lt;/li&gt;
&lt;li&gt;**0.96 寸 OLED 模块：** 小巧玲珑、占用接口少、简单易用，是电子设计中非常常见的显示屏模块&lt;/li&gt;
&lt;li&gt;** 供电：**3~5.5V ** 通信协议：**I2C/SPI ** 分辨率：**128*64&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;调试方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#调试方式&#34;&gt;#&lt;/a&gt; 调试方式&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 串口调试：** 通过串口通信，将调试信息发送到电脑端，电脑使用串口助手显示调试信息&lt;/p&gt;
&lt;p&gt;优势：可以借助强大的电脑来调试，电脑端的软件，不仅可以显示单独的参数，而且可以显示曲线、图形、图像等，还可以自己做一个软件，来实现一个强大的用户交互界面&lt;/p&gt;
&lt;p&gt;弊端： 调试的时候需要拖这电脑，而且通常的串口助手只能以信息流的方式呈现数据（即只能一行一行的打印）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 显示屏调试：** 直接将显示屏连接到单片机，将调试信息打印在显示屏上&lt;/p&gt;
&lt;p&gt;优势：对于不断变化的数据，可以覆盖刷新显示，而且显示屏可以始终接在单片机上，显示方式很直接&lt;/p&gt;
&lt;p&gt;弊端：屏幕太小，显示内容有限，没有电脑软件那么强大的功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Keil 调试模式：** 借助 Keil 软件的调试模式，可使用单步运行、设置断点、查看寄存器及变量等功能&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;测试程序的基本思想：缩小范围、控制变量、对比测试等&lt;/p&gt;
&lt;h3 id=&#34;oled驱动函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oled驱动函数&#34;&gt;#&lt;/a&gt; OLED 驱动函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;作用&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_Init();&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_Clear();&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;清屏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowChar(1,  1, &#39;A&#39;);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示一个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowString(1, 3,  &amp;quot;HelloWorld!&amp;quot;);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowNum(2,  1, 12345, 5);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示十进制数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowSignedNum(2,  7, -66, 2);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示有符号十进制数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowHexNum(3,  1, 0xAA55, 4);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示十六进制数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;OLED_ShowBinNum(4,  1, 0xAA55, 16);&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;显示二进制数字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;oled显示屏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#oled显示屏&#34;&gt;#&lt;/a&gt; OLED 显示屏&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/N90qydKJ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/XJfVzh4b/4-1-OLED.jpg&#34; alt=&#34;4-1-OLED.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;将 4 针脚 I2C 版本中的文件复制，粘贴到 Hardware 文件中&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/njss4Y52&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zB7n1xFs/20250709101327.jpg&#34; alt=&#34;20250709101327.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SYCJ5Qmz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/90NZDzS1/20250709101417.jpg&#34; alt=&#34;20250709101417.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;接着进入 kile，在 Hardware 点击右键，选择 Add Files to Group &#39;Hardware&#39;, 选中这三个文件，点击 Add 添加&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/JHVhbwj7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/T1hWvfwb/20250709101849.jpg&#34; alt=&#34;20250709101849.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意：如果长度参数比数字长度长，那它就会在前面补 0；如果长度参数比数字长度小，那它就会给高位的数字删掉&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ZBrWsKbv&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gJ73Jn1s/20250709104830.jpg&#34; alt=&#34;20250709104830.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;exti外部中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exti外部中断&#34;&gt;#&lt;/a&gt; EXTI 外部中断&lt;/h1&gt;
&lt;p&gt;中断系统是管理和执行中断的逻辑结构，外部中断是众多能产生中断的外设之一&lt;/p&gt;
&lt;h3 id=&#34;中断系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中断系统&#34;&gt;#&lt;/a&gt; 中断系统&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;** 中断：** 在主程序运行过程中，出现了特定的中断触发条件（中断源），使得 CPU 暂停当前正在运行的程序，转而去处理中断程序，处理完成后又返回原来被暂停的位置继续运行&lt;/p&gt;
&lt;p&gt;使用中断系统，能够极大的提高程序的效率&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 中断优先级：** 当有多个中断源同时申请中断时，CPU 会根据中断源的轻重缓急进行裁决，优先响应更加紧急的中断源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 中断嵌套：** 当一个中断程序正在运行时，又有新的更高优先级的中断源申请中断，CPU 再次暂停当前中断程序，转而去处理新的中断程序，处理完成后依次进行返回&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 断点：** 被中断的地方&lt;/p&gt;
&lt;h3 id=&#34;stm32中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stm32中断&#34;&gt;#&lt;/a&gt; STM32 中断&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;68 个可屏蔽中断通道，包含 EXTI、TIM、ADC、USART、SPI、I2C、RTC 等多个外设&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 NVIC 统一管理中断，每个中断通道都拥有 16 个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级&lt;/p&gt;
&lt;p&gt;NVIC（嵌套中断向量控制器）就是 STM32 用来管理中断、分配优先级的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;nvic优先级分组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nvic优先级分组&#34;&gt;#&lt;/a&gt; NVIC 优先级分组&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;NVIC 的中断优先级由优先级寄存器的 4 位（0~15）决定，这 4 位可以进行切分，分为高 n 位的抢占优先级和低 4-n 位的响应优先级&lt;/p&gt;
&lt;p&gt;优先级的数是指值越小，优先级越高，0 就是最高优先级&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;抢占优先级高的可以中断嵌套，响应优先级高的可以优先排队，抢占优先级和响应优先级均相同的按中断号排队&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;分组方式&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;抢占优先级&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;响应优先级&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组 0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 位，取值为 0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 位，取值为 0~15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位，取值为 0~1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3 位，取值为 0~7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 位，取值为 0~3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2 位，取值为 0~3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组 3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3 位，取值为 0~7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1 位，取值为 0~1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;分组 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4 位，取值为 0~15&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0 位，取值为 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;exti简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exti简介&#34;&gt;#&lt;/a&gt; EXTI 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;EXTI（Extern Interrupt）外部中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EXTI 可以监测指定 GPIO 口的电平信号，当其指定的 GPIO 口产生电平变化时，EXTI 将立即向 NVIC 发出中断申请，经过 NVIC 裁决后即可中断 CPU 主程序，使 CPU 执行 EXTI 对应的中断程序&lt;/p&gt;
&lt;p&gt;简单来说，就是引脚电平变化，申请中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 支持的触发方式：** 上升沿 / 下降沿 / 双边沿 / 软件触发&lt;/p&gt;
&lt;p&gt;软件触发：即引脚什么事也没有，程序里执行一段代码，就能触发中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 支持的 GPIO 口：** 所有 GPIO 口，但相同的 Pin 不能同时触发中断（PA0 和 PB0 不能同时用，或者 PA1、PB1、PC1 这样的，端口 GPIO_Pin 一样的，只能选一个作为中断引脚）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 通道数：**16 个 GPIO_Pin，外加 PVD 输出、RTC 闹钟、USB 唤醒、以太网唤醒&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 触发响应方式：** 中断响应 / 事件响应&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：外部中断的 9&lt;sub&gt;5 会触发同一个中断函数，15&lt;/sub&gt;10 也会触发同一个中断函数，在编程的时候，我们在这两个中断函数里，需要再根据标志位来区分到底是那个中断进来的&lt;/p&gt;
&lt;h3 id=&#34;afio复用io口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#afio复用io口&#34;&gt;#&lt;/a&gt; AFIO 复用 IO 口&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;AFIO 主要用于引脚复用功能的选择和重定义&lt;/li&gt;
&lt;li&gt;在 STM32 中，AFIO 主要完成 ** 两个任务：** 复用功能引脚重映射、中断引脚选择&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;AFIO 选择中断引脚的结构图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/0bBVHYdL&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/x10B8gkT/1.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中梯形的符号，是数据选择器，有多个输入，一个输出，在侧面有选择控制端，根据控制端的数据，从输入选择一个接到输出&lt;/p&gt;
&lt;h3 id=&#34;exti框图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#exti框图&#34;&gt;#&lt;/a&gt; EXTI 框图&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WqJdpcCm&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yWV5J10/2.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图片里面像月亮的符号是或门，它可以有多个输入，但只能有一个输出，执行的是或的逻辑，在输入端，只要有一个是高电平 1，输出就是高电平 1，只有全部输入低电平 0，输出才为 0&lt;/p&gt;
&lt;p&gt;图中带有直边的符号是于门，它可以有多个输入，但只能有一个输出，执行的是与的逻辑，在输入端，只要有一个是低电平 0，输出就是低电平 0，只有全部输入高电平 1，输出才为 1&lt;/p&gt;
&lt;h3 id=&#34;旋转编码器简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#旋转编码器简介&#34;&gt;#&lt;/a&gt; 旋转编码器简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;** 旋转编码器：** 用来测量位置、速度或旋转方向的装置，当其旋转轴旋转时，其输出端可以输出与旋转速度和方向对应的方波信号，读取方波信号的频率和相位信息即可得知旋转轴的速度和方向&lt;/li&gt;
&lt;li&gt;** 类型：** 机械触点式 / 霍尔传感器式 / 光栅式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;硬件电路&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#硬件电路&#34;&gt;#&lt;/a&gt; 硬件电路&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;模块的电路图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/569QZDNr&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZKpPySkJ/3.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ygXWGTqB&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/C19DzvmZ/4.png&#34; alt=&#34;4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;对射式红外传感器计次旋转编码器计次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对射式红外传感器计次旋转编码器计次&#34;&gt;#&lt;/a&gt; 对射式红外传感器计次 &amp;amp; 旋转编码器计次&lt;/h1&gt;
&lt;h3 id=&#34;对射式红外传感器计次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#对射式红外传感器计次&#34;&gt;#&lt;/a&gt; 对射式红外传感器计次&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CnGCm87f&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gj5Mcq64/5-1.jpg&#34; alt=&#34;5-1.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们还是把传感器的功能封装到一个模块里（具体操作看以前的示例，命名为 CountSensor, 也是放在 Hardware 文件里）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/JHQ8mTK7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7hFZ3d2z/20250710115533.jpg&#34; alt=&#34;20250710115533.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用来复位 AFIO 外设，调用一下这个函数，AFIO 外设的外置就会全部清除（350）&lt;/p&gt;
&lt;p&gt;用来锁定 GPIO 配置，调用这个函数，参数指定某个引脚，那这个引脚的配置就会被锁定，防止意外更改，这个也是 GPIO 外设的函数（361）&lt;/p&gt;
&lt;p&gt;这两个函数是用来配置 AFIO 的事件输出功能的（362、363）&lt;/p&gt;
&lt;p&gt;可以用来进行引脚重映射，第一个参数可以选择你要重映射的方式，第二个参数是新的状态（364）&lt;/p&gt;
&lt;p&gt;调用这个函数，就可以配置 AFIO 的数据选择器，来选择我们想要的中断引脚（365）&lt;/p&gt;
&lt;p&gt;和以太网有关（366）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/VSG3L6J3&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4dsZPHsN/20250710141547.jpg&#34; alt=&#34;20250710141547.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调用它，就可以把 EXTI 的配置都清除，恢复成上电默认的状态（158）&lt;/p&gt;
&lt;p&gt;调用这个函数，就可以这个结构体里的参数配置 EXIT 外设，初始化 EXTI 主要用的就是这个函数（159）&lt;/p&gt;
&lt;p&gt;调用这个函数，可以把参数传递的结构体变量赋一个默认值（160）&lt;/p&gt;
&lt;p&gt;用来软件触发外部中断，调用这个函数，参数给一个指定的中断线，就能软件触发一次这个外部中断（161）&lt;/p&gt;
&lt;p&gt;库函数的模板函数，因为在外设运行的过程中，会产生一些状态标志位（162、163、164、165）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Ln1sGJyQ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sDnZQS5z/20250710143646.jpg&#34; alt=&#34;20250710143646.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中断分组，参数是中断分组的方式（196）&lt;/p&gt;
&lt;p&gt;根据结构体里面指定的参数初始化 NVIC（197）&lt;/p&gt;
&lt;p&gt;设置中断向量表（198）&lt;/p&gt;
&lt;p&gt;系统低功耗配置（199）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/zLcQKGnK&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HxYCGJnZ/20250710152332.jpg&#34; alt=&#34;20250710152332.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/TyhpPtdQ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/43QtB0rC/20250710153825.jpg&#34; alt=&#34;20250710153825.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在中断函数里，一般都是先进行一个中断标志位的判断，确保是我们想要的中断源触发的这个函数，因为这个函数 EXTI10 到 EXTI15 都能进来，所以要先判断一下是不是我们想要的&lt;/p&gt;
&lt;p&gt;最后，中断程序结束后，一定要再调用一下清除中断标志位的函数，因为只有中断标志 1 了，程序就会跳转到中断函数，如果不清除中断标志位，那它就会一直申请中断&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/GTRLvKCW&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MHMn23rp/20250710153908.jpg&#34; alt=&#34;20250710153908.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/gnYcJg4R&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9F9DLS7x/20250710153935.jpg&#34; alt=&#34;20250710153935.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行后，遮挡的时候数字加 1&lt;/p&gt;
&lt;h3 id=&#34;旋转编码器计次&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#旋转编码器计次&#34;&gt;#&lt;/a&gt; 旋转编码器计次&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/k6QRbwZS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/XJhftzks/5-2.jpg&#34; alt=&#34;5-2.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;再 Hardware 中同上面几个步骤一样，添加名为 Encoder 的.c 和.h 文件&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Fds9sZjG&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cHf6hk6q/20250710163854.jpg&#34; alt=&#34;20250710163854.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PLHX0hJg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/JhDsDzLz/20250710163914.jpg&#34; alt=&#34;20250710163914.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/G82C1pC5&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fL7Tm3gD/20250710163929.jpg&#34; alt=&#34;20250710163929.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t1BKDHxt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zBNqzzDM/20250710164114.jpg&#34; alt=&#34;20250710164114.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/XXCPB5Qg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gcSb5qh1/20250710164146.jpg&#34; alt=&#34;20250710164146.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，向右转，数字增加，向左转，数字减小&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中断编程的建议：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在这个中断函数里，最好不要执行耗时过长的代码，中断函数要简短快速，因为中断是处理突发的事情&lt;/li&gt;
&lt;li&gt;最好不要在中断函数和主函数调用相同的函数或者操作同一个硬件，尤其是硬件相关的函数&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;tim定时中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim定时中断&#34;&gt;#&lt;/a&gt; TIM 定时中断&lt;/h1&gt;
&lt;p&gt;** 计时器：**STM32 中功能最强大、结构最复杂的一个外设&lt;/p&gt;
&lt;h3 id=&#34;tim简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim简介&#34;&gt;#&lt;/a&gt; TIM 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;TIM（Timer）定时器&lt;/li&gt;
&lt;li&gt;定时器可以对输入的时钟进行计数，并在计数值达到设定值时触发中断（定时器的基本功能）&lt;/li&gt;
&lt;li&gt;16 位计数器、预分频器、自动重装寄存器的时基单元，在 72MHz 计数时钟下可以实现最大 59.65s 的定时&lt;/li&gt;
&lt;li&gt;不仅具备基本的定时中断功能，而且还包含内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等多种功能&lt;/li&gt;
&lt;li&gt;根据复杂度和应用场景分为了高级定时器、通用定时器、基本定时器三种类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;定时器类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器类型&#34;&gt;#&lt;/a&gt; 定时器类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;编号&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;总线&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;高级定时器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TIM1、TIM8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;APB2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;拥有通用定时器全部功能，并额外具有重复计数器、死区生成、互补输出、刹车输入等功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通用定时器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TIM2、TIM3、TIM4、TIM5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;APB1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;拥有基本定时器全部功能，并额外具有内外时钟源选择、输入捕获、输出比较、编码器接口、主从触发模式等功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;基本定时器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;TIM6、TIM7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;APB1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;拥有定时中断、主模式触发 DAC 的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这三种定时器是由高级到低级向下兼容的&lt;/p&gt;
&lt;p&gt;STM32F103C8T6 定时器资源：TIM1、TIM2、TIM3、TIM4&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本定时器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/jC5mpDbr&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/NG7trXCL/2.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自动重装载寄存器、PSC 预分频器和 CNT 计数器这一块电路叫做时基单元&lt;/p&gt;
&lt;p&gt;图中向上的折线箭头，就代表这里会产生中断信号，像这种计数值等于自动重装值产生的中断，我们一般把它叫做 “更新中断”&lt;/p&gt;
&lt;p&gt;图中向下的折线箭头，代表的是会产生一个事件，这里对应的事件就叫做 “更新事件”，更新事件不会触发中断，但可以触发电路内部其他电路的工作&lt;/p&gt;
&lt;p&gt;** 主模式触发 DAC 的功能  ：** 它能让内部的硬件在不受程序的控制下实现自动运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通用定时器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SXbj502w&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fbJXVDwT/3.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高级定时器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ZChb4PKd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sDMvPKkw/3.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;定时中断基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时中断基本结构&#34;&gt;#&lt;/a&gt; 定时中断基本结构&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/1VVLL3dS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yWsHKbY/20250711102923.jpg&#34; alt=&#34;20250711102923.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;预分频器时序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预分频器时序&#34;&gt;#&lt;/a&gt; 预分频器时序&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/RJ0cF3mr&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/rs1gfWYp/4.png&#34; alt=&#34;4.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;**CK_PSC：** 预分频器的输入时钟，选内部时钟的话一般是 72MHz&lt;/p&gt;
&lt;p&gt;**CNT_EN:** 计数器使能，高电平计数器正常运行，低电平计算器停止&lt;/p&gt;
&lt;p&gt;**CK_CNT：** 计数器时钟&lt;/p&gt;
&lt;p&gt;** 计数器计数频率：**CK_CNT = CK_PSC / (PSC + 1)&lt;/p&gt;
&lt;h3 id=&#34;计数器时序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计数器时序&#34;&gt;#&lt;/a&gt; 计数器时序&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CB9FZXTF&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HnkjN167/5.png&#34; alt=&#34;5.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;** 计数器溢出频率：**CK_CNT_OV = CK_CNT / (ARR + 1)&lt;/p&gt;
&lt;p&gt;​     = CK_PSC / (PSC + 1) / (ARR + 1)&lt;/p&gt;
&lt;h1 id=&#34;定时器定时中断定时器外部时钟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器定时中断定时器外部时钟&#34;&gt;#&lt;/a&gt; 定时器定时中断 &amp;amp; 定时器外部时钟&lt;/h1&gt;
&lt;h3 id=&#34;定时器定时中断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器定时中断&#34;&gt;#&lt;/a&gt; 定时器定时中断&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/8fFxvzd3&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sxKztBMV/6-1.jpg&#34; alt=&#34;6-1.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我们任然需要建立.c 和.h 文件（在 System 文件中，命名为 Timer）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/21BvtRTD&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/K80NRmMR/20250711113917.jpg&#34; alt=&#34;20250711113917.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;恢复缺省配置 (1054)&lt;/p&gt;
&lt;p&gt;时基单元初始化，第一个参数，选择某个定时器；第二个参数，结构体，里面包含了配置时基单元的一些参数 (1055)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/56DQLKJk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Jzz3wS2m/20250711114212.jpg&#34; alt=&#34;20250711114212.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个函数可以把结构体变量赋一个默认值&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PvYscqLD&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yFfY7sW/20250711114940.jpg&#34; alt=&#34;20250711114940.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用来使能计数器，它有两个参数，第一个 TIMx 选择定时器，第二个 NewState 新的状态，也就是使能还是失能，使能，计数器就可以运行，失能，计数器就不运行&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/2VrKmGMM&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/pXFbf1ZW/20250711115548.jpg&#34; alt=&#34;20250711115548.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个是用来使能中断输出信号的，第一个 TIMx 选择定时器，第二个 TIM_IT，选择要配置那个中断输出，第三个 NewState 新的状态，使能还是失能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时钟源选择：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Xr2Wr8P1&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DzhwYpPh/20250711144014.jpg&#34; alt=&#34;20250711144014.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择内部时钟 (1073)&lt;/p&gt;
&lt;p&gt;选择 ITRx 其他定时器的时钟，参数 InputTriggerSource，选择要接入那个其他的定时器 (1074)&lt;/p&gt;
&lt;p&gt;选择 TIx 捕获通道的时钟 (1075)，参数 TIxExternalCLKSource，选择 TIx 具体的某个引脚，ICPolarity 和 ICFilter，输入的极性和滤波器&lt;/p&gt;
&lt;p&gt;选择 ETR 通过外部时钟模式 1 输入的时钟，参数 ExtTRGPrescaler，外部触发预分频器，这里可以对 ETR 的外部时钟再提前做一个分频 (1077)&lt;/p&gt;
&lt;p&gt;选择 ETR 通过外部时钟模式 2 输入的时钟 (1079)&lt;/p&gt;
&lt;p&gt;单独用来配置 ETR 引脚的预分频器、极性、滤波器这些参数的 (1081)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/BtcHdLkQ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DfR641cs/20250711145241.jpg&#34; alt=&#34;20250711145241.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用来单独写预分频值，参数，Prescaler，就是要写入的预分频值，PSCReloadMode，写入的模式（预分频器有一个缓冲器，写入的值是在更新事件发生后才有效的），可以选择是听从安排，在更新事件生效，或者是，在写入后，手动产生一个更新事件，让这个值立即生效 (1083)&lt;/p&gt;
&lt;p&gt;用来改变计数器的计数模式，参数，CounterMode，选择新的计数模式 (1084)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/p9RtcSFd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9fqF05Xy/20250711145522.jpg&#34; alt=&#34;20250711145522.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;自动重装器预装功能配置&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/tZ8Sw1Mz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RhZk3K12/20250711145807.jpg&#34; alt=&#34;20250711145807.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给计数器写入一个值 (1125)&lt;/p&gt;
&lt;p&gt;给自动重装器写入一个值 (1126)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SXkfX6w5&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/VNbGV44Y/20250711150843.jpg&#34; alt=&#34;20250711150843.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;获取当前计数器的值，返回值就是当前计数器的值 (1140)&lt;/p&gt;
&lt;p&gt;获取当前的预分频器的值 (1141)&lt;/p&gt;
&lt;p&gt;获取标志位和清除标志位 (1142~1145)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;跨越不同文件的变量的解决方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果你想跨文件使用变量，可以在使用变量那个文件的上面，用 extern 申明一下要用的变量&lt;/p&gt;
&lt;p&gt;extern 申明变量，就是告诉编译器，我现在有 Num 这个变量，它在别的文件里定义了，编译器就会自己找到其所在的位置，找到之后，它就会把这个 extern 申明的变量，当作被找到的文件的一个引用&lt;/p&gt;
&lt;p&gt;注意：这个过程并没有定义新的变量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直接把这个中断函数复制一下，放在主函数后面&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bsw2DzNz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/kXxNH40t/20250711161821.jpg&#34; alt=&#34;20250711161821.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/0MjLKM3Y&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k4v9ZWvp/20250711161838.jpg&#34; alt=&#34;20250711161838.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/jnN3yzh7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/BbwW9pLM/20250711161851.jpg&#34; alt=&#34;20250711161851.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WhLHTH26&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZKCtPG2g/20250711161911.jpg&#34; alt=&#34;20250711161911.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，Num 的值就正在执行每秒 + 1 的操作&lt;/p&gt;
&lt;h3 id=&#34;定时器外部时钟&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#定时器外部时钟&#34;&gt;#&lt;/a&gt; 定时器外部时钟&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/V5rXDsPD&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fW55Wk2n/6-2.jpg&#34; alt=&#34;6-2.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Z0KQwMTw&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fWxhTG1Q/20250711164621.jpg&#34; alt=&#34;20250711164621.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/w1hFqXqt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7ZRRN9jN/20250711165411.jpg&#34; alt=&#34;20250711165411.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/d7w6Lh35&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/bv2BVbhf/20250711164807.jpg&#34; alt=&#34;20250711164807.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CdzNBTMp&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/T2cHsfZ1/20250711164824.jpg&#34; alt=&#34;20250711164824.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，当当光片挡一下，CNT 加 1，加到 9 后，自动清 0，同时申请中断，Num++&lt;/p&gt;
&lt;h1 id=&#34;tim输出比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim输出比较&#34;&gt;#&lt;/a&gt; TIM 输出比较&lt;/h1&gt;
&lt;p&gt;** 输出比较功能：** 主要是用来输出 PWM 波形的，PWM 波形又是驱动电机的必要条件&lt;/p&gt;
&lt;h3 id=&#34;输出比较简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出比较简介&#34;&gt;#&lt;/a&gt; 输出比较简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;OC（Output Compare）输出比较&lt;/li&gt;
&lt;li&gt;输出比较可以通过比较 CNT 与 CCR 寄存器值的关系，来对输出电平进行置 1、置 0 或翻转的操作，用于输出一定频率和占空比的 PWM 波形&lt;/li&gt;
&lt;li&gt;每个高级定时器和通用定时器都拥有 4 个输出比较通道&lt;/li&gt;
&lt;li&gt;高级定时器的前 3 个通道额外拥有死区生成和互补输出的功能&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;pwm简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm简介&#34;&gt;#&lt;/a&gt; PWM 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;PWM（Pulse Width Modulation）脉冲宽度调制&lt;/p&gt;
&lt;p&gt;PWM 波形是一个数字输出信号，意思由高低电平组成的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在具有惯性的系统中，可以通过对一系列脉冲的宽度进行调制，来等效地获得所需要的模拟参量，常应用于电机控速等领域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PWM 参数：&lt;/p&gt;
&lt;p&gt;频率 = 1 / Ts     占空比 = Ton / Ts     分辨率 = 占空比变化步距&lt;/p&gt;
&lt;p&gt;Ton 在这里是高电平的时间     Ts 是一个周期的时间&lt;/p&gt;
&lt;p&gt;占空比决定了 PWM 等效出来的模拟电压的大小，占空比越大，等效的模拟电压就越趋近于高电平，占空比越小，等效的模拟电压就越趋近于低电平，这个等效关系一般来说是线型的&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 PWM 波形，就可以在数字系统等效输出模拟量，就能实现 LED 控制亮度、电机控速等功能&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/23MmZZvj&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/kXX5LNgS/1.jpg&#34; alt=&#34;1.jpg&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://postimg.cc/s1QCsgLk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/xjgfGk31/2.jpg&#34; alt=&#34;2.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出比较通道 (通用)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/MMX7g49S&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/nzG39f7C/3.png&#34; alt=&#34;3.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输出比较通道 (高级)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/dZ0xh3WM&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Bb59w1Hv/1.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中 REF 信号（参考信号）实际上就是指这里信号的高低电平&lt;/p&gt;
&lt;p&gt;到图中三角形部分，就是极性选择，就是选择是不是要把高低电平反转一下&lt;/p&gt;
&lt;h3 id=&#34;输出比较模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出比较模式&#34;&gt;#&lt;/a&gt; 输出比较模式&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;模式&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;冻结&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT=CCR 时，REF 保持为原状态  （即 CNT 和 CCR 无效）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;匹配时置有效电平&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT=CCR 时，REF 置有效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;匹配时置无效电平&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT=CCR 时，REF 置无效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;匹配时电平翻转&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT=CCR 时，REF 电平翻转&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;强制为无效电平&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT 与 CCR 无效，REF 强制为无效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;强制为有效电平&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CNT 与 CCR 无效，REF 强制为有效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PWM 模式 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;向上计数：CNT&amp;lt;CCR 时，REF 置有效电平，CNT≥CCR 时，REF 置无效电平  向下计数：CNT&amp;gt;CCR 时，REF 置无效电平，CNT≤CCR 时，REF 置有效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PWM 模式 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;向上计数：CNT&amp;lt;CCR 时，REF 置无效电平，CNT≥CCR 时，REF 置有效电平  向下计数：CNT&amp;gt;CCR 时，REF 置有效电平，CNT≤CCR 时，REF 置无效电平&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参数计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参数计算&#34;&gt;#&lt;/a&gt; 参数计算&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;PWM 频率：&lt;/strong&gt; Freq = CK_PSC / (PSC + 1) / (ARR + 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM 占空比：&lt;/strong&gt; Duty = CCR / (ARR + 1)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PWM 分辨率：&lt;/strong&gt; Reso = 1 / (ARR + 1)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;舵机简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#舵机简介&#34;&gt;#&lt;/a&gt; 舵机简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;舵机是一种根据输入 PWM 信号占空比来控制输出角度的装置&lt;/li&gt;
&lt;li&gt;** 输入 PWM 信号要求：** 周期为 20ms（即 50Hz），高电平宽度为 0.5ms~2.5ms&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;直流电机及驱动简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直流电机及驱动简介&#34;&gt;#&lt;/a&gt; 直流电机及驱动简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;直流电机是一种将电能转换为机械能的装置，有两个电极，当电极正接时，电机正转，当电极反接时，电机反转&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;直流电机属于大功率器件，GPIO 口无法直接驱动，需要配合电机驱动电路来操作&lt;/p&gt;
&lt;p&gt;电机这类器件基本都属于大功率设备，必须要加驱动电路才能控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TB6612 是一款双路 H 桥型的直流电机驱动芯片，可以驱动两个直流电机并且控制其转速和方向&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;pwm驱动led呼吸灯pwm驱动舵机pwm驱动直流电机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm驱动led呼吸灯pwm驱动舵机pwm驱动直流电机&#34;&gt;#&lt;/a&gt; PWM 驱动 LED 呼吸灯 &amp;amp; PWM 驱动舵机 &amp;amp; PWM 驱动直流电机&lt;/h1&gt;
&lt;h3 id=&#34;pwm驱动led呼吸灯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm驱动led呼吸灯&#34;&gt;#&lt;/a&gt; PWM 驱动 LED 呼吸灯&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/tYJmN197&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/15rhP6T0/6-3-PWM-LED.jpg&#34; alt=&#34;6-3-PWM-LED.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;同上几个步骤一样，建立.c 和.h 文件（在 Hardware 文件中，命名为 PWM）&lt;/p&gt;
&lt;p&gt;接下来，打通模块，就可以输出 PWM&lt;/p&gt;
&lt;p&gt;具体步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PCC 开启时钟，把我们要用的 TIM 外设和 GPIO 外设的时钟打开&lt;/li&gt;
&lt;li&gt;配置时基单元&lt;/li&gt;
&lt;li&gt;配置输出比较单元&lt;/li&gt;
&lt;li&gt;配置 GPIO，把 PWM 对应的 GPIO 口，初始化为复用推挽输出的配置&lt;/li&gt;
&lt;li&gt;运行控制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/dLQDHYfh&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/GhGYp3Jx/20250712101521.jpg&#34; alt=&#34;20250712101521.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置输出比较模块&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/XG0YwSF7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/NMK2vQjT/20250712101706.jpg&#34; alt=&#34;20250712101706.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;给输出比较结构体赋一个默认值&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/8sZTCryC&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/m2sk8YC7/20250712102140.jpg&#34; alt=&#34;20250712102140.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配置强制输出模式（如果你在运行中想要暂停波形并且强制输出高或低电平，可以用）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t7wmDqJ5&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/X7YSjX0T/20250712103848.jpg&#34; alt=&#34;20250712103848.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用来配置 CCR 寄存器的&lt;strong&gt;预装功能&lt;/strong&gt;（即影子寄存器）（1096~1099）&lt;/p&gt;
&lt;p&gt;用来快速配置使能（1100~1103）&lt;/p&gt;
&lt;p&gt;外部事件时清除 REF 信号（1104~1107）&lt;/p&gt;
&lt;p&gt;用来单独设置输出比较的极性，这里带 N 的就是高级定时器里互补通道的配置，OC4 没有互补通道（1108~1114）&lt;/p&gt;
&lt;p&gt;一般来说，结构体里的参数，都会有一个单独的函数可以进行更改&lt;/p&gt;
&lt;p&gt;用来单独修改使能参数（1115、1116）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/R3SPqqpM&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/PqZ03wm8/20250712104226.jpg&#34; alt=&#34;20250712104226.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;选择输出比较模式，用来单独更改输出比较模式的函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/qzHxzzg9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Nf5JCXtf/20250712104508.jpg&#34; alt=&#34;20250712104508.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用来单独更改 CCR 寄存器值的函数&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/N9pLYC9s&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yTc6rX9/20250712105029.jpg&#34; alt=&#34;20250712105029.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;仅高级定时器使用，在使用高级定时器输出 PWM 时，需要调用这个函数，使能主输出，否则 PWM 将不能正常输出&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/D8BPfGY5&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/3xHSBCjM/20250712113738.jpg&#34; alt=&#34;20250712113738.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/RWhQW0km&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/dVmWSknh/20250712114100.jpg&#34; alt=&#34;20250712114100.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SnPLCh4M&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MG6sk6rd/20250712114221.jpg&#34; alt=&#34;20250712114221.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，LED 点亮，并以 1kHz 的频率闪烁&lt;/p&gt;
&lt;p&gt;实现呼吸灯效果&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/RJKcZXMq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vTSXXNk7/20250714090551.jpg&#34; alt=&#34;20250714090551.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/N586hJJz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zX60g4n8/20250714090617.jpg&#34; alt=&#34;20250714090617.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/gxYvGV1k&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/FHSGgGZc/20250714090700.jpg&#34; alt=&#34;20250714090700.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，LED 不断变亮变暗，呈现了呼吸灯的效果&lt;/p&gt;
&lt;p&gt;重映射：更改复用的引脚&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/nMD5mxr9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/c19NV4Nh/20250714092730.jpg&#34; alt=&#34;20250714092730.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;pwm驱动舵机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm驱动舵机&#34;&gt;#&lt;/a&gt; PWM 驱动舵机&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/r06GXBk7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k4GT8ChM/6-4-PWM.jpg&#34; alt=&#34;6-4-PWM.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;编写代码&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CZydFDv6&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGvm11Vg/20250714101529.jpg&#34; alt=&#34;20250714101529.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PCDrFJtb&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/8zKJcf9Y/20250714101601.jpg&#34; alt=&#34;20250714101601.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/7GHH6NSX&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k48BT1Gr/20250714101619.jpg&#34; alt=&#34;20250714101619.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/30W3jJSv&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cCB6SvfX/20250714101659.jpg&#34; alt=&#34;20250714101659.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，舵机就移动到 0 度的位置了（如果我们稍微扳一下输出轴，可以感觉有一股力在维持它现在的位置）&lt;/p&gt;
&lt;p&gt;在 Hardware 中添加.c 和.h 文件，命名为 Servo&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/d7tdMGLP&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vm5vVzyB/20250714111222.jpg&#34; alt=&#34;20250714111222.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/9wTwPpNT&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Hnv0gvwS/20250714111330.jpg&#34; alt=&#34;20250714111330.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/RqntzSVF&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RCgLKhkc/20250714111602.jpg&#34; alt=&#34;20250714111602.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bsx2smnf&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wTP54PTM/20250714111706.jpg&#34; alt=&#34;20250714111706.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行之后，可以看到舵机的角度，每按一下，加 30 度&lt;/p&gt;
&lt;h3 id=&#34;pwm驱动直流电机&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwm驱动直流电机&#34;&gt;#&lt;/a&gt; PWM 驱动直流电机&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/w7gjbg1n&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vH6xTmb8/6-5-PWM.jpg&#34; alt=&#34;6-5-PWM.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Hardware 中添加.c 和.h 文件，命名为 Motor&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/K4PV0hXk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wxZpT90V/20250715091729.jpg&#34; alt=&#34;20250715091729.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/mtTnqpRd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/m29GPKnG/20250715091743.jpg&#34; alt=&#34;20250715091743.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/G4253B4G&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g2qFD8dS/20250715091754.jpg&#34; alt=&#34;20250715091754.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，我们可以看到电机已经转起来了&lt;/p&gt;
&lt;p&gt;同时，现在可以发现一个问题，就是这个电机会发出蜂鸣器的响声（是正常现象），如果想避免，可以加大 PWM 频率&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/6712smDC&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zBqnhm72/20250715093538.jpg&#34; alt=&#34;20250715093538.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，按下按键，OLED 上速度变量变化，同时电机也转起来了&lt;/p&gt;
&lt;h1 id=&#34;tim输入捕获&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim输入捕获&#34;&gt;#&lt;/a&gt; TIM 输入捕获&lt;/h1&gt;
&lt;h3 id=&#34;输入捕获简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入捕获简介&#34;&gt;#&lt;/a&gt; 输入捕获简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;IC（Input Capture）输入捕获&lt;/li&gt;
&lt;li&gt;输入捕获模式下，当通道输入引脚出现指定电平跳变时，当前 CNT 的值将被锁存到 CCR 中，可用于测量 PWM 波形的频率、占空比、脉冲间隔、电平持续时间等参数&lt;/li&gt;
&lt;li&gt;每个高级定时器和通用定时器都拥有 4 个输入捕获通道&lt;/li&gt;
&lt;li&gt;可配置为 PWMI 模式，同时测量频率和占空比&lt;/li&gt;
&lt;li&gt;可配合主从触发模式，实现硬件全自动测量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;频率测量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#频率测量&#34;&gt;#&lt;/a&gt; 频率测量&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/gLyv3P03&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/8c9tQpQX/20250715101323.jpg&#34; alt=&#34;20250715101323.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;** 测频法（测高频）：** 在闸门时间 T 内，对上升沿计次，得到 N，则频率&lt;/p&gt;
&lt;p&gt;f_x=N / T&lt;/p&gt;
&lt;p&gt;T 通常设置为一秒&lt;/p&gt;
&lt;p&gt;** 测周法（测低频）：** 两个上升沿内，以标准频率 fc 计次，得到 N ，则频率&lt;/p&gt;
&lt;p&gt;f_x=f_c / N&lt;/p&gt;
&lt;p&gt;** 中界频率：** 测频法与测周法误差相等的频率点&lt;/p&gt;
&lt;p&gt;f_m=√(f_c / T)&lt;/p&gt;
&lt;h3 id=&#34;输入捕获通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入捕获通道&#34;&gt;#&lt;/a&gt; 输入捕获通道&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CzkFHxY3&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/15YfS8d3/1.png&#34; alt=&#34;1.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;主从触发模式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#主从触发模式&#34;&gt;#&lt;/a&gt; 主从触发模式&lt;/h3&gt;
&lt;p&gt;就是主模式、从模式和触发源选择这三个功能的选择&lt;/p&gt;
&lt;p&gt;** 主模式：** 可以将定时器内部的信号，映射到 TRGO 引脚，用于触发别的外设&lt;/p&gt;
&lt;p&gt;** 从模式：** 就是接收其他外设或者自身外设的一些信号，用于控制自身定时器的运行，也接收被别的信号控制&lt;/p&gt;
&lt;p&gt;复位模式（是从模式的一部分）：选中的触发输入（TRGI）的上升沿重新初始化计数器，并且产生一个更新寄存器的信号&lt;/p&gt;
&lt;p&gt;** 触发源选择：** 接收选择从模式的触发信号源的，可以认为它是从模式的一部分，选择一个指定的信号，得到 TRGI，TRGI 去触发从模式&lt;/p&gt;
&lt;h1 id=&#34;输入捕获模式测频率pwmi模式测频率占空比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入捕获模式测频率pwmi模式测频率占空比&#34;&gt;#&lt;/a&gt; 输入捕获模式测频率 &amp;amp; PWMI 模式测频率占空比&lt;/h1&gt;
&lt;h3 id=&#34;输入捕获模式测频率&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入捕获模式测频率&#34;&gt;#&lt;/a&gt; 输入捕获模式测频率&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/6yJh1MJ8&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZK0DnQwx/6-6.jpg&#34; alt=&#34;6-6.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Hardware 中添加.c 和.h 文件，命名为 IC&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;RCC 开启时钟，把 GPIO 和 TIM 的时钟打开&lt;/li&gt;
&lt;li&gt;GPIO 初始化，把 GPIO 配置成输入模式，一般选择上拉输入或者浮空输入模式&lt;/li&gt;
&lt;li&gt;配置时基单元，让 CNT 计数器在内部时钟的驱动下自增运行&lt;/li&gt;
&lt;li&gt;配置输入捕获单元，包括滤波器、极性、直连通道还是交叉通道、分频器这些参数，用一个结构体就可以统一进行配置了&lt;/li&gt;
&lt;li&gt;选择从模式的触发源&lt;/li&gt;
&lt;li&gt;选择触发之后执行的操作，执行 Reset 操作&lt;/li&gt;
&lt;li&gt;最后，调用 TIM_Cmd 函数，开启定时器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;** 注意：** 滤波器和分频器的区别，滤波器记次，并不会改变信号的原有频率，一般滤波器的采样频率都会高于信号频率，所以它只会滤除高频噪声，使信号更平滑；分频器就是对信号本身进行记次，会改变频率&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/xXsVrnNC&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/q7rJ37k8/20250715151340.jpg&#34; alt=&#34;20250715151340.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/D8F988q0&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YqmMDF06/20250715151442.jpg&#34; alt=&#34;20250715151442.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Czcw0jWS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9Qh0GbbR/20250715151504.jpg&#34; alt=&#34;20250715151504.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/mPhBgPsM&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/mgyDV9pd/20250715151527.jpg&#34; alt=&#34;20250715151527.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，可以测量到频率&lt;/p&gt;
&lt;h3 id=&#34;pwmi模式测频率占空比&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwmi模式测频率占空比&#34;&gt;#&lt;/a&gt; PWMI 模式测频率占空比&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/6yJh1MJ8&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZK0DnQwx/6-6.jpg&#34; alt=&#34;6-6.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/R3VDxZWY&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KYnSLKxm/20250715161643.jpg&#34; alt=&#34;20250715161643.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/67mYsLJ7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wv6Pm0wk/20250715161701.jpg&#34; alt=&#34;20250715161701.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/0z5fbH9M&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/x1MFpW7R/20250715161726.jpg&#34; alt=&#34;20250715161726.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/0ztCmdNt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1zS7kv1Z/20250715161748.jpg&#34; alt=&#34;20250715161748.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;目前测量结果，频率 1000Hz, 占空比 50%&lt;/p&gt;
&lt;h1 id=&#34;tim编码器接口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#tim编码器接口&#34;&gt;#&lt;/a&gt; TIM 编码器接口&lt;/h1&gt;
&lt;h3 id=&#34;编码器接口简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码器接口简介&#34;&gt;#&lt;/a&gt; 编码器接口简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Encoder Interface 编码器接口&lt;/li&gt;
&lt;li&gt;编码器接口可接收增量（正交）编码器的信号，根据编码器旋转产生的正交信号脉冲，自动控制 CNT 自增或自减，从而指示编码器的位置、旋转方向和旋转速度&lt;/li&gt;
&lt;li&gt;每个高级定时器和通用定时器都拥有 1 个编码器接口&lt;/li&gt;
&lt;li&gt;两个输入引脚借用了输入捕获的通道 1 和通道 2&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;正交编码器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正交编码器&#34;&gt;#&lt;/a&gt; 正交编码器&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;正转：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/t1mTb74v&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/xC9bKzDQ/20250715164257.jpg&#34; alt=&#34;20250715164257.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;边沿&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;另一相状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相↑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相↓&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相↑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相↓&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;反转：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/3kmV7qrs&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cLbS7qpL/20250715164501.jpg&#34; alt=&#34;20250715164501.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;边沿&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;另一相状态&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相↑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相↓&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相↑&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相低电平&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B 相↓&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;A 相高电平&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;编码器接口基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码器接口基本结构&#34;&gt;#&lt;/a&gt; 编码器接口基本结构&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/k6T5ncvm&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0jsK0X6b/20250715165035.jpg&#34; alt=&#34;20250715165035.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;编码器接口测速&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编码器接口测速&#34;&gt;#&lt;/a&gt; 编码器接口测速&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;接线图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Lq05bybG&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/V6zt5pBs/6-8.jpg&#34; alt=&#34;6-8.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Hardware 中添加.c 和.h 文件，命名为 Encoder&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Z0g3RLJT&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/m2ZSmdqF/20250716095957.jpg&#34; alt=&#34;20250716095957.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/751TK806&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RZyQVv0c/20250716100432.jpg&#34; alt=&#34;20250716100432.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/3yK06SFZ&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/tg6ds818/20250716100750.jpg&#34; alt=&#34;20250716100750.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/D4bSst77&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5ys8cVGQ/20250716102308.jpg&#34; alt=&#34;20250716102308.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，目前显示 CNT 是 0，向右转一下编码器，可以看到值变化（增加），往左转，CNT 自减&lt;/p&gt;
&lt;p&gt;在.c 文件后面加上&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/yWVBRqYj&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/v8nmpMJJ/20250716103905.jpg&#34; alt=&#34;20250716103905.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PNrsxm2F&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/44pJWPtZ/20250716104004.jpg&#34; alt=&#34;20250716104004.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，目前 CNT 的值就代表速度，单位是脉冲个数 /s, 向右慢速转，速度是正数，比较小，快速转，正数比较大，向左慢速转，速度负数。比较小，快速转，负数比较大&lt;/p&gt;
&lt;p&gt;如果主程序中没有其他东西的话，可以使用 Delay 函数，但是如果有其他东西的话，最好就不要在主函数加入过长的 Delay, 这样会阻塞主循环的执行，可以用定时中断&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/NKwLZJkz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YCvgGTGM/20250716110011.jpg&#34; alt=&#34;20250716110011.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;运行，向右旋转，正的速度；向左旋转，负的速度；停止速度为 0&lt;/p&gt;
&lt;h1 id=&#34;adc模数转换器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc模数转换器&#34;&gt;#&lt;/a&gt; ADC 模数转换器&lt;/h1&gt;
&lt;h3 id=&#34;adc简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc简介&#34;&gt;#&lt;/a&gt; ADC 简介&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;ADC（Analog-Digital Converter）模拟 - 数字转换器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ADC 可以将引脚上连续变化的模拟电压转换为内存中存储的数字变量，建立模拟电路到数字电路的桥梁&lt;/p&gt;
&lt;p&gt;** 注：** 数字到模拟的桥梁 ----DAC，数字模拟转换器，使用 DAC 就可以将数字变量转换为模拟电压，同时，PWM 也可以实现数字到模电的转变，但是 PWM 只有完全导通和完全断开两种状态，在这两种状态下都没有功率损耗，所以在直流电机调速这种大功率的应用场景，使用 PWM 来等效模拟量，是比 DAC 更好的选择，并且 PWM 电路更加简单，更加常用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;12 位逐次逼近型 ADC，1us 转换时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;** 输入电压范围：**0&lt;sub&gt;3.3V，** 转换结果范围：**0&lt;/sub&gt;4095&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;18 个输入通道，可测量 16 个外部和 2 个内部信号源&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;规则组和注入组两个转换单元&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;模拟看门狗自动监测输入电压范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;STM32F103C8T6 **ADC 资源：**ADC1、ADC2，10 个外部输入通道&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;逐次逼近型adc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逐次逼近型adc&#34;&gt;#&lt;/a&gt; 逐次逼近型 ADC&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WFGLx8ps&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/j59xw3Gn/1.jpg&#34; alt=&#34;1.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;stm32adc框图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stm32adc框图&#34;&gt;#&lt;/a&gt; STM32ADC 框图&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/4YPXYTYk&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MG2Hr6xT/2.png&#34; alt=&#34;2.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;adc基本结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#adc基本结构&#34;&gt;#&lt;/a&gt; ADC 基本结构&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Q9bzbXrh&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/j20rR5gw/20250716145442.jpg&#34; alt=&#34;20250716145442.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;输入通道&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入通道&#34;&gt;#&lt;/a&gt; 输入通道&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;通道&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;ADC1&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;ADC2&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;strong&gt;ADC3&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PF6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PF7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PF8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PA7&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PF9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PB0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PB0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PF10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PB1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PB1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 11&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 12&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 13&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 14&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 15&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;PC5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 16&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;温度传感器&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;通道 17&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;内部参考电压&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html</guid>
            <title>Python</title>
            <link>https://151064.xyz/%E4%BA%86%E8%A7%A3Python(%E5%AD%A6%E4%B9%A0%E5%A4%A7%E7%BA%B2).html</link>
            <pubDate>Thu, 24 Apr 2025 23:46:37 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;第一章-python基础编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-python基础编程&#34;&gt;#&lt;/a&gt; 第一章 Python 基础编程&lt;/h1&gt;
&lt;h2 id=&#34;1-1-python开发环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-1-python开发环境搭建&#34;&gt;#&lt;/a&gt; 1-1 python 开发环境搭建&lt;/h2&gt;
&lt;h4 id=&#34;了解python学习大纲&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#了解python学习大纲&#34;&gt;#&lt;/a&gt; 了解 Python (学习大纲)&lt;/h4&gt;
&lt;p&gt;Pyhton: 互联网应用开发&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;p&gt;（1）输入输出：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输入：用户输入处理&lt;/li&gt;
&lt;li&gt;输出：数据格式话输出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（2）变量：定义与使用&lt;/p&gt;
&lt;p&gt;（3）注释：多行与单行&lt;/p&gt;
&lt;p&gt;（4）Bug 处理：异常处理&lt;/p&gt;
&lt;p&gt;（5）格式化输出：用 format 函数&lt;/p&gt;
&lt;h4 id=&#34;python概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python概述&#34;&gt;#&lt;/a&gt; Python 概述&lt;/h4&gt;
&lt;p&gt;应用场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动化运维和测试&lt;/li&gt;
&lt;li&gt;数据清洗和分析&lt;/li&gt;
&lt;li&gt;人工智能和大数据处理&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Python:33 个关键词，7 种基本数据类型&lt;/p&gt;
&lt;h4 id=&#34;计算机资源&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#计算机资源&#34;&gt;#&lt;/a&gt; 计算机资源&lt;/h4&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;软件：看得见摸不着&lt;/li&gt;
&lt;li&gt;硬件：看得见且摸得着&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;软硬件交互：桥梁是交互系统&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;计算机资源&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPython&lt;/td&gt;
&lt;td&gt;使用 C 语言开发&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPython&lt;/td&gt;
&lt;td&gt;基于 CPython，增加交互功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Jython&lt;/td&gt;
&lt;td&gt;用 Java 开发，将 Python 代码翻译成 Java 字节码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;python开发利器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python开发利器&#34;&gt;#&lt;/a&gt; Python 开发利器&lt;/h4&gt;
&lt;p&gt;Python 的开发利器：PyCharm&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project 管理&lt;/li&gt;
&lt;li&gt;智能提示&lt;/li&gt;
&lt;li&gt;语法高亮&lt;/li&gt;
&lt;li&gt;代码跳转&lt;/li&gt;
&lt;li&gt;调试代码&lt;/li&gt;
&lt;li&gt;解释代码（解释器）&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm创建入门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm创建入门&#34;&gt;#&lt;/a&gt; PyCharm 创建入门&lt;/h4&gt;
&lt;p&gt;创建项目【选择新建项目（a new project）】&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置路径至 D,E,F 盘 (避免 C 盘重装风险)&lt;/li&gt;
&lt;li&gt;命名项目&lt;/li&gt;
&lt;li&gt;选择环境，避免使用虚拟环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;创建 Python 文件:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击点击项目文件夹&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;新建 Python 文件&amp;quot;(python file)&lt;/li&gt;
&lt;li&gt;命名 (尽量不用中文)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;编写入门程序：使用单引号或双引号包围文本 (字符串)&lt;/p&gt;
&lt;p&gt;运行代码的方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标右键点击代码文件&lt;/li&gt;
&lt;li&gt;选择运行图标&lt;/li&gt;
&lt;li&gt;快捷键 “Ctrl+Shift+F10”&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm常见问题之解析器配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm常见问题之解析器配置&#34;&gt;#&lt;/a&gt; PyCharm 常见问题之解析器配置&lt;/h4&gt;
&lt;p&gt;遇到 Python 文件运行问题时，首先检查解析器配置&lt;/p&gt;
&lt;p&gt;通过 Python 的 &amp;quot;setting&amp;quot; 进行解析器的更换与配置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更换解析器流程：找到配置界面：find-setting&lt;/li&gt;
&lt;li&gt;选择 “a new project”（或类似命名的项目）&lt;/li&gt;
&lt;li&gt;进入 settings 查找配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置解析器：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择 “interpreter”&lt;/li&gt;
&lt;li&gt;引入所需 Python 版本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确认或更改路径:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点小齿轮图标&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;添加&amp;quot;&lt;/li&gt;
&lt;li&gt;选择 &amp;quot;已安装&amp;quot; 的 &amp;quot;Python.exe&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;python开发环境搭建&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python开发环境搭建&#34;&gt;#&lt;/a&gt; Python 开发环境搭建&lt;/h4&gt;
&lt;h4 id=&#34;pycharm软件本身设置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm软件本身设置&#34;&gt;#&lt;/a&gt; PyCharm 软件本身设置&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;软件主题（即软件外观）&lt;/p&gt;
&lt;p&gt;点击 file，再点击 settings&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/430kzRF9/1743519058605.png&#34; alt=&#34;1743519058605.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;选择第一个 Behavior, 再选择 Appearance&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SRsQfb6F/1743519220679.png&#34; alt=&#34;1743519220679.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;找到主题，选择界面&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Z5dNFdmc/1743519433836.png&#34; alt=&#34;1743519433836.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 设置字体与字号&lt;/p&gt;
&lt;p&gt;在 settings 中找到一个叫 editor 的选择，在选项中选择 font&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zDPv3GhF/1743519761773.png&#34; alt=&#34;1743519761773.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;size 代表字体的一个大小&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZqHmvwWy/1743519833063.png&#34; alt=&#34;1743519833063.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. 关闭项目&lt;/p&gt;
&lt;p&gt;点一下 fail 找到 close project，代表把这个项目关闭掉&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/dQbfvg6t/1743519946790.png&#34; alt=&#34;1743519946790.png&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-2-python注释与变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-2-python注释与变量&#34;&gt;#&lt;/a&gt; 1-2 Python 注释与变量&lt;/h2&gt;
&lt;h4 id=&#34;pycharm快捷键与编辑习惯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm快捷键与编辑习惯&#34;&gt;#&lt;/a&gt; PyCharm 快捷键与编辑习惯&lt;/h4&gt;
&lt;h4 id=&#34;python注释&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python注释&#34;&gt;#&lt;/a&gt; Python 注释&lt;/h4&gt;
&lt;p&gt;注释的原因：为了程序的可读性&lt;/p&gt;
&lt;p&gt;在 Python 中有两种注释方式：单行注释和多行注释&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;注释方式&lt;/th&gt;
&lt;th&gt;区别&lt;/th&gt;
&lt;th&gt;基本语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;单行注释&lt;/td&gt;
&lt;td&gt;只能注释一行内容&lt;/td&gt;
&lt;td&gt;#注释内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;多行注释&lt;/td&gt;
&lt;td&gt;可以注释多行内容，常用于代码块注释情况&lt;/td&gt;
&lt;td&gt;“”“           ”“”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;小技巧：&lt;/p&gt;
&lt;p&gt;可以使用 Ctrl+/ 来对代码或程序进行快速注释&lt;/p&gt;
&lt;h4 id=&#34;pycharm常用快捷键&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm常用快捷键&#34;&gt;#&lt;/a&gt; PyCharm 常用快捷键&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;常用快捷键&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;代码提示&lt;/td&gt;
&lt;td&gt;代码提示：输入关键字的前 2~3 个字符（PyCharm 本身自带了一个代码提供的功能），会自动进行代码提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码保存&lt;/td&gt;
&lt;td&gt;Ctrl+s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;撤销与恢复&lt;/td&gt;
&lt;td&gt;撤销：Ctrl+Z     恢复：Ctrl+Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速注释&lt;/td&gt;
&lt;td&gt;Ctrl+/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;代码自动格式化&lt;/td&gt;
&lt;td&gt;Ctrl+Alt+L&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;快速复制当前行到下一行&lt;/td&gt;
&lt;td&gt;Ctrl+D&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在编写 Python 代码时，一定要注意代码缩进问题，在 Python 语言中，缩进代表上下级关系&lt;/p&gt;
&lt;h4 id=&#34;python变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python变量&#34;&gt;#&lt;/a&gt; Python 变量&lt;/h4&gt;
&lt;p&gt;量：量是程序运行中的最小单元&lt;/p&gt;
&lt;p&gt;变量：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;变量是存储数据的容器&lt;/li&gt;
&lt;li&gt;变量是程序运行中可以变化的量&lt;/li&gt;
&lt;li&gt;变量存储的数据是临时的（永久存储数据：放入数据库中）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;变量的作用：简单来说，就是临时存储&lt;/p&gt;
&lt;h4 id=&#34;变量的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的定义&#34;&gt;#&lt;/a&gt; 变量的定义&lt;/h4&gt;
&lt;p&gt;变量名 = 变量的值（计算机从右往左走）&lt;/p&gt;
&lt;p&gt;&amp;lt;!-- 注意：= 两边都要留个空格！变量名可以自定义，但是要满足‘标识符’的命名规则 --&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;标识符的命名规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#标识符的命名规则&#34;&gt;#&lt;/a&gt; ‘标识符’的命名规则&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;由数字、字母、下划线组成（例：user_name)&lt;/li&gt;
&lt;li&gt;不能数字开头（例：hello5)&lt;/li&gt;
&lt;li&gt;严格区分大小写（a 和 A 是两个完全不同的变量名）&lt;/li&gt;
&lt;li&gt;不能使用内置关键字作为变量名称&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;内置关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内置关键字&#34;&gt;#&lt;/a&gt; 内置关键字&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0r1RcHMt/1743685933288.png&#34; alt=&#34;1743685933288.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;命名习惯&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#命名习惯&#34;&gt;#&lt;/a&gt; 命名习惯&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;要做到见名知义&lt;/li&gt;
&lt;li&gt;大驼峰：每个单词首字母都大写&lt;/li&gt;
&lt;li&gt;小驼峰：第二个（含）以后的单词首字母要大写&lt;/li&gt;
&lt;li&gt;下划线&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;变量的定义-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变量的定义-2&#34;&gt;#&lt;/a&gt; 变量的定义&lt;/h4&gt;
&lt;p&gt;先定义后使用&lt;/p&gt;
&lt;h2 id=&#34;1-3-python数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-3-python数据类型&#34;&gt;#&lt;/a&gt; 1-3 Python 数据类型&lt;/h2&gt;
&lt;h4 id=&#34;python中的7种数据类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的7种数据类型&#34;&gt;#&lt;/a&gt; Python 中的 7 种数据类型&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;数据类型&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;数值&lt;/td&gt;
&lt;td&gt;int (整形)      float (浮点形，带小数点)&lt;/td&gt;
&lt;td&gt;定义时直接写数字即可，不需要添加任何符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔性&lt;/td&gt;
&lt;td&gt;True (真)      False (假)&lt;/td&gt;
&lt;td&gt;只有两个值，且必须首字母大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;td&gt;通过一对引号引起来的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;列表&lt;/td&gt;
&lt;td&gt;数据可以发生改变&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple&lt;/td&gt;
&lt;td&gt;元素&lt;/td&gt;
&lt;td&gt;数据一但定义，其值就不能发生改变了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;集合&lt;/td&gt;
&lt;td&gt;自动去重&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dick&lt;/td&gt;
&lt;td&gt;字典&lt;/td&gt;
&lt;td&gt;查询神器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;认识bug&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#认识bug&#34;&gt;#&lt;/a&gt; 认识 Bug&lt;/h4&gt;
&lt;p&gt;Bug, 即程序中的错误&lt;/p&gt;
&lt;h4 id=&#34;解决bug三步走编译型错误即语法错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解决bug三步走编译型错误即语法错误&#34;&gt;#&lt;/a&gt; 解决 bug 三步走 (编译型错误，即语法错误)&lt;/h4&gt;
&lt;p&gt;&amp;lt;!-- 容易查找 --&amp;gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看错误页面&lt;/li&gt;
&lt;li&gt;看错误的行号&lt;/li&gt;
&lt;li&gt;根据具体的错误，具体分析&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;pycharm代码调试运行时错误&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pycharm代码调试运行时错误&#34;&gt;#&lt;/a&gt; PyCharm 代码调试 (运行时错误)&lt;/h4&gt;
&lt;p&gt;Debug 工具是 PyCharm IDE 中集成的专门用来调试程序的工具，在这里程序员可以查看程序的执行细节和流程，以方便我们快速找出程序的 Bug&lt;/p&gt;
&lt;p&gt;Debug 工具使用二步走:①打断点②Debug 调试&lt;/p&gt;
&lt;p&gt;注意：Debug 还可以用于了解程序的运行流程&lt;/p&gt;
&lt;h4 id=&#34;下断点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下断点&#34;&gt;#&lt;/a&gt; 下断点&lt;/h4&gt;
&lt;p&gt;断点应该放在哪个位置：答: 代码可能出错的代码段的第一行&lt;/p&gt;
&lt;h2 id=&#34;1-4-python格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-4-python格式化输出&#34;&gt;#&lt;/a&gt; 1-4 Python 格式化输出&lt;/h2&gt;
&lt;h4 id=&#34;python中print输出函数详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中print输出函数详解&#34;&gt;#&lt;/a&gt; Python 中 print 输出函数详解&lt;/h4&gt;
&lt;h4 id=&#34;格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#格式化输出&#34;&gt;#&lt;/a&gt; 格式化输出&lt;/h4&gt;
&lt;p&gt;输出：就是程序输出给用户&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jqnrykVK/1743772303495.png&#34; alt=&#34;1743772303495.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SxkFFSnN/1743772309087.png&#34; alt=&#34;1743772309087.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;print () 函数：主要功能用于实现对变量以及字符串类型数据的直接输出&lt;/p&gt;
&lt;p&gt;end 参数，代表当前面的变量或文本信息输出完毕后，追加的内容，默认为 \n，代表换行符&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/kMTttGdL/1743772994621.png&#34; alt=&#34;1743772994621.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/CLtBm25N/1743773009029.png&#34; alt=&#34;1743773009029.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/K8ScKh4d/1743773173194.png&#34; alt=&#34;1743773173194.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RZ7SKpHq/1743773184771.png&#34; alt=&#34;1743773184771.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;转义字符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#转义字符&#34;&gt;#&lt;/a&gt; \ 转义字符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;\ 转义字符&lt;/th&gt;
&lt;th&gt;表示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;一个 Tab 键的缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行符，实现自动换行（针对终端）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KcC35VR5/1743773346355-1.png&#34; alt=&#34;1743773346355-1.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5NvYK3zW/1743773352777.png&#34; alt=&#34;1743773352777.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;百分号形式的格式化输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#百分号形式的格式化输出&#34;&gt;#&lt;/a&gt; 百分号形式的格式化输出&lt;/h4&gt;
&lt;p&gt;% 格式常见形式如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;格式符号&lt;/th&gt;
&lt;th&gt;转换&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;有符号的十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%u&lt;/td&gt;
&lt;td&gt;无符号十进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;八进制整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;十六进制整数（小写 ox)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;十六进制整数（大写 OX)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;python中input函数详细讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中input函数详细讲解&#34;&gt;#&lt;/a&gt; Python 中 input 函数详细讲解&lt;/h4&gt;
&lt;h4 id=&#34;input输入方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#input输入方法&#34;&gt;#&lt;/a&gt; input () 输入方法&lt;/h4&gt;
&lt;p&gt;input (&#39; 提示信息 &#39;)&lt;/p&gt;
&lt;p&gt;input () 函数，其只要写入一个参数，代表系统的提示信息&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g23Hyctp/1744292593489.png&#34; alt=&#34;1744292593489.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jq91Z5cn/1744293166855.png&#34; alt=&#34;1744293166855.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;输入的特点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入的特点&#34;&gt;#&lt;/a&gt; 输入的特点：&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;当程序执行到 &#39;input&#39;, 等待用户输入，输入完成之后才能继续向下执行。&lt;/li&gt;
&lt;li&gt;在 Python 中，&#39;linput&#39; 接收用户输入后，一般存储到变量， 方便使用。&lt;/li&gt;
&lt;li&gt;在 Python 中，&#39;input&#39; 会把接收到的任意用户输入的数据都当做字符串处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;input方法注意现象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#input方法注意现象&#34;&gt;#&lt;/a&gt; input 方法注意现象&lt;/h4&gt;
&lt;p&gt;&amp;lt;!-- 注意：所有由 input () 方法获取的数据都是 “字符串” 类型 --&amp;gt;&lt;/p&gt;
&lt;h2 id=&#34;1-5-python运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-5-python运算符&#34;&gt;#&lt;/a&gt; 1-5 Python 运算符&lt;/h2&gt;
&lt;h4 id=&#34;使用临时变量实现两个变量值的交换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用临时变量实现两个变量值的交换&#34;&gt;#&lt;/a&gt; 使用临时变量实现两个变量值的交换&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Bby88zrb/1744295368074.png&#34; alt=&#34;1744295368074.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;学习目标&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学习目标&#34;&gt;#&lt;/a&gt; 学习目标&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;掌握常见数据类型转化函数及 其应用&lt;/li&gt;
&lt;li&gt;掌握常见运算符的使用&lt;/li&gt;
&lt;li&gt;了 解条件语句的作用&lt;/li&gt;
&lt;li&gt;掌握 if 结构、 if..else 结构的使用&lt;/li&gt;
&lt;li&gt;掌握 if 嵌套结构&lt;/li&gt;
&lt;li&gt;掌握三目运算符的使用&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;python数据类型的转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python数据类型的转换&#34;&gt;#&lt;/a&gt; Python 数据类型的转换&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7Y4bj6xr/1744465841637.png&#34; alt=&#34;1744465841637.png&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;四种转换方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四种转换方法&#34;&gt;#&lt;/a&gt; 四种转换方法&lt;/h4&gt;
&lt;h4 id=&#34;数据类型转换函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据类型转换函数&#34;&gt;#&lt;/a&gt; 数据类型转换函数&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;int(x[,base])&lt;/td&gt;
&lt;td&gt;将 x 转换为一个整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float(x)&lt;/td&gt;
&lt;td&gt;将 x 转换为一个浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex(real[,imag])&lt;/td&gt;
&lt;td&gt;创建一个复数， real 为实部， imag 为 虚部]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str(x)&lt;/td&gt;
&lt;td&gt;将对象 x 转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repr(x)&lt;/td&gt;
&lt;td&gt;将对象 x 转换为表达式字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eval(x)&lt;/td&gt;
&lt;td&gt;用来计算在字符串中的有效 Python 表达式，并返回一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(s)&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(s)&lt;/td&gt;
&lt;td&gt;将序列 s 转换为一个列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chr(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一一个 Unicode 字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ord(x)&lt;/td&gt;
&lt;td&gt;将一个字符转换为它的 ASCII 整数值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hex(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个十六进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oct(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一一个八进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个二进制字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jdRk8GFd/20250412221021.jpg&#34; alt=&#34;20250412221021.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算符的使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的使用&#34;&gt;#&lt;/a&gt; 运算符的使用&lt;/h4&gt;
&lt;h4 id=&#34;运算符分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符分类&#34;&gt;#&lt;/a&gt; 运算符分类&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;算数运算符&lt;/li&gt;
&lt;li&gt;赋值运算符（=）&lt;/li&gt;
&lt;li&gt;复合赋值运算符&lt;/li&gt;
&lt;li&gt;比较运算符&lt;/li&gt;
&lt;li&gt;逻辑运算符&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+&lt;/td&gt;
&lt;td&gt;加&lt;/td&gt;
&lt;td&gt;1 + 1 输出的结果是 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;减&lt;/td&gt;
&lt;td&gt;1 - 1 输出的结果是 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;乘&lt;/td&gt;
&lt;td&gt;2 * 2 输出的结果是 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除&lt;/td&gt;
&lt;td&gt;10 / 2 输出的结果是 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;整除&lt;/td&gt;
&lt;td&gt;9 // 2 输出的结果是 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%&lt;/td&gt;
&lt;td&gt;取余（取模）&lt;/td&gt;
&lt;td&gt;9 % 4 输出的结果是 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;幂&lt;/td&gt;
&lt;td&gt;2 ** 4 输出的结果是 16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;（）&lt;/td&gt;
&lt;td&gt;小括号，用来提高运算优先级&lt;/td&gt;
&lt;td&gt;（1 + 2） * 3 输出的结果是 9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;混合运算符优先级顺序：（）高于 **&lt;em&gt; 高于&lt;/em&gt; * /// % 高于 + -&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4NmJWfxs/20250412224709.jpg&#34; alt=&#34;20250412224709.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#赋值运算符&#34;&gt;#&lt;/a&gt; 赋值运算符&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qRN9rRhG/20250412225318.jpg&#34; alt=&#34;20250412225318.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;复合赋值运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#复合赋值运算符&#34;&gt;#&lt;/a&gt; 复合赋值运算符&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;+=&lt;/td&gt;
&lt;td&gt;加法赋值运算符&lt;/td&gt;
&lt;td&gt;c += a 等价于 c = c + a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-=&lt;/td&gt;
&lt;td&gt;减法赋值运算符&lt;/td&gt;
&lt;td&gt;c -= a 等价于 c = c - a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*=&lt;/td&gt;
&lt;td&gt;乘法赋值运算符&lt;/td&gt;
&lt;td&gt;c *= a 等价于 c = c * a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/=&lt;/td&gt;
&lt;td&gt;除法赋值运算符&lt;/td&gt;
&lt;td&gt;c /= a 等价于 c = c /a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//=&lt;/td&gt;
&lt;td&gt;整除赋值运算符&lt;/td&gt;
&lt;td&gt;c //= a 等价于 c = c //a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%=&lt;/td&gt;
&lt;td&gt;取余赋值运算符&lt;/td&gt;
&lt;td&gt;c %= a 等价于 c = c % a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**=&lt;/td&gt;
&lt;td&gt;幂赋值运算符&lt;/td&gt;
&lt;td&gt;c *= a 等价于 c = c ** a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：算数运算符的优先级 &amp;gt; 复合赋值运算符的优先级&lt;/p&gt;
&lt;h4 id=&#34;比较运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比较运算符&#34;&gt;#&lt;/a&gt; 比较运算符&lt;/h4&gt;
&lt;p&gt;应用场景：两个变量大小的比较，其最终返回结果是一个 bool 类型的值，True 或 False&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;判断相等。如果两个操作数的结果相等，则条件结果为真 (True)，否则条件结果为假 (False)&lt;/td&gt;
&lt;td&gt;如 a=3,b=3 则 (a==b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!=&lt;/td&gt;
&lt;td&gt;不等于。如果两个操作数的结果不相等，则条件结果为真 (True)，否则条件结果为假 (False)&lt;/td&gt;
&lt;td&gt;如 a=1,b=3, 则 (a!=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否大于右侧操作数结果，如果大于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;gt;b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否小于右侧操作数结果，如果小于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;lt;b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;=&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否大于等于右侧操作数结果，如果大于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=7,b=3, 则 (a&amp;lt;b) 为 False                                                  如 a=3,b=3 则 (a&amp;gt;=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;=&lt;/td&gt;
&lt;td&gt;运算符左侧操作数结果是否小于等于右侧操作数结果，如果小于，则条件为真，否则为假&lt;/td&gt;
&lt;td&gt;如 a=3,b=3 则 (a&amp;lt;=b) 为 True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;逻辑运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#逻辑运算符&#34;&gt;#&lt;/a&gt; 逻辑运算符&lt;/h4&gt;
&lt;p&gt;逻辑运算符：逻辑与、或、非，其最终返回的结果也是一个布尔类型的值，True 或 Flase。另外在实际工作中，逻辑运算符也主要和 if 分支结构相结合。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;x and y&lt;/td&gt;
&lt;td&gt;如果 x 为 Flase,x and y 返回 Flase，否则它返回 y 的值&lt;/td&gt;
&lt;td&gt;True and Flase, 返回 Flase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;x or y&lt;/td&gt;
&lt;td&gt;如果 x 为 True,x or y 返回 True，否则它返回 y 的值&lt;/td&gt;
&lt;td&gt;True or Flase, 返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;not x&lt;/td&gt;
&lt;td&gt;如果 x 为 True,not x 返回 Flase; 如果 x 为 Flase,not x 返回 True&lt;/td&gt;
&lt;td&gt;not True 返回 Flase；not Flase 返回 True；&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;a href=&#34;https://i.postimg.cc/3NLC1GvL/20250413201901.jpg&#34;&gt;https://i.postimg.cc/3NLC1GvL/20250413201901.jpg&lt;/a&gt;&amp;quot; alt=&amp;quot;20250413201901.jpg&amp;quot;  /&amp;gt;&lt;/p&gt;
&lt;h4 id=&#34;短路运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#短路运算&#34;&gt;#&lt;/a&gt; 短路运算&lt;/h4&gt;
&lt;p&gt;短路运算的原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;表达式 1 and 表达式 2, 如果表达式 1 条件为真，则最终的运算结果由右边的表达式 2 来决定。如果表达式 1 条件为假，则最终结果为假。其右边的表达式 2 不需要在进行运算。&lt;/li&gt;
&lt;li&gt;表达式 1 or 表达式 2, 如果表达式 1 为真，则最终的运算结果由表达式 1 来决定，为真。如果表达式 1 为假，则最终结果由表达式 2 来决定。 如果表达式 2 为真，则最终结果为真，如果表达式 2 为假，则最终结果为假。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Python 把 0、空字符串和 None 看成 False, 其它数值和非空字符串都看成 True&lt;/li&gt;
&lt;li&gt;在 Python 语言中，空格也算一个字符（非空）&lt;/li&gt;
&lt;li&gt;如果逻辑运算符的两边，非纯表达式，则返回结果并不是 bool 布尔类型的值，而是返回决定整个表达式结果的那个值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0yJ58qcj/20250413205007.jpg&#34; alt=&#34;20250413205007.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;运算符的优先级&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运算符的优先级&#34;&gt;#&lt;/a&gt; 运算符的优先级&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符说明&lt;/th&gt;
&lt;th&gt;Python 运算符&lt;/th&gt;
&lt;th&gt;结合性&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;小括号&lt;/td&gt;
&lt;td&gt;()&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;索引运算符&lt;/td&gt;
&lt;td&gt;x [i] 或 x [i1:i2 [:i3]]&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;属性访问&lt;/td&gt;
&lt;td&gt;x.attribute&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乘方&lt;/td&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位取反&lt;/td&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;符号运算符&lt;/td&gt;
&lt;td&gt;+ （正号）、-（负号）&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;乘除&lt;/td&gt;
&lt;td&gt;*、/、//、%&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;加减&lt;/td&gt;
&lt;td&gt;+、-&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;位移&lt;/td&gt;
&lt;td&gt;&amp;gt;&amp;gt;、&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;比较运算符&lt;/td&gt;
&lt;td&gt;==、!=、&amp;gt;、&amp;gt;=、&amp;lt;、&amp;lt;=&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is 运算符&lt;/td&gt;
&lt;td&gt;is、is not&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in 运算符&lt;/td&gt;
&lt;td&gt;in、not in&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑非&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;右&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑与&lt;/td&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑或&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逗号运算符&lt;/td&gt;
&lt;td&gt;exp1,exp2&lt;/td&gt;
&lt;td&gt;左&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：逻辑运算符优先级顺序为从高到低&lt;/p&gt;
&lt;h2 id=&#34;1-6-python分支语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-6-python分支语句&#34;&gt;#&lt;/a&gt; 1-6 Python 分支语句&lt;/h2&gt;
&lt;h4 id=&#34;if语句详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if语句详解&#34;&gt;#&lt;/a&gt; if 语句详解&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 条件判断：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    则执行某段代码&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y0RwmNb0/20250415232558.jpg&#34; alt=&#34;20250415232558.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/bJ6TDs18/20250415233244.jpg&#34; alt=&#34;20250415233244.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意：只要与 if 语句它们有缩进关系的，系统都认为下面的代码就是 if 语句的一部分&lt;/p&gt;
&lt;h4 id=&#34;ifelse相当于必须要二选一语句详解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelse相当于必须要二选一语句详解&#34;&gt;#&lt;/a&gt; if...else (相当于必须要二选一) 语句详解&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 条件判断:
   当条件判断为True时，则执行这个语句段
else:
    当条件判断为Flase时，则执行这个语句段
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MZhFMb3G/20250416205303.jpg&#34; alt=&#34;20250416205303.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sxSK9qHg/20250416205413.jpg&#34; alt=&#34;20250416205413.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ifelifelse多重分支语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelifelse多重分支语句&#34;&gt;#&lt;/a&gt; if...elif...else 多重分支语句&lt;/h4&gt;
&lt;p&gt;if...elif...else 多重判断语句&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if 条件1:
   条件1成立执行的代码1
   条件1成立执行的代码2
   ......
elif 条件2:
   条件2成立执行的代码1
   条件2成立执行的代码2
   ......
......
else:
   以上条件都不成立执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qRVDz2GK/20250416222507.jpg&#34; alt=&#34;20250416222507.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wMBXvBnJ/20250416222620.jpg&#34; alt=&#34;20250416222620.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Hsy27rV4/20250416222722.jpg&#34; alt=&#34;20250416222722.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;ifelifelse多重分支语句相关案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ifelifelse多重分支语句相关案例&#34;&gt;#&lt;/a&gt; if...elif...else 多重分支语句相关案例&lt;/h4&gt;
&lt;p&gt;bmi 值：身体质量指数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/25gvmDDj/20250416225135.jpg&#34; alt=&#34;20250416225135.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;if嵌套结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#if嵌套结构&#34;&gt;#&lt;/a&gt; if 嵌套结构&lt;/h4&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 外层条件判断&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token comment&#34;&gt;#如果条件为 True，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; 内层条件判断&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token comment&#34;&gt;#如果内层条件为 True，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token comment&#34;&gt;#如果条件为 Flase，则执行以下语句段&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编写时要尊重一个原则：先编写外层判断，所有语句编写完成后，再编写内层条件判断结构&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/D0RCjrLf/20250418214556.jpg&#34; alt=&#34;20250418214556.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MTnZ1wDk/20250418214820.jpg&#34; alt=&#34;20250418214820.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;出拳案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#出拳案例&#34;&gt;#&lt;/a&gt; 出拳案例&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fy63gKCb/20250418232340.jpg&#34; alt=&#34;20250418232340.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;a href=&#34;https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg&#34;&gt;https://i.postimg.cc/YqhZ6xTW/20250418232546.jpg&lt;/a&gt;&amp;quot; alt=&amp;quot;20250418232546.jpg&amp;quot; style=&amp;quot;zoom:150%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KjdNrtgP/20250418232722.jpg&#34; alt=&#34;20250418232722.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/26gcTssL/20250418232837.jpg&#34; alt=&#34;20250418232837.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;此时，该代码不是很完整，他不能随机生成电脑的出拳&lt;/p&gt;
&lt;h4 id=&#34;python中的随机数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的随机数&#34;&gt;#&lt;/a&gt; Python 中的随机数&lt;/h4&gt;
&lt;p&gt;引用函数&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zD7ZqvYx/20250418234842.jpg&#34; alt=&#34;20250418234842.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;仍以出拳为例&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7LhbndMk/20250418234543.jpg&#34; alt=&#34;20250418234543.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;三目运算符&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三目运算符&#34;&gt;#&lt;/a&gt; 三目运算符&lt;/h4&gt;
&lt;p&gt;三目运算符也叫三元运算符&lt;/p&gt;
&lt;p&gt;主要作用：就是用于简化 if...else... 语句&lt;/p&gt;
&lt;p&gt;基本语法：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;if 条件判断:
   #语句段1
else:
   #语句段2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;转换为三目运算符:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语句段1 if 条件判断 else 语句段2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/TPY1dwkG/20250419001702.jpg&#34; alt=&#34;20250419001702.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可利用三目运算符将以上代码简化&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/0NMg01jD/20250419002138.jpg&#34; alt=&#34;20250419002138.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;python分支语句练习题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python分支语句练习题&#34;&gt;#&lt;/a&gt; Python 分支语句练习题&lt;/h4&gt;
&lt;h4 id=&#34;三角形案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三角形案例&#34;&gt;#&lt;/a&gt; 三角形案例&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gjxh3pL1/20250419193559.jpg&#34; alt=&#34;20250419193559.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;小组赛案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#小组赛案例&#34;&gt;#&lt;/a&gt; 小组赛案例&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/CRLQM5rR&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YC1K3m1z/20250419202742.jpg&#34; alt=&#34;20250419202742.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-7-while循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-7-while循环&#34;&gt;#&lt;/a&gt; 1-7 while 循环&lt;/h2&gt;
&lt;p&gt;循环中的两大关键词：comtinue 和 break&lt;/p&gt;
&lt;h4 id=&#34;循环基本结构与循环三步走&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环基本结构与循环三步走&#34;&gt;#&lt;/a&gt; 循环基本结构与循环三步走&lt;/h4&gt;
&lt;p&gt;循环的作用：让代码高校的重复执行&lt;/p&gt;
&lt;p&gt;循环的分类：在 Python 中，循环结构分为 while 和 for 两种&lt;/p&gt;
&lt;p&gt;while 循环基本语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while 条件:
   条件成立重复执行的代码1
   条件成立重复执行的代码2
   ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while 循环三步走：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义初始计数器   i = 0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编写循环条件 while i &amp;lt;100:  =&amp;gt; 目的：到底这个循环在什么时候结束&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在循环体内部对计数器进行更新操作（一般是 + 1）&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/zGKMYbX2/20250419230127.jpg&#34; alt=&#34;20250419230127.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;while循环案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环案例&#34;&gt;#&lt;/a&gt; while 循环案例&lt;/h4&gt;
&lt;h4 id=&#34;案例1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例1&#34;&gt;#&lt;/a&gt; 案例 1&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1Rr1mrNh/20250420212428.jpg&#34; alt=&#34;20250420212428.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;案例2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例2&#34;&gt;#&lt;/a&gt; 案例 2&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g0WK28ZQ/20250420213746.jpg&#34; alt=&#34;20250420213746.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yD9FRvq/20250420214234.jpg&#34; alt=&#34;20250420214234.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;案例3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例3&#34;&gt;#&lt;/a&gt; 案例 3&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HxJ9Lg2v/20250420215130.jpg&#34; alt=&#34;20250420215130.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环中的两大关键词&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环中的两大关键词&#34;&gt;#&lt;/a&gt; 循环中的两大关键词&lt;/h4&gt;
&lt;p&gt;break: 终止整个循环，强制结束&lt;/p&gt;
&lt;p&gt;continue: 停止当前程序，继续下一个程序&lt;/p&gt;
&lt;h4 id=&#34;break&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#break&#34;&gt;#&lt;/a&gt; break&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGRBsDJT/20250420220818.jpg&#34; alt=&#34;20250420220818.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;continue&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#continue&#34;&gt;#&lt;/a&gt; continue&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/8cXFfJzh/20250420221943.jpg&#34; alt=&#34;20250420221943.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/QCztx2fm/20250420222245.jpg&#34; alt=&#34;20250420222245.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;while中的死循环&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while中的死循环&#34;&gt;#&lt;/a&gt; while 中的死循环&lt;/h4&gt;
&lt;p&gt;概念：在编程中一个靠自身控制无法终止的程序称为 “死循环”&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/qBN6Wwbw/20250420222926.jpg&#34; alt=&#34;20250420222926.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/vmjbnrr8/20250420223703.jpg&#34; alt=&#34;20250420223703.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;while循环案例猜数字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环案例猜数字&#34;&gt;#&lt;/a&gt; while 循环案例：猜数字&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k5pq814G/20250421221215.jpg&#34; alt=&#34;20250421221215.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;循环嵌套基本语法与执行流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#循环嵌套基本语法与执行流程&#34;&gt;#&lt;/a&gt; 循环嵌套基本语法与执行流程&lt;/h4&gt;
&lt;p&gt;while 循环嵌套：就是一个 while 里面嵌套一个 while 的写法，每个 while 和之前的基本语法是相同的&lt;/p&gt;
&lt;p&gt;while 循环嵌套方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一步：定义外层循环计数器
i = 0或1
第二步：编写外层循环条件
while i &amp;lt; 3:
    第四步：定义内层循环计数器
    j = 0或1
    第五步：编写内层循环条件
    while j &amp;lt; 3:
        #核心代码
        第六步：在内层循环体中更新计数器的值
        j += 1
    第三步：在外层循环体中更新计数器的值
    i += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/j5YKZWHY/20250421223007.jpg&#34; alt=&#34;20250421223007.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;执行流程：外层循环 1 次，内层循环 n 次&lt;/p&gt;
&lt;p&gt;循环嵌套的总次数 = 外层循环次数 * 内层循环次数&lt;/p&gt;
&lt;h2 id=&#34;1-8-for循环及案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-8-for循环及案例&#34;&gt;#&lt;/a&gt; 1-8 for 循环及案例&lt;/h2&gt;
&lt;h4 id=&#34;for循环基本语法及其应用场景&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for循环基本语法及其应用场景&#34;&gt;#&lt;/a&gt; for 循环基本语法及其应用场景&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;for 临时变量 in 序列：
  重复执行的代码1
  重复执行的代码2
  ......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/X71gF9Wq/20250421224947.jpg&#34; alt=&#34;20250421224947.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;for与range函数相关案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for与range函数相关案例&#34;&gt;#&lt;/a&gt; for 与 range 函数相关案例&lt;/h4&gt;
&lt;p&gt;range () 函数可以理解为一个序列结构&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;range(stop)
range(start,stop,[step])
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;理解&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;计数从 start 开始。默认是从 0 开始&lt;/td&gt;
&lt;td&gt;range (5) 等价于 range (0,5)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;计数到 stop 结束，但不包括 stop&lt;/td&gt;
&lt;td&gt;range (0,5) 是 [0,1,2,3,4] 没有 5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;步长，默认为 1&lt;/td&gt;
&lt;td&gt;range (0,5) 等价于 range (0,5,1)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;range (5) =&amp;gt; 生成一个序列类型的数据 =&amp;gt; [0,1,2,3,4]&lt;/p&gt;
&lt;p&gt;range (0,5) =&amp;gt; 0 代表开头，5 代表结尾（但不包含 5）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;range 其实很简单，只顾头来尾不管&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;range (0,5,1) 0-5 之间的数字，每次 + 1 =&amp;gt; 0 1 2 3 4&lt;/p&gt;
&lt;p&gt;range (0,5,2) 0-5 之间的数字，每次 + 2 =&amp;gt;0 2 4&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Wzt42fsj/20250422213421.jpg&#34; alt=&#34;20250422213421.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Pq3xBjkK/20250422213718.jpg&#34; alt=&#34;20250422213718.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;用户登录案例演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用户登录案例演示&#34;&gt;#&lt;/a&gt; 用户登录案例演示&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;break:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/RFJHdFnw/20250422214805.jpg&#34; alt=&#34;20250422214805.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;continue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Kv6sDkkD/20250422215243.jpg&#34; alt=&#34;20250422215243.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/WzCSS38Z/20250422222651.jpg&#34; alt=&#34;20250422222651.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-9-循环else&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-9-循环else&#34;&gt;#&lt;/a&gt; 1-9 循环 else&lt;/h2&gt;
&lt;h4 id=&#34;while循环中的else语句结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#while循环中的else语句结构&#34;&gt;#&lt;/a&gt; while 循环中的 else 语句结构&lt;/h4&gt;
&lt;p&gt;循环可以和 else 配合使用，else 下方缩进的代码指的是当循环正常结束之后执行的代码&lt;/p&gt;
&lt;p&gt;正常结束：没有遇到 break&lt;/p&gt;
&lt;p&gt;不正常结束：break&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while 循环 else 结构基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;while 条件：
  条件成立重复执行的代码
else:
  循环正常结束之后执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/sgYdQdfm/20250422224325.jpg&#34; alt=&#34;20250422224325.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while...else 遇上 break&lt;/strong&gt; (终止)&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/hJFZvtYT&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hGvkCJby/20250422224719.jpg&#34; alt=&#34;20250422224719.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;while...else 遇上 continue&lt;/strong&gt; (继续)&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SKHvDgKR/20250422225002.jpg&#34; alt=&#34;20250422225002.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;for循环中else的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#for循环中else的结构&#34;&gt;#&lt;/a&gt; for 循环中 else 的结构&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for临时变量in序列：
  重复执行的代码
  ...
else:
  循环正常结束之后要执行的代码
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所谓 else 指的是循环正常结束之后要执行的代码，即如果是 break 终止循环的情况，else 下方缩进的代码将不执行&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5txR5JZ9/20250425220744.jpg&#34; alt=&#34;20250425220744.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;退出循环的两种方式&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;遇见 break&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/2jwFvvCW/20250425221204.jpg&#34; alt=&#34;20250425221204.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;遇见 continue&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ncmFgKMj/20250425221548.jpg&#34; alt=&#34;20250425221548.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;综合案例报数字游戏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#综合案例报数字游戏&#34;&gt;#&lt;/a&gt; 综合案例：报数字游戏&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y97D2HxB/20250425223152.jpg&#34; alt=&#34;20250425223152.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-10-字符串定义切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-10-字符串定义切片&#34;&gt;#&lt;/a&gt; 1-10 字符串定义切片&lt;/h2&gt;
&lt;h4 id=&#34;字符串定义与输入输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串定义与输入输出&#34;&gt;#&lt;/a&gt; 字符串定义与输入输出&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定义：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一对引号字符串&lt;/li&gt;
&lt;li&gt;三引号字符串（支持换行）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;字符串是 Python 中最常用的数据类型。我们一般所有引号来创建字符串。创建字符串很简单，只要为变量分配一个值即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：控制台显示结果为 &#39;&amp;lt;class str&amp;gt;&#39;, 即数据类型为 str（字符串）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/PxkrQ2mQ/20250425224841.jpg&#34; alt=&#34;20250425224841.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Python 代码中，我们可以使用 input () 方法来接收用户的输入信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;记住：在 Python 中，input () 方法返回的结果是一个字符串类型的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&#39; 请输入您的姓名&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;age &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;请输入您的年龄: &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;请输入您的住址: &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; age&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ol&gt;
&lt;li&gt;input () 可以阻断当前正在执行的代码，让系统处于等待状态，直到用户输入完成&lt;/li&gt;
&lt;li&gt;input () 方法接收到的所有数据，返回的数据类型多少字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;普通输出&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;变量名称&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;变量名称&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;，变量名称&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;，变量名称&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;格式化输出&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;百分号 (Python2 和 Python3)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39;请输入您的姓名:&#39;）
age = int(input(&#39;请输入您的年龄: &#39;)
address = input(&#39; 请输入您的住址:&#39; )

print(&#39;我的名字是当s，今年%d岁了，家里住在%s...% (name, age, address))
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;format 方法 (Python3)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39; 请输入您的姓名: &#39;)
age = input(&#39; 请输入您的年龄: &#39;)
address = input(&#39; 请输入您的住址: &#39;)

print(&#39;我的名字是&amp;#123;&amp;#125;，今年()岁了，家里住在&amp;#123;&amp;#125;...&#39;.format(name. age, address)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;f 形式 (Python3)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;name = input(&#39;请输入您的姓名: &#39;)
age = input(&#39; 请输入您的年龄: &#39;)
eddress input( &#39;请输入您的住址:&#39;)

print(f&#39;我的名字是 &amp;#123;name&amp;#125;，今年&amp;#123;age&amp;#125;岁了， 家里住在&amp;#123;address&amp;#125;...&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;字符串索引下标与循环遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串索引下标与循环遍历&#34;&gt;#&lt;/a&gt; 字符串索引下标与循环遍历&lt;/h4&gt;
&lt;p&gt;在计算机中，Python 中的字符串属于序列结构。所以底层存储占用一段连续的存储空间。&lt;/p&gt;
&lt;p&gt;索引的最大值 = len (字符串) - 1&lt;/p&gt;
&lt;p&gt;例如：7 个字符，则索引下标的最大值为 7 - 1 = 6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：索引下标从 0 开始&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;索引下标：就是编号。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;name &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;abcdef&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#d&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/BQzN5vhC/20250426225357.jpg&#34; alt=&#34;20250426225357.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;遍历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MG9D9bxg/20250426230306.jpg&#34; alt=&#34;20250426230306.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串切片&#34;&gt;#&lt;/a&gt; 字符串切片&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;什么是切片？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：切片是指对操作的对象截取其中一部分的操作，字符串、列表、元组都支持切片操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;序列[开始位置下标：结束位置下标:步长]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不包含结束位置下标对应的位置，正负整数均可&lt;/li&gt;
&lt;li&gt;步长是选取间隔，正负整数均可，默认步长为 1&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;口决：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;切片其实很简单，只顾头来尾不顾，&lt;/p&gt;
&lt;p&gt;步长为正，正向移动&lt;/p&gt;
&lt;p&gt;步长为负，则逆向移&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/XvWjsdxK/20250426233008.jpg&#34; alt=&#34;20250426233008.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-11-字符串查找替换合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-11-字符串查找替换合并&#34;&gt;#&lt;/a&gt; 1-11 字符串查找，替换，合并&lt;/h2&gt;
&lt;h4 id=&#34;字符串的查找方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串的查找方法&#34;&gt;#&lt;/a&gt; 字符串的查找方法&lt;/h4&gt;
&lt;p&gt;字符串的查找方法结就是查找子串在字符串的位置或出现的次数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;字符串&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;find&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;要操作的字符或子串&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;find()&lt;/td&gt;
&lt;td&gt;检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则返回 - 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;index()&lt;/td&gt;
&lt;td&gt;检测某个子串是否包含在这个字符串中，如果在返回这个子串开始的位置下标，否则则报异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;包含&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/9DPx5qG4&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/x1hBmv8P/20250427184121.jpg&#34; alt=&#34;20250427184121.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不包含&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/sBN7tV0Q&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/W328qzGn/20250427184402.jpg&#34; alt=&#34;20250427184402.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/QMkPYrhM/20250428001834.jpg&#34; alt=&#34;20250428001834.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串查找案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串查找案例&#34;&gt;#&lt;/a&gt; 字符串查找案例&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/B6xZJBRv/20250428003106.jpg&#34; alt=&#34;20250428003106.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串修改方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串修改方法&#34;&gt;#&lt;/a&gt; 字符串修改方法&lt;/h4&gt;
&lt;p&gt;所谓字符串修改，指的就是通过函数的形式修改字符串中的数据&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串修改&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;replace()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回替换后的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;split()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回切割后的列表序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;join()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;用一个字符或子串合并一个字符串，即是将多个字符串合并成一个新的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;upper () 和 lower ()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;返回全部大写或小写的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&#34;replace方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#replace方法&#34;&gt;#&lt;/a&gt; replace () 方法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符串.replace(要替换的内容，替换后的内容，替换的次数-可以省略)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/KjZF2JbN/20250428193250.jpg&#34; alt=&#34;20250428193250.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;目前在工作中，replace 主要用于实现关键字替换或过滤功能&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;全部替换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/TP7jqTqx/20250428230325.jpg&#34; alt=&#34;20250428230325.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;部分替换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k5bMwcW5/20250428230612.jpg&#34; alt=&#34;20250428230612.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;split&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#split&#34;&gt;#&lt;/a&gt; split()&lt;/h4&gt;
&lt;p&gt;作用：对字符串进行切割操作，返回一个 list () 列表的数据&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/8zPjd9pB/20250428234718.jpg&#34; alt=&#34;20250428234718.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h4 id=&#34;join&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#join&#34;&gt;#&lt;/a&gt; join()&lt;/h4&gt;
&lt;p&gt;作用：和 split () 方法正好相反其主要功能是把序列拼接为字符串&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字符串.join(数据序列)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/rwSQWdpt/20250428235853.jpg&#34; alt=&#34;20250428235853.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;upper和lower&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#upper和lower&#34;&gt;#&lt;/a&gt; upper () 和 lower ()&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;upper ()：把字符串全部转换成大写&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SQBPMbG3/20250429000402.jpg&#34; alt=&#34;20250429000402.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;lower ()：把字符串全部转换成小写&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/kg3dqtZV/20250429001612.jpg&#34; alt=&#34;20250429001612.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;字符串的判断语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符串的判断语句&#34;&gt;#&lt;/a&gt; 字符串的判断语句&lt;/h4&gt;
&lt;p&gt;字符串判断：所谓判断既是判断真假，返回的结果是布尔型数据类型（True 或 Flase）&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;startswith()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检查字符串是否以指定子串开头，是则返回 True, 否则返回 Flase, 如果设置开始和结束位置下标，则在指定范围内检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;endswith()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;检查字符串是否以指定子串结尾，是则返回 True, 否则返回 Flase, 如果设置开始和结束位置下标，则在指定范围内检查&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mystr1 = &#39;Python program&#39;
print(mystr1.startswith(&#39;Python&#39;))

print(&#39;-&#39; * 10)

mystr2 = &#39;aver.png&#39;
print(mystr2.endswith(&#39;.png&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1z6jfD4R/20250429223727.jpg&#34; alt=&#34;20250429223727.jpg&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-12-列表定义及使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-12-列表定义及使用&#34;&gt;#&lt;/a&gt; 1-12 列表定义及使用&lt;/h2&gt;
&lt;h4 id=&#34;列表的定义与元素访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表的定义与元素访问&#34;&gt;#&lt;/a&gt; 列表的定义与元素访问&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;列表名称 = [数据1，数据2，数据3，数据4...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：列表可以一次存储多个数据且可以是不同的数据类型&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SQL5X41p/20250429233747.jpg&#34; alt=&#34;20250429233747.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/NfLd6C1d/20250429235739.jpg&#34; alt=&#34;20250429235739.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;列表的查询操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表的查询操作&#34;&gt;#&lt;/a&gt; 列表的查询操作&lt;/h4&gt;
&lt;p&gt;** 常用操作：** 列表的作用是一次性存储多个数据，可以对数据进行的操作有”&lt;strong&gt; 增、删、改、查&lt;/strong&gt; “&lt;/p&gt;
&lt;p&gt;列表的底层存储形式和字符串都是一样的，其也是通过索引下标来对权威进行引用的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查操作的相关方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;编号&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;index()&lt;/td&gt;
&lt;td&gt;指定数据所在位置的下标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;count()&lt;/td&gt;
&lt;td&gt;添加指定数据在当前列表中出现的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;判断指定数据在某个列表序列，如果在返回 True, 否则返回 Flase&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;not in&lt;/td&gt;
&lt;td&gt;判断指定数据不在某个列表序列，如果不在返回 True, 否则返回 Flase&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;index方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#index方法&#34;&gt;#&lt;/a&gt; &lt;strong&gt;index () 方法：&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;列表序列.index(数据，开始位置下标，结束位置下标)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/pVqf2GG7/20250504202220.jpg&#34; alt=&#34;20250504202220.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;count方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#count方法&#34;&gt;#&lt;/a&gt; count () 方法：&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/6Qb8kg5L/20250504202820.jpg&#34; alt=&#34;20250504202820.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;in和not-in-方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#in和not-in-方法&#34;&gt;#&lt;/a&gt; in 和 not in 方法：&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cH1cmVkR/20250504203526.jpg&#34; alt=&#34;20250504203526.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;列表的增加方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表的增加方法&#34;&gt;#&lt;/a&gt; 列表的增加方法&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;增加&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;append()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;增加指定数据到列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;extend()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表结尾增加数据，如果数据是一个序列，则将这个序列的数据逐一添加到列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;insert()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;指定位置新增数据&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;append&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#append&#34;&gt;#&lt;/a&gt; &lt;strong&gt;append()：&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/GtfnP0rt/20250504204528.jpg&#34; alt=&#34;20250504204528.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;注意：列表增加数据的时候，直接在原列表里面增加了指定数据，即修改了原列表，故列表为可变类型数据&lt;/p&gt;
&lt;h4 id=&#34;extend&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#extend&#34;&gt;#&lt;/a&gt; extend()：&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/yxLcvPrk/20250504205320.jpg&#34; alt=&#34;20250504205320.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总结：extend 方法比较适合于两个列表进行合并的操作&lt;/p&gt;
&lt;h4 id=&#34;insert&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#insert&#34;&gt;#&lt;/a&gt; insert()：&lt;/h4&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/K8B4YfrB/20250504205903.jpg&#34; alt=&#34;20250504205903.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;列表的删除操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表的删除操作&#34;&gt;#&lt;/a&gt; 列表的删除操作&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;del 列表 [索引]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除列表的某个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;pop()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;删除指定下标的数据（默认为最后一个），并返回该数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;remove()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;移除列表中某个数据的第一个匹配项&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;clear()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;清空列表，删除列表中的所有元素，返回空列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;1.del 列表 [索引]：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/rsz4RxcB/20250507224554.jpg&#34; alt=&#34;20250507224554.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.pop()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/4yTdscyv/20250507225707.jpg&#34; alt=&#34;20250507225707.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.remove()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/1XzdgC8y/20250507230255.jpg&#34; alt=&#34;20250507230255.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4.clear()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/G2tPGZxg/20250507230625.jpg&#34; alt=&#34;20250507230625.jpg&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;列表的修改操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表的修改操作&#34;&gt;#&lt;/a&gt; 列表的修改操作&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表 [索引]= 修改之后的值&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;修改列表中的某个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;revese()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将数据序列进行倒序排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;sort()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;将列表序列进行排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;列表 [索引]= 修改之后的值：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/yYxdB7Yb/20250507231522.jpg&#34; alt=&#34;20250507231522.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;revese()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/jjtYxh4S/20250507232059.jpg&#34; alt=&#34;20250507232059.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;也可用切片的方法：&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZY2kBmxg/20250507232303.jpg&#34; alt=&#34;20250507232303.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sort()：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hjmYVzr5/20250507232812.jpg&#34; alt=&#34;20250507232812.jpg&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;使用循环遍历列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用循环遍历列表&#34;&gt;#&lt;/a&gt; 使用循环遍历列表&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;使用 while 对列表进行遍历输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/W40g1BnK/20250512174004.jpg&#34; alt=&#34;20250512174004.jpg&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用 for 对列表进行遍历输出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/hQ9mFQs9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/d3fjy8TS/20250512174702.jpg&#34; alt=&#34;20250512174702.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;列表嵌套&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列表嵌套&#34;&gt;#&lt;/a&gt; 列表嵌套&lt;/h4&gt;
&lt;p&gt;所谓列表嵌套指的就是一个列表包含了其他的子列表&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Sjg0b1Xt&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/PrjdZBdh/20250512180559.jpg&#34; alt=&#34;20250512180559.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-13-元祖定义及使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-13-元祖定义及使用&#34;&gt;#&lt;/a&gt; 1-13 元祖定义及使用&lt;/h2&gt;
&lt;h4 id=&#34;元组的定义与访问&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#元组的定义与访问&#34;&gt;#&lt;/a&gt; 元组的定义与访问&lt;/h4&gt;
&lt;p&gt;元组和列表一样，也可以存储多个数据&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;列表&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;可以一次性存储多个数据，但是列表中的数据允许更改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;元组&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;元组可以存储多个数据且元组内的数据是不能修改的&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;元组类型应该为：&lt;strong&gt;tuple&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义元组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 元组特点：** 定义元组使用小括号，且使用逗号隔开各个数据，数据可以是不同的数据类型&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#多个数据元组
t1 = (10,20,30)

#单个数据元组
t2 = (10,)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：如果定义的元组只有一个数据，那么这个数据后面也要添加逗号，否则数据类型为唯一的这个数据的数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/k2t0qCzX&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/g2MmykKR/20250512190322.jpg&#34; alt=&#34;20250512190322.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;元组的相关操作&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;元组 [索引]&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;根据索引下标查找元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;index()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;查找某个数据，如果数据存在返回对应的下标，否则报错，语法和列表、字符串的 index 方法相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;count()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;统计某个数据在当前元组出现的次数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;len()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;统计元组中数据的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;元组 [索引]：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/DW7RsMBq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5tz1cczk/20250512192715.jpg&#34; alt=&#34;20250512192715.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;index()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;存在：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/wRYXySkz&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5y6nGJYX/20250512193308.jpg&#34; alt=&#34;20250512193308.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不存在：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/3yymLKS7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/k5ssgGWV/20250512193414.jpg&#34; alt=&#34;20250512193414.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;count()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/mhdMGzvR&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/hPn0TVMJ/20250512193721.jpg&#34; alt=&#34;20250512193721.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;len()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/XrKY4trF&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7ZdGMkDB/20250512194019.jpg&#34; alt=&#34;20250512194019.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;元组内的数据如果直接修改则立即报错，但是如果元组里面有列表，修改列表里面的数据则是支持的，故这个特点非常重要&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;修改报错：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/PpwxG0Hg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/NMNrXwzj/20250512192045.jpg&#34; alt=&#34;20250512192045.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-14-字典定义及使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-14-字典定义及使用&#34;&gt;#&lt;/a&gt; 1-14 字典定义及使用&lt;/h2&gt;
&lt;h4 id=&#34;字典的定义及访问过程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典的定义及访问过程&#34;&gt;#&lt;/a&gt; 字典的定义及访问过程&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;字典类型：dict&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;** 思考：** 数据顺序发生变化，每个数据的下标也会随之变化，如何保证数据变化前后能使用同一的标准查找数据呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答：&lt;strong&gt;字典，字典里面的数据是以&lt;/strong&gt;键值对&lt;/strong&gt;形式出现，字典顺序和数据顺序没有关系，即字典不支持下标，后期无论数据如何变化，只需要按照对应键的名字查找数据即可。&lt;/p&gt;
&lt;p&gt;字典特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;符号为&lt;strong&gt;大括号（花括号）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;数据为&lt;strong&gt;键值对&lt;/strong&gt;形式出现&lt;/li&gt;
&lt;li&gt;每个键值对用&lt;strong&gt;逗号&lt;/strong&gt;隔开&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;key:value 键值对&lt;/strong&gt;    key 可以是字符类型也可以是数值类型&lt;/p&gt;
&lt;p&gt;在 Python 代码中，字典中的 key 必须使用引号引起来&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 有数据字典
dict1 = &amp;#123;&#39;name&#39;:&#39;Tom&#39;, &#39;age&#39;:20, &#39;gender&#39;:&#39;male&#39;&amp;#125;

# 空字典
dict2 = &amp;#123;&amp;#125;

dict3 = dict()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：一般称冒号前面的为键（key）, 简称 k; 冒号后面的为值（value）, 简称 v&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/QHW9cbs1&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DyxrkjMj/20250514233120.jpg&#34; alt=&#34;20250514233120.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字典的 “增” 操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字典序列[key] = value
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;** 注意：** 如果 key 存在则修改这个 key 对应的值：如果 key 不存在则新增此键值对&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字典为可变类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/sBT7bXVq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/wvp2yynq/20250519234409.jpg&#34; alt=&#34;20250519234409.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/jWk02HxX&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/C1wFv79W/20250520000846.jpg&#34; alt=&#34;20250520000846.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字典的新增操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典的新增操作&#34;&gt;#&lt;/a&gt; 字典的新增操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字典名称[key] = value
注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;注意：列表、字典为可变类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/qtd9kkby&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/mrcRyk7X/20250521231114.jpg&#34; alt=&#34;20250521231114.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字典的删除操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典的删除操作&#34;&gt;#&lt;/a&gt; 字典的删除操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;删除操作：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;del 字典名称 [key]: 删除指定元素&lt;/li&gt;
&lt;li&gt;clear () 方法：清空字典中的所有 key&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/c6cJ3xcg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/nVy96Mjk/20250521232021.jpg&#34; alt=&#34;20250521232021.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字典的修改操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典的修改操作&#34;&gt;#&lt;/a&gt; 字典的修改操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字典名称[key] = value
注：如果key存在则修改这个key对应的值；如果key不存在则新增此键值对
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/F70RrBb9&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/xT4bRrcb/20250522223218.jpg&#34; alt=&#34;20250522223218.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;字典的查询方式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典的查询方式&#34;&gt;#&lt;/a&gt; 字典的查询方式&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;字典的查操作：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;查询方法：使用具体的某个 key 查询数据，如果未找到，则直接报错&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;字典数列[key]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字典的相关查询方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;编号&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;函数&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;get (key, 默认值)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;根据字典的 key 获取对应的 value 值，如果当查找的 key 不存在则返回第二个参数（默认值），如果省略第二个参数，则返回 None&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;keys()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以列表返回一个字典所有的键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;values()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以列表返回字典中的所有值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;items()&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以列表返回可遍历的（键，值）元组数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/SJLg6mLH&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/pX43tTmV/20250522225229.jpg&#34; alt=&#34;20250522225229.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/XZXM1rQr&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/nLGHz7mG/20250522225321.jpg&#34; alt=&#34;20250522225321.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/yJq95gzL&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7LhV50tr/20250522231007.jpg&#34; alt=&#34;20250522231007.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-15-案例-学生管理系统&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-15-案例-学生管理系统&#34;&gt;#&lt;/a&gt; 1-15 案例 - 学生管理系统&lt;/h2&gt;
&lt;h4 id=&#34;学生管理系统菜单功能开发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学生管理系统菜单功能开发&#34;&gt;#&lt;/a&gt; 学生管理系统菜单功能开发&lt;/h4&gt;
&lt;p&gt;** 需求：** 开一个通讯录的管理系统，主要用于实现存储班级中学生的信息（姓名、年龄、电话）&lt;/p&gt;
&lt;p&gt;** 知识点：** 列表、字典、死循环&lt;/p&gt;
&lt;p&gt;** 延伸：** 在 Python 中，我们可以使用字典来保存一个人的基本信息。但是如果想保存多个人的信息，我们必须把列表和字典结合起来&lt;/p&gt;
&lt;p&gt;问：为什么需要死循环？&lt;/p&gt;
&lt;p&gt;答：当我们选中某个菜单时，功能一旦执行完毕，则整个程序就执行结束了。为了保存程序可以一直运行下去，可以模拟死循环的效果，让程序一直运行下去&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/svnQSwfd&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/dVF8bxz1/20250523132536.jpg&#34; alt=&#34;20250523132536.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;学生管理系统多分支判断&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学生管理系统多分支判断&#34;&gt;#&lt;/a&gt; 学生管理系统多分支判断&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/H8jxt8tW&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/5ySCbwYz/20250523222412.jpg&#34; alt=&#34;20250523222412.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/bZw69z7C&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/MpyhxHdS/20250523222424.jpg&#34; alt=&#34;20250523222424.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;学生管理系统学生添加与查询功能实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学生管理系统学生添加与查询功能实现&#34;&gt;#&lt;/a&gt; 学生管理系统学生添加与查询功能实现&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/qNdpkzG7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/9QD0Y9Ry/20250527211018.jpg&#34; alt=&#34;20250527211018.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/tnhmDCnr&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fyFnzVzh/20250527211232.jpg&#34; alt=&#34;20250527211232.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;学生管理系统删除功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#学生管理系统删除功能&#34;&gt;#&lt;/a&gt; 学生管理系统删除功能&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/gxt0DYWq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Zq4yJRsg/20250527213921.jpg&#34; alt=&#34;20250527213921.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/hJrfNNNp&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/HxGX8gzD/20250527214013.jpg&#34; alt=&#34;20250527214013.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/GHQJxjvD&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/7ZvsDs6K/20250527235341.jpg&#34; alt=&#34;20250527235341.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/2V29SYcg&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/YCw58q12/20250527235500.jpg&#34; alt=&#34;20250527235500.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-16-集合定义及使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-16-集合定义及使用&#34;&gt;#&lt;/a&gt; 1-16 集合定义及使用&lt;/h2&gt;
&lt;h4 id=&#34;集合的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合的定义&#34;&gt;#&lt;/a&gt; 集合的定义&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;集合是一个天生去重的数据序列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;集合的定义：&lt;/p&gt;
&lt;p&gt;集合（set）是一个无序的不重复元素序列&lt;/p&gt;
&lt;p&gt;** 注意：** 集合里面的元素是不重复的并且集合内的元素还是无序的&lt;/p&gt;
&lt;p&gt;即，集合可以想元组一样，设置不可改变的类型。也可以默认想字典，列表一样，可以迭代改变。同时&lt;strong&gt;集合里的元素可以是列表，元组，字典&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本语法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建集合使用‘{}’或‘set ()’，但如果要创建空集合只能使用‘set ()’，因为‘{}’用来创建空字典&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/56WXxHG7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/gkn8H8KW/20250528234056.jpg&#34; alt=&#34;20250528234056.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;集合中的新增操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合中的新增操作&#34;&gt;#&lt;/a&gt; 集合中的新增操作&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;集合的增操作：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;add () 方法：向集合中增加一个元素（单一）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/F7GG3Qj4&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/bwfMXyrs/20250528234842.jpg&#34; alt=&#34;20250528234842.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update () 方法：向集合在增加序列类型的数据（字符串、列表、元组、字典）&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Fd8wtkrN&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/prLvFK3h/20250528235518.jpg&#34; alt=&#34;20250528235518.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;集合中的删除方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合中的删除方法&#34;&gt;#&lt;/a&gt; 集合中的删除方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;remove () 方法：删除集合中的指定数据，如果数据不存在则报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存在：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Ny1sF9fS&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SKPJZc0S/20250610182217.jpg&#34; alt=&#34;20250610182217.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不存在：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/9rK1FzkG&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/t4Cckxtm/20250610182403.jpg&#34; alt=&#34;20250610182403.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;discard () 方法：删除集合中的指定数据，如果数据不存在也不会报错&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;存在：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/zy19xdkb&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/cLK042gm/20250610182758.jpg&#34; alt=&#34;20250610182758.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不存在：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ZBgQpjRq&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/fyTh4rQY/20250610182856.jpg&#34; alt=&#34;20250610182856.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pop () 方法：随机删除集合中的某个数据，并返回这个数据&lt;/p&gt;
&lt;p&gt;执行原理：系统自动对集合中的数据进行排序（排序方法是混乱的，无规律的），排序后，pop () 方法自动删除第一个元素&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/KKsbpPz6&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/SsmKsVpx/20250610183301.jpg&#34; alt=&#34;20250610183301.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;集合中的查询方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合中的查询方法&#34;&gt;#&lt;/a&gt; 集合中的查询方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;in：判断某个元素是否在集合中，如果在，则返回 True，否则返回 Flase&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/ZvL4c1yc&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Y050p7rJ/20250610184653.jpg&#34; alt=&#34;20250610184653.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;not in : 判断某个元素不在集合中，如果不在，则返回 True，否则返回 Flase&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;集合的遍历操作&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Bjz1Wwmp&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/ZqbPdG3G/20250610185108.jpg&#34; alt=&#34;20250610185108.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;集合求交集-并集-差集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#集合求交集-并集-差集&#34;&gt;#&lt;/a&gt; 集合求交集 - 并集 - 差集&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;在 Python 中，求各集合所用的符号&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;集合&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;符号&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;交集&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;并集&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;I&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;差集&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/WFpbznNB&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DZLWCjtw/20250629094404.jpg&#34; alt=&#34;20250629094404.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-17-公共方法与推导式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-17-公共方法与推导式&#34;&gt;#&lt;/a&gt; 1-17 公共方法与推导式&lt;/h2&gt;
&lt;h4 id=&#34;常见公告方法汇总&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见公告方法汇总&#34;&gt;#&lt;/a&gt; 常见公告方法汇总&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;什么是公共方法？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;所谓公共方法就是支持大部分数据序列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常见公共方法：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;运算符&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;支持的容件类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;合并&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、列表、元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;复制&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、列表、元组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;in&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;元素是否存在&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、列表、元组、字典&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;not in&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;元素是否不存在&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;字符串、列表、元组、字典&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;合并：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/Lg3h4Bb7&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/T1Zb9tqR/20250629100941.jpg&#34; alt=&#34;20250629100941.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复制：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/BtDXSDLN&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/DfpscP2V/20250629101733.jpg&#34; alt=&#34;20250629101733.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;in 和 not  in：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://postimg.cc/xNYNmycv&#34;&gt;&lt;img loading=&#34;lazy&#34; data-src=&#34;https://i.postimg.cc/Kj3Pd0bH/20250629102528.jpg&#34; alt=&#34;20250629102528.jpg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://151064.xyz/%E6%B5%8B%E8%AF%95.html</guid>
            <title>测试</title>
            <link>https://151064.xyz/%E6%B5%8B%E8%AF%95.html</link>
            <category term="测试" scheme="https://151064.xyz/categories/%E6%B5%8B%E8%AF%95/" />
            <pubDate>Sun, 13 Apr 2025 13:00:05 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;Oh, this is an invalid password. Check and try again, please.&#34; data-whm=&#34;OOPS, these decrypted content may changed, but you can still have a look.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;55d2051a416bb86df9fa408b2d4f38bd1dc872796dffadf492dfa20548c9bdd9&#34;&gt;05759d172b0e2e5e4729f5f8c86587260886a291cfe7a32c007939594de7e2a3859ad6224112d5d66e2f0536a1e40fd6f47e757bee0619f55a70b8007f4bfb12&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://151064.xyz/hello-world.html</guid>
            <title>Hello World</title>
            <link>https://151064.xyz/hello-world.html</link>
            <pubDate>Sat, 05 Apr 2025 21:52:49 +0800</pubDate>
            <description><![CDATA[ &lt;div class=&#34;hbe hbe-container&#34; id=&#34;hexo-blog-encrypt&#34; data-wpm=&#34;Oh, this is an invalid password. Check and try again, please.&#34; data-whm=&#34;OOPS, these decrypted content may changed, but you can still have a look.&#34;&gt;
  &lt;script id=&#34;hbeData&#34; type=&#34;hbeData&#34; data-hmacdigest=&#34;cb1d86323eb5b0de32d5291c956bbfe5b2808d03d69acf901c5640f5e17e7db7&#34;&gt;05759d172b0e2e5e4729f5f8c8658726e13b0b45b93bf3338840eb7e43263f5abce7b0c4bf962e48293ba65763ae4bbbf92e6cea95e75e99cc26e3df5f88c65ec49ef70eb2e87c95730ef54b46e6977f6998128f90c8426e2e1a263699bacf9dcd999dac765857b536e64e779c6063c724e2a14f8b00ae238954825ee0cb6fc54f065b1b485fd0de6fd25b2cc919eacc0111a7162b3b18a4f8590db07d5bef4445ef72ec327b73a364ebdedfcbcc9af90bd1e639e921fb0a0bc826008d0ecc1a82185c5ada28c8e3070b478140d8fa40acdbff1d5b4f15657d94e75ef86166404eaa2ca97bac5e622ef25fd5debe191ebb1d8a5261f203e4c838ce463d5e3479c03c5740ac3ad11c19a660013185d968c81e445776b913e2535e4ebd787ecfeabd2975b7a157f72f41cecd1ed0355d06e146e9d1b0071746cb6f5b828b148b28d11cf4313fd03d70a50f4d32db9379006ac289558ad46b2c5070af05182f378a99ef536277907e44cd25ff12913f23c4d8904d982cb6c539490001295650d0797feecab6b1f02c18a755aae91b863e45eec822c6721d4aa23237addfa0f55341a57ce36c7718388b5756f13981c0709d70d0fc1a3d20f6b133885fd8c01a4341bd60534ae8aeec66e23e82ea21054a2e0fed71228812ad07280e9ea429b0316ca863d3901cf6312848336bfcfd0b5107e6f75f3fb573d6b17724810d006845f47d553410c4f9b626024afb7d5b88d1b74c0f72f747a0321ba044c875c39d124536a0965d65dd805560441ac67163cb97a1b8b82980165e8e9e4c72ca4ddbce879a194cce71e22b9c23b03af2d19fed31f31f0560f3e3a939dcde3fb24f69568b5c16f7e7f32fdf65873f893600c3389063339059eea6e935cf85b965801403dd04ec4872262ccd9d27a5574262a05a750edb6e91f0235dd496af200f644b6fca6dd51edecda257a9cc3b5f8cfc6ab058e310489b228f5d51a6a4e88dc7aac4fb5965938f6ab9177edf70c8e143aaf18bb468cd51dbf5eb2ebeb135c5377f11cfac79d3b45ed6cf1b6c4db53d8bd988ab43d2a53bc5618e121d7f8f2c6e4aa600bc3df1808a47ed80cc64d25d97c8d07e3d05015d096e771614909ecf262e3f604437686d513a5ad634de04b11ce12b4318667159b7f37576c82bb53af1fa7ca978bdbc44511675b929eb9be615cc89fc9242520f109ef35d69dde6b447c4a12ad798c03c109b5f8d7221b90fcc9b852285e42770b3784464aefbddd6caabd52848c273efa8f12d74dd4f6d7e0461a01de52984d9f51f0500978508c44208aaba111dfe554e209e90653e0a90110ebc99b410dc20ca14bd4174d3602f223f4e51462f9fb5a41e0a73275d7d0038936468d7fa3206045ee596fc72e984d707b7d6122990846b5dd1f627963dc5300ab5049aaaf57486f96a15af806fe5aeda8c8173f1703b39ea429c16eb474b5b0e02311a2496c6252420046727891f89dceb054063e122dbf104de6eb4f98abe5bd52ed32e8b471be871b5c1274c2c4fbb070e90ddbcdf924ef04133008c20011f0bc64b22c92a4086bfa97761e5bd36378b4e54514ee14321d072bb53e1233b9b221db861b728a948919294e42eeb18f9c8f3e4d8b55d6537b85abaf1d1c1f092e57ba1e151f523d2f13f6eb6c1269e6c160fe8645adf7b63a00bacd3aaa77fd0b523b541d524d89b11c5a73c3be34cc016690b5f1fae0a4ea0fb4672d9e9173d469dd13f37679caf50bde2c29c6b3b79f783038bcbd72a352f818d72c30f8c15208ad40fe5a7fc6801bba9265c560cc408e1b5a4cce4b1173559c17651b501db0273cbad537c5e110a559afe1c84890604e4b3fb8eceb36c33f4c8d37b14dff43f37b8f29b6cffac606e914a964ce582f11c628314d109152fa71239ad18411e84b1b6b8988017d751191fdf0cbc941dae1e37e1cc00d84c0eb3eb890b3b4576dd8c86ebb2bac64d3848bb57ee9e91062107a855f090ef5d50e0056173503324f47fee788df32069320ef602dbfacddb006680fe3b46adb998ef96b34210eba694ca924954373c67b79365d59725307f1e853e1c1b69cc6b2318b53b8fa532366011966f838a1345771826fe9e36c556197fe1088f7da6ad2c71f3d617d7f0a2ee8d8eabb9f5c12469e7c1dee30c698b82560ed86a23756b1e8453e26a02e1b39414e11188d5c966ed7f518ed051058106b608c32df7b3e4e640706440c9f99660e370fe0244f74fe903559fa01d19287e7adae64c56d254407dfbe6df10aad76b76327364ce4562fd01d290a84cbd36b6afa8385f4ba9f71152767fcd6f9efdfea2438c79fd9b7031a781ff65c6ba2449e673e1c4ce1a1343ca3ef5a0723cfc751aab0bc5c0dc034e16beca2b043bcaa3db18c944a94d134ad6fcd735650e4e93b36feebb60afdd2c217ee288edf8cb03ff79b45e0c70e1ada820ded470424b574d6fec2978aa89fc4dfdd23ae76811553ccef96ba33efc5a82ecabed23771b6852d614d5f50d1c923849bd8290d5f0652a83ac26adfde4b3ccc75f628556f3dda6dbe9f199682286a0a194091b85e9d9439ed307d7dcde811d8534f0b99e3e95295c5a4c71f7ccc7baeb66a45f13039c6f2a8464910b4e84dfaf685db2fbd55a2ce8fcc495242f040ad245c45de45ea5afb937405ce02536d9a4a254f16d7e35a8587a4cfc12700c17a28c510bfd867ceb4b4f79321037f93855ee664b966a58f5852880388c227b985a347ff42fa0af49c02051c332c1de5d11d4e3f6b0d43db7&lt;/script&gt;
  &lt;div class=&#34;hbe hbe-content&#34;&gt;
    &lt;div class=&#34;hbe hbe-input hbe-input-default&#34;&gt;
      &lt;input class=&#34;hbe hbe-input-field hbe-input-field-default&#34; type=&#34;password&#34; id=&#34;hbePass&#34;&gt;
      &lt;label class=&#34;hbe hbe-input-label hbe-input-label-default&#34; for=&#34;hbePass&#34;&gt;
        &lt;span class=&#34;hbe hbe-input-label-content hbe-input-label-content-default&#34;&gt;Hey, password is required here.&lt;/span&gt;
      &lt;/label&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;script data-pjax src=&#34;/lib/hbe.js&#34;&gt;&lt;/script&gt;&lt;link href=&#34;/css/hbe.style.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&gt; ]]></description>
        </item>
    </channel>
</rss>
